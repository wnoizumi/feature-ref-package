{
  "executionId" : "7719d076-908b-46cf-96e0-fb919fc8b92b",
  "computingTime" : 695669,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.165404775771695,
    "meanNumConcerns" : 1.6138504155124656,
    "meanMetricsIntensity" : 0.053565974990151706,
    "meanLackOfCohesion" : 0.5516677364702989
  },
  "population" : [ {
    "solutionId" : "a36edc52-48ff-49a2-8c94-174f7e183977",
    "objectives" : {
      "NumberOfConcerns" : 1.0017164435290078,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5515434348968673,
      "MetricsIntensity" : 0.053298186461491114,
      "Density" : 0.9988960441582336
    },
    "euclideanDistance" : 8.14298900880563,
    "generation" : 6,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.61037527593819,
      "LackOfCohesion" : 0.5515434348968673,
      "MetricsIntensity" : 0.05329818646149112,
      "Density" : 3.152729384436702
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "49233381-f4ba-443c-85d2-478c7220429e",
    "objectives" : {
      "NumberOfConcerns" : 1.0017164435290078,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5515434348968673,
      "MetricsIntensity" : 0.053298186461491114,
      "Density" : 0.9988960441582336
    },
    "euclideanDistance" : 8.14298900880563,
    "generation" : 10,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6103752759381902,
      "LackOfCohesion" : 0.5515434348968673,
      "MetricsIntensity" : 0.05329818646149113,
      "Density" : 3.152729384436701
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "78af1d16-0632-4e79-80a8-b83997a6e3ca",
    "objectives" : {
      "NumberOfConcerns" : 1.0017164435290078,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5515434348968674,
      "MetricsIntensity" : 0.05329818646149111,
      "Density" : 0.9988960441582336
    },
    "euclideanDistance" : 8.14298900880563,
    "generation" : 9,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.61037527593819,
      "LackOfCohesion" : 0.5515434348968674,
      "MetricsIntensity" : 0.053298186461491114,
      "Density" : 3.152729384436702
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "d7d1a201-19fd-4e09-a655-6f506e44cacf",
    "objectives" : {
      "NumberOfConcerns" : 1.0017164435290078,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5515434348968672,
      "MetricsIntensity" : 0.053298186461491134,
      "Density" : 0.9988960441582336
    },
    "euclideanDistance" : 8.14298900880563,
    "generation" : 12,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6103752759381904,
      "LackOfCohesion" : 0.5515434348968672,
      "MetricsIntensity" : 0.05329818646149114,
      "Density" : 3.1527293844367015
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "ffac0469-ff14-486e-95e6-78ec82d12e48",
    "objectives" : {
      "NumberOfConcerns" : 1.0017164435290078,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5515434348968672,
      "MetricsIntensity" : 0.053298186461491134,
      "Density" : 0.9988960441582336
    },
    "euclideanDistance" : 8.14298900880563,
    "generation" : 13,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.61037527593819,
      "LackOfCohesion" : 0.5515434348968672,
      "MetricsIntensity" : 0.053298186461491134,
      "Density" : 3.152729384436702
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "0d6f878d-2d72-40b1-8ef9-ea797d294a8c",
    "objectives" : {
      "NumberOfConcerns" : 1.0020597322348095,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5515252913450854,
      "MetricsIntensity" : 0.05329290478064902,
      "Density" : 0.9990800367985281
    },
    "euclideanDistance" : 8.143052554637547,
    "generation" : 10,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.610927152317881,
      "LackOfCohesion" : 0.5515252913450854,
      "MetricsIntensity" : 0.05329290478064903,
      "Density" : 3.1533101045296172
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "00bb0a65-5f52-4572-8fba-7b419333a79b",
    "objectives" : {
      "NumberOfConcerns" : 1.0020597322348095,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5515252913450855,
      "MetricsIntensity" : 0.05329290478064901,
      "Density" : 0.9990800367985281
    },
    "euclideanDistance" : 8.143052554637547,
    "generation" : 13,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6109271523178805,
      "LackOfCohesion" : 0.5515252913450855,
      "MetricsIntensity" : 0.05329290478064902,
      "Density" : 3.1533101045296172
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "37721cc8-8193-4cd2-84c9-dac1efbef091",
    "objectives" : {
      "NumberOfConcerns" : 1.0027463096464126,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5524671445781794,
      "MetricsIntensity" : 0.053261729754440865,
      "Density" : 0.9994480220791169
    },
    "euclideanDistance" : 8.143245868082467,
    "generation" : 6,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6111417539988966,
      "LackOfCohesion" : 0.5524671445781794,
      "MetricsIntensity" : 0.05326172975444087,
      "Density" : 3.152640742890308
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "410bcde9-3255-4d08-b6f4-9459bd32d3be",
    "objectives" : {
      "NumberOfConcerns" : 1.0027463096464126,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.552467144578179,
      "MetricsIntensity" : 0.05326172975444088,
      "Density" : 0.9994480220791169
    },
    "euclideanDistance" : 8.143245868082467,
    "generation" : 12,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6111417539988968,
      "LackOfCohesion" : 0.552467144578179,
      "MetricsIntensity" : 0.05326172975444088,
      "Density" : 3.1526407428903074
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "344de1b3-3748-4642-aa2a-0dfaa013cd3b",
    "objectives" : {
      "NumberOfConcerns" : 1.0027463096464126,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5524671445781788,
      "MetricsIntensity" : 0.053261729754440885,
      "Density" : 0.9994480220791169
    },
    "euclideanDistance" : 8.143245868082467,
    "generation" : 10,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6111417539988966,
      "LackOfCohesion" : 0.5524671445781788,
      "MetricsIntensity" : 0.053261729754440885,
      "Density" : 3.1526407428903074
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "38551acb-f584-4edf-9fa2-4458c11bfd8c",
    "objectives" : {
      "NumberOfConcerns" : 1.0027463096464126,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5524671445781792,
      "MetricsIntensity" : 0.05326172975444087,
      "Density" : 0.9994480220791169
    },
    "euclideanDistance" : 8.143245868082467,
    "generation" : 12,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6111417539988973,
      "LackOfCohesion" : 0.5524671445781792,
      "MetricsIntensity" : 0.05326172975444088,
      "Density" : 3.152640742890308
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "6928d3fc-95d3-4ac6-a534-456e022d17d5",
    "objectives" : {
      "NumberOfConcerns" : 1.0027463096464126,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.552467144578179,
      "MetricsIntensity" : 0.05326172975444088,
      "Density" : 0.9994480220791169
    },
    "euclideanDistance" : 8.143245868082467,
    "generation" : 11,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6111417539988966,
      "LackOfCohesion" : 0.552467144578179,
      "MetricsIntensity" : 0.053261729754440885,
      "Density" : 3.1526407428903074
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "17f887ae-87cf-4eab-b072-b9b829f95c72",
    "objectives" : {
      "NumberOfConcerns" : 1.0030895983522141,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.552449012869447,
      "MetricsIntensity" : 0.05325645152117109,
      "Density" : 0.9996320147194112
    },
    "euclideanDistance" : 8.143309466588105,
    "generation" : 3,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6116933259790405,
      "LackOfCohesion" : 0.552449012869447,
      "MetricsIntensity" : 0.053256451521171096,
      "Density" : 3.153221125943122
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "301e9f3f-11c9-4bcd-bba3-1e931ed5f6f8",
    "objectives" : {
      "NumberOfConcerns" : 1.0030895983522141,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.552449012869447,
      "MetricsIntensity" : 0.05325645152117109,
      "Density" : 0.9996320147194112
    },
    "euclideanDistance" : 8.143309466588105,
    "generation" : 11,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6116933259790405,
      "LackOfCohesion" : 0.552449012869447,
      "MetricsIntensity" : 0.0532564515211711,
      "Density" : 3.153221125943123
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "3e4bb88e-04cf-4c34-ba9c-d7afca886631",
    "objectives" : {
      "NumberOfConcerns" : 1.0030895983522141,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5524490128694466,
      "MetricsIntensity" : 0.05325645152117113,
      "Density" : 0.9996320147194112
    },
    "euclideanDistance" : 8.143309466588105,
    "generation" : 7,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6116933259790405,
      "LackOfCohesion" : 0.5524490128694466,
      "MetricsIntensity" : 0.05325645152117114,
      "Density" : 3.1532211259431224
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "3d5f92d3-0c0c-4c43-b0c8-bbcfb59e5419",
    "objectives" : {
      "NumberOfConcerns" : 1.0030895983522141,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.5524490128694468,
      "MetricsIntensity" : 0.0532564515211711,
      "Density" : 0.9996320147194112
    },
    "euclideanDistance" : 8.143309466588105,
    "generation" : 12,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6116933259790405,
      "LackOfCohesion" : 0.5524490128694468,
      "MetricsIntensity" : 0.05325645152117111,
      "Density" : 3.153221125943123
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "3fd85573-c65e-4cb8-8a4c-f95dc4fa4dd0",
    "objectives" : {
      "NumberOfConcerns" : 1.0006865774116032,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.550596731259545,
      "MetricsIntensity" : 0.05333212408246356,
      "Density" : 0.9981600735970562
    },
    "euclideanDistance" : 9.1270859662144,
    "generation" : 9,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6096079514080617,
      "LackOfCohesion" : 0.550596731259545,
      "MetricsIntensity" : 0.053332124082463565,
      "Density" : 3.15406976744186
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "fefcaa37-e6a1-4635-ad03-24ed58e14ffe",
    "objectives" : {
      "NumberOfConcerns" : 1.0006865774116032,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5505967312595447,
      "MetricsIntensity" : 0.05333212408246358,
      "Density" : 0.9981600735970562
    },
    "euclideanDistance" : 9.1270859662144,
    "generation" : 11,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6096079514080617,
      "LackOfCohesion" : 0.5505967312595447,
      "MetricsIntensity" : 0.053332124082463586,
      "Density" : 3.15406976744186
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "41799386-f8ab-46c0-8fcb-beac2a57a48c",
    "objectives" : {
      "NumberOfConcerns" : 1.0006865774116032,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5505967312595448,
      "MetricsIntensity" : 0.05333212408246357,
      "Density" : 0.9981600735970562
    },
    "euclideanDistance" : 9.1270859662144,
    "generation" : 11,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6096079514080617,
      "LackOfCohesion" : 0.5505967312595448,
      "MetricsIntensity" : 0.05333212408246358,
      "Density" : 3.15406976744186
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "06a36643-5868-4bee-a600-ab354b3c2042",
    "objectives" : {
      "NumberOfConcerns" : 1.0017164435290078,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.551521662634729,
      "MetricsIntensity" : 0.05329562139610049,
      "Density" : 0.9987120515179393
    },
    "euclideanDistance" : 9.127314948148713,
    "generation" : 14,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6103752759381904,
      "LackOfCohesion" : 0.551521662634729,
      "MetricsIntensity" : 0.05329562139610049,
      "Density" : 3.1539802440441607
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "1e906a4f-403d-462e-ad49-208fd0ddb0d3",
    "objectives" : {
      "NumberOfConcerns" : 1.0017164435290078,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5515216626347291,
      "MetricsIntensity" : 0.053295621396100466,
      "Density" : 0.9987120515179393
    },
    "euclideanDistance" : 9.127314948148713,
    "generation" : 13,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6103752759381904,
      "LackOfCohesion" : 0.5515216626347291,
      "MetricsIntensity" : 0.05329562139610047,
      "Density" : 3.1539802440441598
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "ee4211a6-f88e-43f9-a0cb-737213b8c48e",
    "objectives" : {
      "NumberOfConcerns" : 1.0003432887058015,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5509931683339826,
      "MetricsIntensity" : 0.05337235199060259,
      "Density" : 0.9981600735970562
    },
    "euclideanDistance" : 10.1145169092394,
    "generation" : 13,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6099447513812162,
      "LackOfCohesion" : 0.5509931683339826,
      "MetricsIntensity" : 0.0533723519906026,
      "Density" : 3.15406976744186
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "ae47b247-d219-4910-a8d2-eb6f22012a9d",
    "objectives" : {
      "NumberOfConcerns" : 1.0003432887058015,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5509931683339827,
      "MetricsIntensity" : 0.053372351990602585,
      "Density" : 0.9981600735970562
    },
    "euclideanDistance" : 10.1145169092394,
    "generation" : 10,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6099447513812164,
      "LackOfCohesion" : 0.5509931683339827,
      "MetricsIntensity" : 0.05337235199060259,
      "Density" : 3.1540697674418605
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "5bfdfef1-43d6-4c48-a9b2-75a9f1130306",
    "objectives" : {
      "NumberOfConcerns" : 1.0003432887058015,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5509931683339826,
      "MetricsIntensity" : 0.05337235199060259,
      "Density" : 0.9981600735970562
    },
    "euclideanDistance" : 10.1145169092394,
    "generation" : 13,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6099447513812157,
      "LackOfCohesion" : 0.5509931683339826,
      "MetricsIntensity" : 0.05337235199060259,
      "Density" : 3.15406976744186
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "767154e9-7f1f-494c-8a14-4b2655364bf8",
    "objectives" : {
      "NumberOfConcerns" : 1.0003432887058015,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5509931683339827,
      "MetricsIntensity" : 0.053372351990602585,
      "Density" : 0.9981600735970562
    },
    "euclideanDistance" : 10.1145169092394,
    "generation" : 16,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6099447513812155,
      "LackOfCohesion" : 0.5509931683339827,
      "MetricsIntensity" : 0.05337235199060259,
      "Density" : 3.15406976744186
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "8ed79e66-9a07-4b9c-9973-fe697e97f884",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.551425396058798,
      "MetricsIntensity" : 0.053335270640231976,
      "Density" : 0.9977920883164674
    },
    "euclideanDistance" : 11.104166050182238,
    "generation" : 8,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6085035891772501,
      "LackOfCohesion" : 0.551425396058798,
      "MetricsIntensity" : 0.053335270640231976,
      "Density" : 3.1510749564206852
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "a5053978-6a3e-4775-a5b3-a89f571584da",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5514253960587978,
      "MetricsIntensity" : 0.05333527064023201,
      "Density" : 0.9977920883164674
    },
    "euclideanDistance" : 11.104166050182238,
    "generation" : 9,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6085035891772503,
      "LackOfCohesion" : 0.5514253960587978,
      "MetricsIntensity" : 0.05333527064023201,
      "Density" : 3.1510749564206852
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "c7f0a4f9-1fed-434e-a903-c178d7455549",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5514253960587981,
      "MetricsIntensity" : 0.05333527064023196,
      "Density" : 0.9977920883164674
    },
    "euclideanDistance" : 11.104166050182238,
    "generation" : 12,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6085035891772492,
      "LackOfCohesion" : 0.5514253960587981,
      "MetricsIntensity" : 0.05333527064023197,
      "Density" : 3.1510749564206852
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "ae7ed302-452e-4c3b-bd3c-ca1af5e6f875",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5514253960587979,
      "MetricsIntensity" : 0.05333527064023198,
      "Density" : 0.9977920883164674
    },
    "euclideanDistance" : 11.104166050182238,
    "generation" : 8,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6085035891772503,
      "LackOfCohesion" : 0.5514253960587979,
      "MetricsIntensity" : 0.05333527064023198,
      "Density" : 3.1510749564206852
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "238bf286-1f99-4ae6-8a24-b5e2ab761f94",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.551425396058798,
      "MetricsIntensity" : 0.053335270640231976,
      "Density" : 0.9977920883164674
    },
    "euclideanDistance" : 11.104166050182238,
    "generation" : 11,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6085035891772503,
      "LackOfCohesion" : 0.551425396058798,
      "MetricsIntensity" : 0.053335270640231976,
      "Density" : 3.1510749564206852
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "7c9b0fc3-007b-48cc-b14a-f7c7ef84161c",
    "objectives" : {
      "NumberOfConcerns" : 1.0003432887058015,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5513225476876426,
      "MetricsIntensity" : 0.053370555226215886,
      "Density" : 0.9979760809567617
    },
    "euclideanDistance" : 11.104208567978832,
    "generation" : 5,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.609944751381216,
      "LackOfCohesion" : 0.5513225476876426,
      "MetricsIntensity" : 0.05337055522621589,
      "Density" : 3.155322862129144
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "8f6b7117-0ab0-4a80-8d34-5ff299ea47a7",
    "objectives" : {
      "NumberOfConcerns" : 1.0003432887058015,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5513225476876424,
      "MetricsIntensity" : 0.05337055522621591,
      "Density" : 0.9979760809567617
    },
    "euclideanDistance" : 11.104208567978832,
    "generation" : 7,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6099447513812166,
      "LackOfCohesion" : 0.5513225476876424,
      "MetricsIntensity" : 0.05337055522621591,
      "Density" : 3.1553228621291445
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "bd47a135-058f-4145-85bb-b8fd352f8d39",
    "objectives" : {
      "NumberOfConcerns" : 1.0003432887058015,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5513225476876424,
      "MetricsIntensity" : 0.05337055522621591,
      "Density" : 0.9979760809567617
    },
    "euclideanDistance" : 11.104208567978832,
    "generation" : 12,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6099447513812166,
      "LackOfCohesion" : 0.5513225476876424,
      "MetricsIntensity" : 0.05337055522621591,
      "Density" : 3.1553228621291436
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "0c47d9d5-6f04-4263-8a59-fc93d3608b44",
    "objectives" : {
      "NumberOfConcerns" : 1.0003432887058015,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5514072406484856,
      "MetricsIntensity" : 0.0533299855073109,
      "Density" : 0.9979760809567617
    },
    "euclideanDistance" : 11.104212578378277,
    "generation" : 5,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.609055770292656,
      "LackOfCohesion" : 0.5514072406484856,
      "MetricsIntensity" : 0.053329985507310905,
      "Density" : 3.1516560139453813
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "bbb8a41b-7d52-47b7-92fc-469843b449cb",
    "objectives" : {
      "NumberOfConcerns" : 1.0003432887058015,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5514072406484858,
      "MetricsIntensity" : 0.05332998550731088,
      "Density" : 0.9979760809567617
    },
    "euclideanDistance" : 11.104212578378277,
    "generation" : 15,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.609055770292656,
      "LackOfCohesion" : 0.5514072406484858,
      "MetricsIntensity" : 0.05332998550731088,
      "Density" : 3.1516560139453804
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "2061b978-bd32-40be-bec9-ac1fb96f6274",
    "objectives" : {
      "NumberOfConcerns" : 1.0003432887058015,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5514072406484857,
      "MetricsIntensity" : 0.053329985507310884,
      "Density" : 0.9979760809567617
    },
    "euclideanDistance" : 11.104212578378277,
    "generation" : 16,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.609055770292656,
      "LackOfCohesion" : 0.5514072406484857,
      "MetricsIntensity" : 0.05332998550731089,
      "Density" : 3.1516560139453804
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "af6e5bf6-b00c-477d-a5f7-c87faf4b20ba",
    "objectives" : {
      "NumberOfConcerns" : 1.0010298661174046,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5523497861767651,
      "MetricsIntensity" : 0.05329876589863847,
      "Density" : 0.9983440662373505
    },
    "euclideanDistance" : 11.104354223104835,
    "generation" : 8,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6092715231788084,
      "LackOfCohesion" : 0.5523497861767651,
      "MetricsIntensity" : 0.05329876589863847,
      "Density" : 3.1509872241579555
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "bed9d4f6-8633-45ea-85f4-464693abecfe",
    "objectives" : {
      "NumberOfConcerns" : 1.0010298661174046,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5523497861767652,
      "MetricsIntensity" : 0.053298765898638446,
      "Density" : 0.9983440662373505
    },
    "euclideanDistance" : 11.104354223104835,
    "generation" : 8,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6092715231788075,
      "LackOfCohesion" : 0.5523497861767652,
      "MetricsIntensity" : 0.053298765898638446,
      "Density" : 3.1509872241579555
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "1074841b-80c5-4b2b-a865-9127ef18cb2e",
    "objectives" : {
      "NumberOfConcerns" : 1.0010298661174046,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5523497861767653,
      "MetricsIntensity" : 0.05329876589863843,
      "Density" : 0.9983440662373505
    },
    "euclideanDistance" : 11.104354223104835,
    "generation" : 10,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6092715231788077,
      "LackOfCohesion" : 0.5523497861767653,
      "MetricsIntensity" : 0.05329876589863844,
      "Density" : 3.150987224157956
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "385de9b7-e981-4df3-acfe-6d73718c432f",
    "objectives" : {
      "NumberOfConcerns" : 1.0010298661174046,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5523497861767653,
      "MetricsIntensity" : 0.05329876589863843,
      "Density" : 0.9983440662373505
    },
    "euclideanDistance" : 11.104354223104835,
    "generation" : 13,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6092715231788077,
      "LackOfCohesion" : 0.5523497861767653,
      "MetricsIntensity" : 0.053298765898638446,
      "Density" : 3.1509872241579564
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "9e78d20e-ddab-4aeb-ac42-e3e3b0566a18",
    "objectives" : {
      "NumberOfConcerns" : 1.0010298661174046,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5523497861767652,
      "MetricsIntensity" : 0.053298765898638446,
      "Density" : 0.9983440662373505
    },
    "euclideanDistance" : 11.104354223104835,
    "generation" : 9,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6092715231788075,
      "LackOfCohesion" : 0.5523497861767652,
      "MetricsIntensity" : 0.05329876589863844,
      "Density" : 3.1509872241579546
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "574d1d1c-722d-421e-a8ae-69da0d55e8f1",
    "objectives" : {
      "NumberOfConcerns" : 1.0013731548232063,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5523316426249834,
      "MetricsIntensity" : 0.05329348421779635,
      "Density" : 0.9985280588776448
    },
    "euclideanDistance" : 11.104400790608715,
    "generation" : 9,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6098233995584987,
      "LackOfCohesion" : 0.5523316426249834,
      "MetricsIntensity" : 0.05329348421779635,
      "Density" : 3.1515679442508713
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "4f4df88b-867b-47f3-8472-a6e9d2ad1de3",
    "objectives" : {
      "NumberOfConcerns" : 1.0013731548232063,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5523316426249834,
      "MetricsIntensity" : 0.05329348421779635,
      "Density" : 0.9985280588776448
    },
    "euclideanDistance" : 11.104400790608715,
    "generation" : 5,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.609823399558499,
      "LackOfCohesion" : 0.5523316426249834,
      "MetricsIntensity" : 0.05329348421779635,
      "Density" : 3.1515679442508713
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "8517c505-5773-4363-8a86-66611c9d712d",
    "objectives" : {
      "NumberOfConcerns" : 1.0013731548232063,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5523316426249837,
      "MetricsIntensity" : 0.05329348421779632,
      "Density" : 0.9985280588776448
    },
    "euclideanDistance" : 11.104400790608715,
    "generation" : 11,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6098233995584985,
      "LackOfCohesion" : 0.5523316426249837,
      "MetricsIntensity" : 0.053293484217796325,
      "Density" : 3.1515679442508713
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "baa6fe4f-e857-413f-8c7b-71b87a68e15f",
    "objectives" : {
      "NumberOfConcerns" : 1.0013731548232063,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5523316426249836,
      "MetricsIntensity" : 0.05329348421779634,
      "Density" : 0.9985280588776448
    },
    "euclideanDistance" : 11.104400790608715,
    "generation" : 14,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6098233995584985,
      "LackOfCohesion" : 0.5523316426249836,
      "MetricsIntensity" : 0.05329348421779634,
      "Density" : 3.1515679442508713
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "242c5474-9af2-4656-bac8-024b27ff9442",
    "objectives" : {
      "NumberOfConcerns" : 1.0013731548232063,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5523316426249836,
      "MetricsIntensity" : 0.05329348421779634,
      "Density" : 0.9985280588776448
    },
    "euclideanDistance" : 11.104400790608715,
    "generation" : 3,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6098233995584985,
      "LackOfCohesion" : 0.5523316426249836,
      "MetricsIntensity" : 0.05329348421779634,
      "Density" : 3.1515679442508713
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "6933696c-fc24-40e3-9168-6ec940b23a4d",
    "objectives" : {
      "NumberOfConcerns" : 1.0013731548232063,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5523316426249834,
      "MetricsIntensity" : 0.05329348421779635,
      "Density" : 0.9985280588776448
    },
    "euclideanDistance" : 11.104400790608715,
    "generation" : 9,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.609823399558499,
      "LackOfCohesion" : 0.5523316426249834,
      "MetricsIntensity" : 0.05329348421779636,
      "Density" : 3.1515679442508713
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "cf86cf35-4658-4071-89b8-76904b926af3",
    "objectives" : {
      "NumberOfConcerns" : 0.9989701338825953,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5504779960562205,
      "MetricsIntensity" : 0.053369254711040745,
      "Density" : 0.9970561177552898
    },
    "euclideanDistance" : 12.095368391737109,
    "generation" : 8,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6077348066298345,
      "LackOfCohesion" : 0.5504779960562205,
      "MetricsIntensity" : 0.05336925471104075,
      "Density" : 3.15241419429901
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "eb2fd5e9-61ab-4ce9-b51c-f3655c65c68d",
    "objectives" : {
      "NumberOfConcerns" : 0.9989701338825953,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5504779960562204,
      "MetricsIntensity" : 0.05336925471104076,
      "Density" : 0.9970561177552898
    },
    "euclideanDistance" : 12.095368391737109,
    "generation" : 9,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6077348066298345,
      "LackOfCohesion" : 0.5504779960562204,
      "MetricsIntensity" : 0.05336925471104076,
      "Density" : 3.15241419429901
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "91ab0a27-c997-4753-89a1-c9931c433fb8",
    "objectives" : {
      "NumberOfConcerns" : 0.9989701338825953,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5504779960562204,
      "MetricsIntensity" : 0.05336925471104076,
      "Density" : 0.9970561177552898
    },
    "euclideanDistance" : 12.095368391737109,
    "generation" : 7,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6077348066298343,
      "LackOfCohesion" : 0.5504779960562204,
      "MetricsIntensity" : 0.053369254711040766,
      "Density" : 3.152414194299011
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "9c981f9c-b596-40d7-9d25-0060c9ef0da4",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.551403609566423,
      "MetricsIntensity" : 0.053332703898328,
      "Density" : 0.9976080956761729
    },
    "euclideanDistance" : 12.095541006110748,
    "generation" : 11,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6085035891772503,
      "LackOfCohesion" : 0.551403609566423,
      "MetricsIntensity" : 0.053332703898328,
      "Density" : 3.152325581395349
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "7b224b75-6e05-4332-90c7-42a783143197",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5514036095664233,
      "MetricsIntensity" : 0.053332703898327956,
      "Density" : 0.9976080956761729
    },
    "euclideanDistance" : 12.095541006110748,
    "generation" : 6,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.60850358917725,
      "LackOfCohesion" : 0.5514036095664233,
      "MetricsIntensity" : 0.05333270389832796,
      "Density" : 3.1523255813953495
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "3e3511f1-a84f-4111-af65-5f9ae7e7fb1e",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5514036095664232,
      "MetricsIntensity" : 0.05333270389832797,
      "Density" : 0.9976080956761729
    },
    "euclideanDistance" : 12.095541006110748,
    "generation" : 17,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6085035891772497,
      "LackOfCohesion" : 0.5514036095664232,
      "MetricsIntensity" : 0.05333270389832798,
      "Density" : 3.1523255813953495
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "593f1d94-049c-40df-b21d-a64b350a9436",
    "objectives" : {
      "NumberOfConcerns" : 0.9986268451767937,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5508746148727202,
      "MetricsIntensity" : 0.05340953324649438,
      "Density" : 0.9970561177552898
    },
    "euclideanDistance" : 13.088074415184755,
    "generation" : 7,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6080707573244886,
      "LackOfCohesion" : 0.5508746148727202,
      "MetricsIntensity" : 0.053409533246494376,
      "Density" : 3.1524141942990105
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "1e5d9232-39b4-42ea-b9ea-7e6ccdbba474",
    "objectives" : {
      "NumberOfConcerns" : 0.9986268451767937,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5508746148727203,
      "MetricsIntensity" : 0.05340953324649435,
      "Density" : 0.9970561177552898
    },
    "euclideanDistance" : 13.088074415184755,
    "generation" : 15,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6080707573244888,
      "LackOfCohesion" : 0.5508746148727203,
      "MetricsIntensity" : 0.05340953324649435,
      "Density" : 3.15241419429901
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "74910609-bc98-4919-8dcf-b6cf5b34e2a9",
    "objectives" : {
      "NumberOfConcerns" : 0.9986268451767937,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5512042097887845,
      "MetricsIntensity" : 0.053407735306214725,
      "Density" : 0.9968721251149955
    },
    "euclideanDistance" : 14.08182119176417,
    "generation" : 3,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6080707573244886,
      "LackOfCohesion" : 0.5512042097887845,
      "MetricsIntensity" : 0.053407735306214725,
      "Density" : 3.1536670547147847
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "521fad1e-ee55-4164-871c-87b0dc4afbfa",
    "objectives" : {
      "NumberOfConcerns" : 0.9986268451767937,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5512042097887843,
      "MetricsIntensity" : 0.05340773530621474,
      "Density" : 0.9968721251149955
    },
    "euclideanDistance" : 14.08182119176417,
    "generation" : 16,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6080707573244888,
      "LackOfCohesion" : 0.5512042097887843,
      "MetricsIntensity" : 0.053407735306214746,
      "Density" : 3.153667054714783
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "b092e40d-df94-42bb-83f2-7f4501c75274",
    "objectives" : {
      "NumberOfConcerns" : 0.9986268451767937,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.551204209788784,
      "MetricsIntensity" : 0.053407735306214774,
      "Density" : 0.9968721251149955
    },
    "euclideanDistance" : 14.08182119176417,
    "generation" : 4,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6080707573244888,
      "LackOfCohesion" : 0.551204209788784,
      "MetricsIntensity" : 0.05340773530621477,
      "Density" : 3.1536670547147847
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "0acc0711-1b33-4a1e-9613-45231d9937dc",
    "objectives" : {
      "NumberOfConcerns" : 0.9986268451767937,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5512042097887841,
      "MetricsIntensity" : 0.05340773530621475,
      "Density" : 0.9968721251149955
    },
    "euclideanDistance" : 14.08182119176417,
    "generation" : 11,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6080707573244888,
      "LackOfCohesion" : 0.5512042097887841,
      "MetricsIntensity" : 0.05340773530621476,
      "Density" : 3.1536670547147847
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "1a39acd9-bae3-4b95-9294-a9e58cbd2162",
    "objectives" : {
      "NumberOfConcerns" : 1.0006865774116032,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5511273879666722,
      "MetricsIntensity" : 0.053329028827267484,
      "Density" : 0.9985280588776448
    },
    "euclideanDistance" : 14.082081426183429,
    "generation" : 11,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6096079514080617,
      "LackOfCohesion" : 0.5511273879666722,
      "MetricsIntensity" : 0.053329028827267484,
      "Density" : 3.1533991865194655
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "62ea70f6-37de-4a53-b3dc-4ff6dc2dfb51",
    "objectives" : {
      "NumberOfConcerns" : 1.0006865774116032,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5511273879666723,
      "MetricsIntensity" : 0.05332902882726747,
      "Density" : 0.9985280588776448
    },
    "euclideanDistance" : 14.082081426183429,
    "generation" : 9,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6096079514080617,
      "LackOfCohesion" : 0.5511273879666723,
      "MetricsIntensity" : 0.05332902882726747,
      "Density" : 3.153399186519466
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "60a6893c-1c6b-4b1c-acd7-40c96c566a02",
    "objectives" : {
      "NumberOfConcerns" : 1.0006865774116032,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.551127387966672,
      "MetricsIntensity" : 0.0533290288272675,
      "Density" : 0.9985280588776448
    },
    "euclideanDistance" : 14.082081426183429,
    "generation" : 10,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6096079514080623,
      "LackOfCohesion" : 0.551127387966672,
      "MetricsIntensity" : 0.0533290288272675,
      "Density" : 3.153399186519466
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "f5bf2a7b-0837-458d-97bf-d12674a28abf",
    "objectives" : {
      "NumberOfConcerns" : 1.0006865774116032,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5511273879666722,
      "MetricsIntensity" : 0.053329028827267484,
      "Density" : 0.9985280588776448
    },
    "euclideanDistance" : 14.082081426183429,
    "generation" : 12,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6096079514080637,
      "LackOfCohesion" : 0.5511273879666722,
      "MetricsIntensity" : 0.05332902882726749,
      "Density" : 3.153399186519466
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "b0bb8050-b47c-4272-b894-ad20d7fbae87",
    "objectives" : {
      "NumberOfConcerns" : 1.0010298661174046,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.55110923255636,
      "MetricsIntensity" : 0.05332374369434638,
      "Density" : 0.9987120515179393
    },
    "euclideanDistance" : 14.082118141904528,
    "generation" : 4,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6101601325234673,
      "LackOfCohesion" : 0.55110923255636,
      "MetricsIntensity" : 0.053323743694346386,
      "Density" : 3.153980244044158
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "27184c31-a867-48a2-af18-dbd3f90addee",
    "objectives" : {
      "NumberOfConcerns" : 1.0010298661174046,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5511092325563599,
      "MetricsIntensity" : 0.0533237436943464,
      "Density" : 0.9987120515179393
    },
    "euclideanDistance" : 14.082118141904528,
    "generation" : 10,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6101601325234673,
      "LackOfCohesion" : 0.5511092325563599,
      "MetricsIntensity" : 0.0533237436943464,
      "Density" : 3.15398024404416
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "2799a41b-8b7f-4ab2-a8b4-8c77b843e4e0",
    "objectives" : {
      "NumberOfConcerns" : 1.0010298661174046,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5511092325563598,
      "MetricsIntensity" : 0.053323743694346414,
      "Density" : 0.9987120515179393
    },
    "euclideanDistance" : 14.082118141904528,
    "generation" : 4,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6101601325234673,
      "LackOfCohesion" : 0.5511092325563598,
      "MetricsIntensity" : 0.053323743694346414,
      "Density" : 3.1539802440441607
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "d8bc2cc4-18ed-45b4-a243-208295781af6",
    "objectives" : {
      "NumberOfConcerns" : 1.0010298661174046,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.55110923255636,
      "MetricsIntensity" : 0.05332374369434638,
      "Density" : 0.9987120515179393
    },
    "euclideanDistance" : 14.082118141904528,
    "generation" : 10,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6101601325234673,
      "LackOfCohesion" : 0.55110923255636,
      "MetricsIntensity" : 0.05332374369434638,
      "Density" : 3.1539802440441598
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "cf4d2fe9-d6ad-4d7d-8284-7c6f46b7a8d1",
    "objectives" : {
      "NumberOfConcerns" : 1.0017164435290078,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5520519727339486,
      "MetricsIntensity" : 0.053292528162625585,
      "Density" : 0.9990800367985281
    },
    "euclideanDistance" : 14.08222987411167,
    "generation" : 11,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.61037527593819,
      "LackOfCohesion" : 0.5520519727339486,
      "MetricsIntensity" : 0.05329252816262559,
      "Density" : 3.153310104529617
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "469d6242-f1d0-4f4b-8740-c4bc7f23875a",
    "objectives" : {
      "NumberOfConcerns" : 1.0017164435290078,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5520519727339485,
      "MetricsIntensity" : 0.0532925281626256,
      "Density" : 0.9990800367985281
    },
    "euclideanDistance" : 14.08222987411167,
    "generation" : 12,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6103752759381902,
      "LackOfCohesion" : 0.5520519727339485,
      "MetricsIntensity" : 0.0532925281626256,
      "Density" : 3.1533101045296172
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "f44a225c-fe20-4938-85fd-56827e08873e",
    "objectives" : {
      "NumberOfConcerns" : 1.0017164435290078,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5520519727339485,
      "MetricsIntensity" : 0.0532925281626256,
      "Density" : 0.9990800367985281
    },
    "euclideanDistance" : 14.08222987411167,
    "generation" : 15,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.61037527593819,
      "LackOfCohesion" : 0.5520519727339485,
      "MetricsIntensity" : 0.053292528162625606,
      "Density" : 3.153310104529616
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "0f452352-058b-418b-93d9-c7d29281b55e",
    "objectives" : {
      "NumberOfConcerns" : 1.0020597322348095,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5520338291821668,
      "MetricsIntensity" : 0.05328724648178349,
      "Density" : 0.9992640294388224
    },
    "euclideanDistance" : 14.082266621062674,
    "generation" : 4,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6109271523178819,
      "LackOfCohesion" : 0.5520338291821668,
      "MetricsIntensity" : 0.05328724648178349,
      "Density" : 3.1538908246225326
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "290e4398-3430-4da6-9cb6-57f2b33164ab",
    "objectives" : {
      "NumberOfConcerns" : 1.0020597322348095,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5520338291821668,
      "MetricsIntensity" : 0.05328724648178349,
      "Density" : 0.9992640294388224
    },
    "euclideanDistance" : 14.082266621062674,
    "generation" : 9,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6109271523178805,
      "LackOfCohesion" : 0.5520338291821668,
      "MetricsIntensity" : 0.05328724648178349,
      "Density" : 3.153890824622532
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "3ba30374-01cc-4800-84ac-41e70b05fdbd",
    "objectives" : {
      "NumberOfConcerns" : 1.0020597322348095,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5520338291821667,
      "MetricsIntensity" : 0.0532872464817835,
      "Density" : 0.9992640294388224
    },
    "euclideanDistance" : 14.082266621062674,
    "generation" : 11,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6109271523178808,
      "LackOfCohesion" : 0.5520338291821667,
      "MetricsIntensity" : 0.0532872464817835,
      "Density" : 3.153890824622532
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "5c997da3-a647-4e3c-9356-5d2b28ec1cb1",
    "objectives" : {
      "NumberOfConcerns" : 0.9982835564709921,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5516015639245696,
      "MetricsIntensity" : 0.053448065419357,
      "Density" : 0.9968721251149955
    },
    "euclideanDistance" : 15.076387003323202,
    "generation" : 15,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.608407079646018,
      "LackOfCohesion" : 0.5516015639245696,
      "MetricsIntensity" : 0.053448065419357,
      "Density" : 3.1536670547147847
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "f59cef1d-03b9-4f62-83b4-d3c1a0ab2ed7",
    "objectives" : {
      "NumberOfConcerns" : 0.9982835564709921,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5516015639245699,
      "MetricsIntensity" : 0.053448065419356997,
      "Density" : 0.9968721251149955
    },
    "euclideanDistance" : 15.076387003323202,
    "generation" : 12,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.608407079646018,
      "LackOfCohesion" : 0.5516015639245699,
      "MetricsIntensity" : 0.053448065419357,
      "Density" : 3.1536670547147847
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey), org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "a746c930-67b3-4427-bd12-53503c276dd3",
    "objectives" : {
      "NumberOfConcerns" : 0.9996567112941984,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5501797930601757,
      "MetricsIntensity" : 0.05336300881579178,
      "Density" : 0.9977920883164674
    },
    "euclideanDistance" : 15.076486593611394,
    "generation" : 9,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.608839779005525,
      "LackOfCohesion" : 0.5501797930601757,
      "MetricsIntensity" : 0.053363008815791785,
      "Density" : 3.1547411285631184
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "1f636e79-eccc-4025-b35a-990f35783cb9",
    "objectives" : {
      "NumberOfConcerns" : 0.9996567112941984,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5501797930601757,
      "MetricsIntensity" : 0.05336300881579178,
      "Density" : 0.9977920883164674
    },
    "euclideanDistance" : 15.076486593611394,
    "generation" : 7,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.608839779005524,
      "LackOfCohesion" : 0.5501797930601757,
      "MetricsIntensity" : 0.05336300881579179,
      "Density" : 3.1547411285631184
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "5a06f717-a75b-47c2-97c8-0783eb35e58f",
    "objectives" : {
      "NumberOfConcerns" : 0.9996567112941984,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5501797930601753,
      "MetricsIntensity" : 0.05336300881579179,
      "Density" : 0.9977920883164674
    },
    "euclideanDistance" : 15.076486593611394,
    "generation" : 8,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.608839779005525,
      "LackOfCohesion" : 0.5501797930601753,
      "MetricsIntensity" : 0.05336300881579179,
      "Density" : 3.154741128563119
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "5d4b1a6d-3103-47db-bd29-eb5bc81380de",
    "objectives" : {
      "NumberOfConcerns" : 0.9996567112941984,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5501797930601757,
      "MetricsIntensity" : 0.05336300881579178,
      "Density" : 0.9977920883164674
    },
    "euclideanDistance" : 15.076486593611394,
    "generation" : 11,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.608839779005525,
      "LackOfCohesion" : 0.5501797930601757,
      "MetricsIntensity" : 0.05336300881579179,
      "Density" : 3.1547411285631184
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "b181d59c-ebde-4c28-9f0f-1fe9a33533a9",
    "objectives" : {
      "NumberOfConcerns" : 1.0006865774116032,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5511056014742973,
      "MetricsIntensity" : 0.0533264620853635,
      "Density" : 0.9983440662373505
    },
    "euclideanDistance" : 15.076625139477931,
    "generation" : 6,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6096079514080617,
      "LackOfCohesion" : 0.5511056014742973,
      "MetricsIntensity" : 0.0533264620853635,
      "Density" : 3.154651162790697
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "ec558fcf-6ca3-4a7f-b4b9-6a31b1147e58",
    "objectives" : {
      "NumberOfConcerns" : 1.0006865774116032,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5511056014742975,
      "MetricsIntensity" : 0.05332646208536348,
      "Density" : 0.9983440662373505
    },
    "euclideanDistance" : 15.076625139477931,
    "generation" : 11,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6096079514080617,
      "LackOfCohesion" : 0.5511056014742975,
      "MetricsIntensity" : 0.053326462085363485,
      "Density" : 3.1546511627906972
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "26ac88c6-16ba-45c9-bef1-12343df27670",
    "objectives" : {
      "NumberOfConcerns" : 0.9989701338825953,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5510089998246341,
      "MetricsIntensity" : 0.053366157431478926,
      "Density" : 0.9974241030358786
    },
    "euclideanDistance" : 17.067491175751435,
    "generation" : 5,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6077348066298338,
      "LackOfCohesion" : 0.5510089998246341,
      "MetricsIntensity" : 0.053366157431478926,
      "Density" : 3.151744186046512
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "de7af292-948a-41b8-be9d-a640cc869f8d",
    "objectives" : {
      "NumberOfConcerns" : 0.9989701338825953,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.551008999824634,
      "MetricsIntensity" : 0.053366157431478954,
      "Density" : 0.9974241030358786
    },
    "euclideanDistance" : 17.067491175751435,
    "generation" : 14,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.607734806629834,
      "LackOfCohesion" : 0.551008999824634,
      "MetricsIntensity" : 0.053366157431478954,
      "Density" : 3.151744186046512
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "a8c29b44-50e7-471b-979b-70e8eaa4fd78",
    "objectives" : {
      "NumberOfConcerns" : 0.9993134225883968,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.55099083254028,
      "MetricsIntensity" : 0.05336086884196339,
      "Density" : 0.9976080956761729
    },
    "euclideanDistance" : 17.067521422543784,
    "generation" : 13,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6082872928176795,
      "LackOfCohesion" : 0.55099083254028,
      "MetricsIntensity" : 0.05336086884196339,
      "Density" : 3.1523255813953512
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "15891d3f-8743-4dba-97fc-8e3748825457",
    "objectives" : {
      "NumberOfConcerns" : 0.9993134225883968,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5509908325402799,
      "MetricsIntensity" : 0.053360868841963394,
      "Density" : 0.9976080956761729
    },
    "euclideanDistance" : 17.067521422543784,
    "generation" : 12,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6082872928176795,
      "LackOfCohesion" : 0.5509908325402799,
      "MetricsIntensity" : 0.0533608688419634,
      "Density" : 3.1523255813953495
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "0cf56ca1-4509-4572-9b74-2273337432d8",
    "objectives" : {
      "NumberOfConcerns" : 0.9993134225883968,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5509908325402798,
      "MetricsIntensity" : 0.0533608688419634,
      "Density" : 0.9976080956761729
    },
    "euclideanDistance" : 17.067521422543784,
    "generation" : 10,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6082872928176801,
      "LackOfCohesion" : 0.5509908325402798,
      "MetricsIntensity" : 0.05336086884196341,
      "Density" : 3.1523255813953504
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "d6037ec4-7a83-48b1-a665-a5871a1e69c3",
    "objectives" : {
      "NumberOfConcerns" : 0.9993134225883968,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5509908325402798,
      "MetricsIntensity" : 0.0533608688419634,
      "Density" : 0.9976080956761729
    },
    "euclideanDistance" : 17.067521422543784,
    "generation" : 8,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6082872928176797,
      "LackOfCohesion" : 0.5509908325402798,
      "MetricsIntensity" : 0.05336086884196341,
      "Density" : 3.15232558139535
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "2e3dc385-b6d1-44e1-8a0a-8627fe8c3104",
    "objectives" : {
      "NumberOfConcerns" : 0.9993134225883968,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5509908325402799,
      "MetricsIntensity" : 0.053360868841963394,
      "Density" : 0.9976080956761729
    },
    "euclideanDistance" : 17.067521422543784,
    "generation" : 6,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6082872928176797,
      "LackOfCohesion" : 0.5509908325402799,
      "MetricsIntensity" : 0.0533608688419634,
      "Density" : 3.1523255813953504
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "ff609b0c-f7be-429a-b9fb-ba09974a66b6",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5519342662735506,
      "MetricsIntensity" : 0.053329608643131896,
      "Density" : 0.9979760809567617
    },
    "euclideanDistance" : 17.067613533813294,
    "generation" : 16,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6085035891772503,
      "LackOfCohesion" : 0.5519342662735506,
      "MetricsIntensity" : 0.0533296086431319,
      "Density" : 3.1516560139453804
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "92119105-8738-4882-851a-6f081e98f1f0",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5519342662735504,
      "MetricsIntensity" : 0.053329608643131916,
      "Density" : 0.9979760809567617
    },
    "euclideanDistance" : 17.067613533813294,
    "generation" : 11,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6085035891772503,
      "LackOfCohesion" : 0.5519342662735504,
      "MetricsIntensity" : 0.05332960864313191,
      "Density" : 3.151656013945381
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "2d495f5a-1281-4d97-b233-924c5694062e",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5519342662735506,
      "MetricsIntensity" : 0.053329608643131896,
      "Density" : 0.9979760809567617
    },
    "euclideanDistance" : 17.067613533813294,
    "generation" : 13,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6085035891772503,
      "LackOfCohesion" : 0.5519342662735506,
      "MetricsIntensity" : 0.053329608643131896,
      "Density" : 3.151656013945381
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "1da02f92-c9da-43e6-be2d-a4ba06611c63",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5519342662735505,
      "MetricsIntensity" : 0.0533296086431319,
      "Density" : 0.9979760809567617
    },
    "euclideanDistance" : 17.067613533813294,
    "generation" : 15,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6085035891772501,
      "LackOfCohesion" : 0.5519342662735505,
      "MetricsIntensity" : 0.05332960864313191,
      "Density" : 3.1516560139453804
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "25fb9144-ce59-4d42-8e7f-8b7a74f57f0a",
    "objectives" : {
      "NumberOfConcerns" : 1.0003432887058015,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5519161108632381,
      "MetricsIntensity" : 0.05332432351021082,
      "Density" : 0.9981600735970562
    },
    "euclideanDistance" : 17.067643806474585,
    "generation" : 7,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.609055770292656,
      "LackOfCohesion" : 0.5519161108632381,
      "MetricsIntensity" : 0.05332432351021081,
      "Density" : 3.1522370714700756
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "a07ee31e-78ef-4d12-84c1-e13ce0372445",
    "objectives" : {
      "NumberOfConcerns" : 1.0003432887058015,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5519161108632382,
      "MetricsIntensity" : 0.05332432351021081,
      "Density" : 0.9981600735970562
    },
    "euclideanDistance" : 17.067643806474585,
    "generation" : 0,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.609055770292656,
      "LackOfCohesion" : 0.5519161108632382,
      "MetricsIntensity" : 0.05332432351021081,
      "Density" : 3.1522370714700756
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    } ]
  }, {
    "solutionId" : "ba2a5a0d-36e3-4498-bb91-754380a725f3",
    "objectives" : {
      "NumberOfConcerns" : 1.0003432887058015,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5519161108632384,
      "MetricsIntensity" : 0.05332432351021079,
      "Density" : 0.9981600735970562
    },
    "euclideanDistance" : 17.067643806474585,
    "generation" : 12,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.609055770292656,
      "LackOfCohesion" : 0.5519161108632384,
      "MetricsIntensity" : 0.0533243235102108,
      "Density" : 3.1522370714700756
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "9a195779-7c10-404c-ae13-c1030d42f49e",
    "objectives" : {
      "NumberOfConcerns" : 0.9979402677651905,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5500607072852519,
      "MetricsIntensity" : 0.053400183957040374,
      "Density" : 0.996688132474701
    },
    "euclideanDistance" : 18.06362893697689,
    "generation" : 13,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6069651741293531,
      "LackOfCohesion" : 0.5500607072852519,
      "MetricsIntensity" : 0.053400183957040374,
      "Density" : 3.1530849825378353
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "c97e0bb9-2e39-43f0-b277-5e4b81e0f653",
    "objectives" : {
      "NumberOfConcerns" : 0.9979402677651905,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5500607072852526,
      "MetricsIntensity" : 0.05340018395704035,
      "Density" : 0.996688132474701
    },
    "euclideanDistance" : 18.06362893697689,
    "generation" : 12,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6069651741293538,
      "LackOfCohesion" : 0.5500607072852526,
      "MetricsIntensity" : 0.053400183957040354,
      "Density" : 3.1530849825378353
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "b21caaf4-4c33-420b-bff5-1374956a398b",
    "objectives" : {
      "NumberOfConcerns" : 0.9979402677651905,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5500607072852526,
      "MetricsIntensity" : 0.05340018395704035,
      "Density" : 0.996688132474701
    },
    "euclideanDistance" : 18.06362893697689,
    "generation" : 12,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6069651741293531,
      "LackOfCohesion" : 0.5500607072852526,
      "MetricsIntensity" : 0.05340018395704035,
      "Density" : 3.1530849825378353
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "6c0119cb-bc7c-4aec-b2f4-808e305f1098",
    "objectives" : {
      "NumberOfConcerns" : 0.9979402677651905,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5500607072852524,
      "MetricsIntensity" : 0.05340018395704037,
      "Density" : 0.996688132474701
    },
    "euclideanDistance" : 18.06362893697689,
    "generation" : 6,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6069651741293531,
      "LackOfCohesion" : 0.5500607072852524,
      "MetricsIntensity" : 0.053400183957040374,
      "Density" : 3.1530849825378353
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "7f53f8d2-4010-4129-aa29-acc9ea4e9a17",
    "objectives" : {
      "NumberOfConcerns" : 0.9979402677651905,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5500607072852525,
      "MetricsIntensity" : 0.05340018395704036,
      "Density" : 0.996688132474701
    },
    "euclideanDistance" : 18.06362893697689,
    "generation" : 11,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6069651741293531,
      "LackOfCohesion" : 0.5500607072852525,
      "MetricsIntensity" : 0.053400183957040354,
      "Density" : 3.1530849825378353
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "9376bf85-31e8-4310-9d5c-5717afccd9cd",
    "objectives" : {
      "NumberOfConcerns" : 0.9979402677651905,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5500607072852525,
      "MetricsIntensity" : 0.05340018395704036,
      "Density" : 0.996688132474701
    },
    "euclideanDistance" : 18.06362893697689,
    "generation" : 10,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6069651741293531,
      "LackOfCohesion" : 0.5500607072852525,
      "MetricsIntensity" : 0.053400183957040354,
      "Density" : 3.1530849825378353
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "b4545082-756a-4efd-94cf-1bfb0a20a99c",
    "objectives" : {
      "NumberOfConcerns" : 0.9979402677651905,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5500607072852524,
      "MetricsIntensity" : 0.05340018395704037,
      "Density" : 0.996688132474701
    },
    "euclideanDistance" : 18.06362893697689,
    "generation" : 12,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6069651741293531,
      "LackOfCohesion" : 0.5500607072852524,
      "MetricsIntensity" : 0.05340018395704037,
      "Density" : 3.1530849825378353
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "bda97d4b-8189-46c5-9c6e-2c0ac296935f",
    "objectives" : {
      "NumberOfConcerns" : 0.9979402677651905,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5500607072852526,
      "MetricsIntensity" : 0.05340018395704035,
      "Density" : 0.996688132474701
    },
    "euclideanDistance" : 18.06362893697689,
    "generation" : 11,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.606965174129354,
      "LackOfCohesion" : 0.5500607072852526,
      "MetricsIntensity" : 0.053400183957040354,
      "Density" : 3.1530849825378353
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "45981d2e-3167-4edb-bc5d-e3d078d656f6",
    "objectives" : {
      "NumberOfConcerns" : 0.9989701338825953,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5509871990834091,
      "MetricsIntensity" : 0.05336358901086865,
      "Density" : 0.9972401103955841
    },
    "euclideanDistance" : 18.063744454911806,
    "generation" : 13,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6077348066298343,
      "LackOfCohesion" : 0.5509871990834091,
      "MetricsIntensity" : 0.05336358901086866,
      "Density" : 3.1529959278650375
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.matchers(ServerWebExchangeMatcher...), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "a463ff5d-d594-4ad7-b041-5b17091a0f9d",
    "objectives" : {
      "NumberOfConcerns" : 0.9975969790593889,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5504573125654363,
      "MetricsIntensity" : 0.053440509124963786,
      "Density" : 0.996688132474701
    },
    "euclideanDistance" : 19.060284523244047,
    "generation" : 17,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6073008849557513,
      "LackOfCohesion" : 0.5504573125654363,
      "MetricsIntensity" : 0.053440509124963786,
      "Density" : 3.1530849825378353
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "baf7d859-d948-4e7f-b572-e5fd677f809b",
    "objectives" : {
      "NumberOfConcerns" : 0.9975969790593889,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5504573125654362,
      "MetricsIntensity" : 0.05344050912496381,
      "Density" : 0.996688132474701
    },
    "euclideanDistance" : 19.060284523244047,
    "generation" : 18,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6073008849557526,
      "LackOfCohesion" : 0.5504573125654362,
      "MetricsIntensity" : 0.05344050912496381,
      "Density" : 3.1530849825378353
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "10814a9e-c9c1-47e0-bc3a-b59e34d33f28",
    "objectives" : {
      "NumberOfConcerns" : 0.9975969790593889,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5507871233262394,
      "MetricsIntensity" : 0.053438710007251096,
      "Density" : 0.9965041398344067
    },
    "euclideanDistance" : 20.057279037403973,
    "generation" : 11,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6073008849557524,
      "LackOfCohesion" : 0.5507871233262394,
      "MetricsIntensity" : 0.0534387100072511,
      "Density" : 3.154338963308097
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "d9880d7d-ce24-43da-8e8b-9316a35b1610",
    "objectives" : {
      "NumberOfConcerns" : 0.9975969790593889,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5507871233262392,
      "MetricsIntensity" : 0.0534387100072511,
      "Density" : 0.9965041398344067
    },
    "euclideanDistance" : 20.057279037403973,
    "generation" : 11,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6073008849557526,
      "LackOfCohesion" : 0.5507871233262392,
      "MetricsIntensity" : 0.05343871000725111,
      "Density" : 3.1543389633080956
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "e43863f8-1b84-47ba-b3d4-d34ee93760cb",
    "objectives" : {
      "NumberOfConcerns" : 0.9975969790593889,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.550787123326239,
      "MetricsIntensity" : 0.05343871000725113,
      "Density" : 0.9965041398344067
    },
    "euclideanDistance" : 20.057279037403973,
    "generation" : 10,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6073008849557526,
      "LackOfCohesion" : 0.550787123326239,
      "MetricsIntensity" : 0.053438710007251124,
      "Density" : 3.154338963308096
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "a4e33024-1b31-4469-b0bd-ddc40a9935f6",
    "objectives" : {
      "NumberOfConcerns" : 0.9975969790593889,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5507871233262392,
      "MetricsIntensity" : 0.0534387100072511,
      "Density" : 0.9965041398344067
    },
    "euclideanDistance" : 20.057279037403973,
    "generation" : 9,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6073008849557526,
      "LackOfCohesion" : 0.5507871233262392,
      "MetricsIntensity" : 0.05343871000725111,
      "Density" : 3.1543389633080965
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "bed98ce2-117a-49e7-929e-75b2161ab13b",
    "objectives" : {
      "NumberOfConcerns" : 0.9972536903535874,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.551184464531273,
      "MetricsIntensity" : 0.05347908684700823,
      "Density" : 0.9965041398344067
    },
    "euclideanDistance" : 21.05455294586664,
    "generation" : 11,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6076369673491975,
      "LackOfCohesion" : 0.551184464531273,
      "MetricsIntensity" : 0.05347908684700823,
      "Density" : 3.1543389633080956
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "e0dcd877-87ba-464a-b61c-6c2d10f2208b",
    "objectives" : {
      "NumberOfConcerns" : 0.9972536903535874,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5511844645312733,
      "MetricsIntensity" : 0.053479086847008195,
      "Density" : 0.9965041398344067
    },
    "euclideanDistance" : 21.05455294586664,
    "generation" : 4,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6076369673491986,
      "LackOfCohesion" : 0.5511844645312733,
      "MetricsIntensity" : 0.053479086847008195,
      "Density" : 3.1543389633080956
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "951819b0-314f-435e-8330-4a32164d0052",
    "objectives" : {
      "NumberOfConcerns" : 0.9972536903535874,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5511844645312732,
      "MetricsIntensity" : 0.0534790868470082,
      "Density" : 0.9965041398344067
    },
    "euclideanDistance" : 21.05455294586664,
    "generation" : 15,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6076369673491975,
      "LackOfCohesion" : 0.5511844645312732,
      "MetricsIntensity" : 0.0534790868470082,
      "Density" : 3.154338963308097
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "08307901-63aa-4b3d-b486-501004191437",
    "objectives" : {
      "NumberOfConcerns" : 0.9972536903535874,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5511844645312729,
      "MetricsIntensity" : 0.053479086847008236,
      "Density" : 0.9965041398344067
    },
    "euclideanDistance" : 21.05455294586664,
    "generation" : 11,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6076369673491977,
      "LackOfCohesion" : 0.5511844645312729,
      "MetricsIntensity" : 0.05347908684700823,
      "Density" : 3.1543389633080956
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "1b85e3cb-3d7c-4dd5-863e-fe60d3bd3210",
    "objectives" : {
      "NumberOfConcerns" : 0.9972536903535874,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5511844645312732,
      "MetricsIntensity" : 0.0534790868470082,
      "Density" : 0.9965041398344067
    },
    "euclideanDistance" : 21.05455294586664,
    "generation" : 14,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6076369673491975,
      "LackOfCohesion" : 0.5511844645312732,
      "MetricsIntensity" : 0.0534790868470082,
      "Density" : 3.1543389633080956
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "06862e8c-c455-46b9-9749-9be778e1a2da",
    "objectives" : {
      "NumberOfConcerns" : 0.9972536903535874,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5503881864648761,
      "MetricsIntensity" : 0.0534458725324846,
      "Density" : 0.9963201471941122
    },
    "euclideanDistance" : 25.045817063448332,
    "generation" : 5,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6067477876106195,
      "LackOfCohesion" : 0.5503881864648761,
      "MetricsIntensity" : 0.0534458725324846,
      "Density" : 3.153756552125802
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "80cfa2ce-c5bb-4b18-b3c5-81f3bcbb0f20",
    "objectives" : {
      "NumberOfConcerns" : 0.9972536903535874,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5503881864648761,
      "MetricsIntensity" : 0.0534458725324846,
      "Density" : 0.9963201471941122
    },
    "euclideanDistance" : 25.045817063448332,
    "generation" : 11,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6067477876106198,
      "LackOfCohesion" : 0.5503881864648761,
      "MetricsIntensity" : 0.0534458725324846,
      "Density" : 3.1537565521258015
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "8a84a4ae-ec65-4222-a69c-0db128c95c7e",
    "objectives" : {
      "NumberOfConcerns" : 0.9972536903535874,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.550388186464876,
      "MetricsIntensity" : 0.053445872532484624,
      "Density" : 0.9963201471941122
    },
    "euclideanDistance" : 25.045817063448332,
    "generation" : 10,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6067477876106195,
      "LackOfCohesion" : 0.550388186464876,
      "MetricsIntensity" : 0.053445872532484624,
      "Density" : 3.1537565521258015
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "39a8a259-8982-4219-9227-c2faa0e57890",
    "objectives" : {
      "NumberOfConcerns" : 0.9972536903535874,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5503881864648762,
      "MetricsIntensity" : 0.053445872532484576,
      "Density" : 0.9963201471941122
    },
    "euclideanDistance" : 25.045817063448332,
    "generation" : 11,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6067477876106198,
      "LackOfCohesion" : 0.5503881864648762,
      "MetricsIntensity" : 0.053445872532484576,
      "Density" : 3.1537565521258024
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "928d13ef-f4be-4914-aeb5-07785af432a7",
    "objectives" : {
      "NumberOfConcerns" : 0.9972536903535874,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5503881864648761,
      "MetricsIntensity" : 0.0534458725324846,
      "Density" : 0.9963201471941122
    },
    "euclideanDistance" : 25.045817063448332,
    "generation" : 13,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6067477876106195,
      "LackOfCohesion" : 0.5503881864648761,
      "MetricsIntensity" : 0.0534458725324846,
      "Density" : 3.153756552125801
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "e1f029aa-978c-4cfc-be3c-310a3461eb76",
    "objectives" : {
      "NumberOfConcerns" : 0.9969104016477858,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5507852662433953,
      "MetricsIntensity" : 0.05348625406590175,
      "Density" : 0.9963201471941122
    },
    "euclideanDistance" : 26.044053243946173,
    "generation" : 10,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6070835639180967,
      "LackOfCohesion" : 0.5507852662433953,
      "MetricsIntensity" : 0.05348625406590175,
      "Density" : 3.1537565521258024
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "53117b05-f527-4c2f-a663-121ffb1fd149",
    "objectives" : {
      "NumberOfConcerns" : 0.9969104016477858,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5507852662433955,
      "MetricsIntensity" : 0.053486254065901705,
      "Density" : 0.9963201471941122
    },
    "euclideanDistance" : 26.044053243946173,
    "generation" : 10,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6070835639180965,
      "LackOfCohesion" : 0.5507852662433955,
      "MetricsIntensity" : 0.05348625406590171,
      "Density" : 3.153756552125802
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "35a0805f-5156-4359-92ad-15d4277d8b2d",
    "objectives" : {
      "NumberOfConcerns" : 0.9969104016477858,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5507852662433956,
      "MetricsIntensity" : 0.05348625406590169,
      "Density" : 0.9963201471941122
    },
    "euclideanDistance" : 26.044053243946173,
    "generation" : 12,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6070835639180965,
      "LackOfCohesion" : 0.5507852662433956,
      "MetricsIntensity" : 0.0534862540659017,
      "Density" : 3.1537565521258015
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "3a1a5141-3af0-4878-a994-3b1d56d4b71a",
    "objectives" : {
      "NumberOfConcerns" : 0.9969104016477858,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5507852662433954,
      "MetricsIntensity" : 0.05348625406590174,
      "Density" : 0.9963201471941122
    },
    "euclideanDistance" : 26.044053243946173,
    "generation" : 9,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6070835639180965,
      "LackOfCohesion" : 0.5507852662433954,
      "MetricsIntensity" : 0.053486254065901746,
      "Density" : 3.1537565521258015
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "d4f84e3b-fd91-4ea7-b786-47633415f78d",
    "objectives" : {
      "NumberOfConcerns" : 0.9969104016477858,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5511152931318266,
      "MetricsIntensity" : 0.053484453769212834,
      "Density" : 0.9961361545538179
    },
    "euclideanDistance" : 27.042424193116297,
    "generation" : 10,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6070835639180965,
      "LackOfCohesion" : 0.5511152931318266,
      "MetricsIntensity" : 0.05348445376921284,
      "Density" : 3.1550116550116547
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "2671a5d3-84c3-4b80-8132-ddd10ef710c3",
    "objectives" : {
      "NumberOfConcerns" : 0.9969104016477858,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5511152931318265,
      "MetricsIntensity" : 0.053484453769212854,
      "Density" : 0.9961361545538179
    },
    "euclideanDistance" : 27.042424193116297,
    "generation" : 10,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6070835639180967,
      "LackOfCohesion" : 0.5511152931318265,
      "MetricsIntensity" : 0.05348445376921286,
      "Density" : 3.1550116550116547
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "49520316-5b69-4966-9ae5-4089e1d3646d",
    "objectives" : {
      "NumberOfConcerns" : 0.9965671129419842,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5515131100817854,
      "MetricsIntensity" : 0.05352488708149565,
      "Density" : 0.9961361545538179
    },
    "euclideanDistance" : 28.040906990914827,
    "generation" : 8,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6074197120708746,
      "LackOfCohesion" : 0.5515131100817854,
      "MetricsIntensity" : 0.05352488708149565,
      "Density" : 3.1550116550116547
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "211c7154-762d-4d55-b12f-409d6a72c4c1",
    "objectives" : {
      "NumberOfConcerns" : 0.9965671129419842,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5515131100817856,
      "MetricsIntensity" : 0.053524887081495644,
      "Density" : 0.9961361545538179
    },
    "euclideanDistance" : 28.040906990914827,
    "generation" : 9,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6074197120708746,
      "LackOfCohesion" : 0.5515131100817856,
      "MetricsIntensity" : 0.053524887081495644,
      "Density" : 3.1550116550116547
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.RegisteredMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setRequestMatcher(RequestMatcher)', targetType='org.springframework.security.access.event.AuthorizedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.and()', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwtAuthenticationConverter(Converter<Jwt,? extends Mono<? extends AbstractAuthenticationToken>>)', targetType='org.springframework.gradle.github.milestones.GitHubMilestonePlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.publicKey(RSAPublicKey)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.server.authentication.DelegatingServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration.ContextAwareServerHttpSecurity'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.http.HttpFirewallBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.access.event.AuthorizationFailureEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttributeRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    } ]
  } ]
}