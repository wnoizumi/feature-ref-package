{
  "executionId" : "864dda84-a27c-423f-ba4f-fcd72903ad94",
  "computingTime" : 661465,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2359813084112146,
    "meanNumConcerns" : 1.6459833795013852,
    "meanMetricsIntensity" : 0.053565974990151706,
    "meanLackOfCohesion" : 0.5516677364702989
  },
  "population" : [ {
    "solutionId" : "8519e83f-c003-4b54-a2e0-e2d67ec89441",
    "objectives" : {
      "NumberOfConcerns" : 1.0016829350387075,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.554163015099826,
      "MetricsIntensity" : 0.05325074271520939,
      "Density" : 0.998014440433213
    },
    "euclideanDistance" : 10.114807650893082,
    "generation" : 17,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6432909994478186,
      "LackOfCohesion" : 0.554163015099826,
      "MetricsIntensity" : 0.05325074271520939,
      "Density" : 3.222027972027972
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "5c29b3bc-341d-4048-824e-f44a2383b190",
    "objectives" : {
      "NumberOfConcerns" : 1.002692696061932,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5533510149115015,
      "MetricsIntensity" : 0.05325737989958843,
      "Density" : 0.9985559566787003
    },
    "euclideanDistance" : 10.114916724104644,
    "generation" : 42,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.644039735099338,
      "LackOfCohesion" : 0.5533510149115015,
      "MetricsIntensity" : 0.05325737989958843,
      "Density" : 3.221898660454281
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "33649f23-ff90-42e1-aabe-3ea01fd7b515",
    "objectives" : {
      "NumberOfConcerns" : 1.002692696061932,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5542245890967205,
      "MetricsIntensity" : 0.05314696394907105,
      "Density" : 0.9983754512635379
    },
    "euclideanDistance" : 10.114946153062707,
    "generation" : 26,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6431329288472143,
      "LackOfCohesion" : 0.5542245890967205,
      "MetricsIntensity" : 0.05314696394907105,
      "Density" : 3.2194412107101273
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "64e6eb1c-a217-475d-9101-b52ea71b5edc",
    "objectives" : {
      "NumberOfConcerns" : 1.0023561090541906,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5545457677963264,
      "MetricsIntensity" : 0.05318606231023676,
      "Density" : 0.9985559566787003
    },
    "euclideanDistance" : 10.11494841972917,
    "generation" : 36,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.643487858719647,
      "LackOfCohesion" : 0.5545457677963264,
      "MetricsIntensity" : 0.05318606231023676,
      "Density" : 3.221898660454281
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "af621bfb-21d7-4c5f-afdd-f1cda94b1f26",
    "objectives" : {
      "NumberOfConcerns" : 1.0030292830696734,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5538215706617174,
      "MetricsIntensity" : 0.053232427891499914,
      "Density" : 0.9987364620938628
    },
    "euclideanDistance" : 10.114993538649468,
    "generation" : 37,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6436845008273577,
      "LackOfCohesion" : 0.5538215706617174,
      "MetricsIntensity" : 0.05323242789149992,
      "Density" : 3.222481071636575
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "84ae0c13-ec10-472d-8765-6d63ce1c45cd",
    "objectives" : {
      "NumberOfConcerns" : 1.003365870077415,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5543359885819802,
      "MetricsIntensity" : 0.05311319138705183,
      "Density" : 0.9989169675090253
    },
    "euclideanDistance" : 10.115072297148949,
    "generation" : 23,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6433296582138914,
      "LackOfCohesion" : 0.5543359885819802,
      "MetricsIntensity" : 0.05311319138705183,
      "Density" : 3.219313554392089
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "744fa04c-ac0c-44ec-9a33-9787ad948e14",
    "objectives" : {
      "NumberOfConcerns" : 1.0037024570851565,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.554805288735605,
      "MetricsIntensity" : 0.053088365906035495,
      "Density" : 0.9990974729241877
    },
    "euclideanDistance" : 10.115149117327231,
    "generation" : 19,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6429752066115701,
      "LackOfCohesion" : 0.554805288735605,
      "MetricsIntensity" : 0.053088365906035495,
      "Density" : 3.219895287958115
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "ed966ab7-2c58-4ac2-b04e-3f810b214c06",
    "objectives" : {
      "NumberOfConcerns" : 1.004039044092898,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5536989055084979,
      "MetricsIntensity" : 0.05319863339276515,
      "Density" : 0.9996389891696751
    },
    "euclideanDistance" : 10.115175978859059,
    "generation" : 24,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6444321940463067,
      "LackOfCohesion" : 0.5536989055084979,
      "MetricsIntensity" : 0.05319863339276515,
      "Density" : 3.223515715948777
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "cdb53e0b-36ef-4b2c-be00-1dad4ee00bfc",
    "objectives" : {
      "NumberOfConcerns" : 1.004039044092898,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5545711139577536,
      "MetricsIntensity" : 0.05308839969675094,
      "Density" : 0.9994584837545126
    },
    "euclideanDistance" : 10.115205344501444,
    "generation" : 36,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6435261707988977,
      "LackOfCohesion" : 0.5545711139577536,
      "MetricsIntensity" : 0.05308839969675094,
      "Density" : 3.2210587550901684
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "fa32a51f-1f62-4e3f-b628-0d7ae436b019",
    "objectives" : {
      "NumberOfConcerns" : 1.000673174015483,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5532746325066932,
      "MetricsIntensity" : 0.05335608237880584,
      "Density" : 0.9972924187725631
    },
    "euclideanDistance" : 11.104273891625589,
    "generation" : 43,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6425414364640878,
      "LackOfCohesion" : 0.5532746325066932,
      "MetricsIntensity" : 0.05335608237880584,
      "Density" : 3.221574344023323
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "87a9e1aa-a15c-4b68-9daa-85a06e0aa6f0",
    "objectives" : {
      "NumberOfConcerns" : 1.001346348030966,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.553413562119981,
      "MetricsIntensity" : 0.05323807657959612,
      "Density" : 0.997653429602888
    },
    "euclideanDistance" : 11.10437336088127,
    "generation" : 45,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6427388183324136,
      "LackOfCohesion" : 0.553413562119981,
      "MetricsIntensity" : 0.05323807657959612,
      "Density" : 3.2208624708624707
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "10440ebf-f7fb-492a-abc2-92b345368570",
    "objectives" : {
      "NumberOfConcerns" : 1.0023561090541906,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5551128373040344,
      "MetricsIntensity" : 0.05312210024363002,
      "Density" : 0.9983754512635379
    },
    "euclideanDistance" : 11.104613614652154,
    "generation" : 39,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6416758544652703,
      "LackOfCohesion" : 0.5551128373040344,
      "MetricsIntensity" : 0.05312210024363002,
      "Density" : 3.2194412107101273
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "35478f06-cbe0-4ebd-8a9b-d1ea86e96cd6",
    "objectives" : {
      "NumberOfConcerns" : 1.0030292830696734,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5543784408749217,
      "MetricsIntensity" : 0.05311473368517012,
      "Density" : 0.9989169675090253
    },
    "euclideanDistance" : 11.104686374739002,
    "generation" : 42,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6427783902976842,
      "LackOfCohesion" : 0.5543784408749217,
      "MetricsIntensity" : 0.05311473368517012,
      "Density" : 3.221187427240978
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "b9877b13-7399-4c13-822b-6eefee650e39",
    "objectives" : {
      "NumberOfConcerns" : 0.999326825984517,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5537406233503819,
      "MetricsIntensity" : 0.05326598515325396,
      "Density" : 0.9963898916967509
    },
    "euclideanDistance" : 12.095491427161221,
    "generation" : 33,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.640331491712707,
      "LackOfCohesion" : 0.5537406233503819,
      "MetricsIntensity" : 0.05326598515325397,
      "Density" : 3.218658892128279
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "de7e4460-b308-425f-868b-1431c547855f",
    "objectives" : {
      "NumberOfConcerns" : 0.9983170649612925,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5537269978871161,
      "MetricsIntensity" : 0.053260696563738406,
      "Density" : 0.9954873646209387
    },
    "euclideanDistance" : 13.088051128617293,
    "generation" : 25,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6386740331491707,
      "LackOfCohesion" : 0.5537269978871161,
      "MetricsIntensity" : 0.05326069656373841,
      "Density" : 3.2157434402332363
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "a273507f-bbd9-463f-a1ed-9cf832e5c1e3",
    "objectives" : {
      "NumberOfConcerns" : 0.9989902389767755,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5532354941112987,
      "MetricsIntensity" : 0.05330655980703152,
      "Density" : 0.9962093862815884
    },
    "euclideanDistance" : 13.088136832267205,
    "generation" : 38,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.639779005524862,
      "LackOfCohesion" : 0.5532354941112987,
      "MetricsIntensity" : 0.053306559807031514,
      "Density" : 3.2180758017492708
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "3b651d04-9f5e-4a68-82b8-40167a0dddb3",
    "objectives" : {
      "NumberOfConcerns" : 1.000673174015483,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5530832679259232,
      "MetricsIntensity" : 0.05324026227349039,
      "Density" : 0.9974729241877256
    },
    "euclideanDistance" : 13.08835492575245,
    "generation" : 40,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6407284768211918,
      "LackOfCohesion" : 0.5530832679259232,
      "MetricsIntensity" : 0.05324026227349039,
      "Density" : 3.2202797202797204
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "50a10da2-de68-431e-8e74-4e4230b6ce2f",
    "objectives" : {
      "NumberOfConcerns" : 0.9976438909458095,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.553298047585234,
      "MetricsIntensity" : 0.05328726340671687,
      "Density" : 0.9953068592057762
    },
    "euclideanDistance" : 14.0817224563981,
    "generation" : 25,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6384742951907139,
      "LackOfCohesion" : 0.553298047585234,
      "MetricsIntensity" : 0.05328726340671687,
      "Density" : 3.2170361726954484
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "f94e1070-9a81-42c5-a38b-898550c850c3",
    "objectives" : {
      "NumberOfConcerns" : 0.999326825984517,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5542644131469117,
      "MetricsIntensity" : 0.05316366300329663,
      "Density" : 0.9965703971119133
    },
    "euclideanDistance" : 14.081968686099152,
    "generation" : 43,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6385209713024296,
      "LackOfCohesion" : 0.5542644131469117,
      "MetricsIntensity" : 0.05316366300329663,
      "Density" : 3.2173659673659682
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "0b19808e-7daa-4917-b0a9-2e1ac51c40c8",
    "objectives" : {
      "NumberOfConcerns" : 0.9976438909458095,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5539350434791015,
      "MetricsIntensity" : 0.05330885020623596,
      "Density" : 0.9951263537906138
    },
    "euclideanDistance" : 16.07156668340254,
    "generation" : 26,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6384742951907136,
      "LackOfCohesion" : 0.5539350434791015,
      "MetricsIntensity" : 0.053308850206235964,
      "Density" : 3.2183304144775247
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "df635e99-4559-49df-b2c3-c20cfa31f83c",
    "objectives" : {
      "NumberOfConcerns" : 1.0016829350387075,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5534826797875787,
      "MetricsIntensity" : 0.05242488921064863,
      "Density" : 0.998014440433213
    },
    "euclideanDistance" : 16.07197850208538,
    "generation" : 36,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6414782129067842,
      "LackOfCohesion" : 0.5534826797875787,
      "MetricsIntensity" : 0.05242488921064864,
      "Density" : 3.220151426907397
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "865601cb-7c12-4c59-8b79-b8fd222076f8",
    "objectives" : {
      "NumberOfConcerns" : 1.0016829350387075,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5541871702335531,
      "MetricsIntensity" : 0.052399690970212465,
      "Density" : 0.9978339350180505
    },
    "euclideanDistance" : 16.071991488657734,
    "generation" : 28,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6405733186328553,
      "LackOfCohesion" : 0.5541871702335531,
      "MetricsIntensity" : 0.05239969097021247,
      "Density" : 3.2195690157251016
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "3a308c21-13a6-4ca9-baed-c94c96dd2fdb",
    "objectives" : {
      "NumberOfConcerns" : 1.002019522046449,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5539528426998127,
      "MetricsIntensity" : 0.05239972478297015,
      "Density" : 0.9981949458483754
    },
    "euclideanDistance" : 16.072026809197773,
    "generation" : 35,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6411245865490631,
      "LackOfCohesion" : 0.5539528426998127,
      "MetricsIntensity" : 0.05239972478297014,
      "Density" : 3.2207338380896915
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "d1984b4a-60a0-48c9-917e-59d86c8521a2",
    "objectives" : {
      "NumberOfConcerns" : 0.996634129922585,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5539214090986478,
      "MetricsIntensity" : 0.053303558155601616,
      "Density" : 0.9942238267148015
    },
    "euclideanDistance" : 17.067261959766828,
    "generation" : 10,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6368159203980102,
      "LackOfCohesion" : 0.5539214090986478,
      "MetricsIntensity" : 0.05330355815560162,
      "Density" : 3.2154115586690017
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "72dbb5fd-4704-4abe-9856-d655df990627",
    "objectives" : {
      "NumberOfConcerns" : 0.997307303938068,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5543048204683947,
      "MetricsIntensity" : 0.05323875860331029,
      "Density" : 0.9947653429602888
    },
    "euclideanDistance" : 17.06734508192341,
    "generation" : 41,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6370165745856353,
      "LackOfCohesion" : 0.5543048204683947,
      "MetricsIntensity" : 0.05323875860331028,
      "Density" : 3.2152858809801645
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "94bfeb8b-c4bb-40cf-af78-6c9a50bf49ed",
    "objectives" : {
      "NumberOfConcerns" : 0.997980477953551,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5544163859452128,
      "MetricsIntensity" : 0.053204859824075176,
      "Density" : 0.9953068592057762
    },
    "euclideanDistance" : 17.06741951978892,
    "generation" : 42,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6372170071783538,
      "LackOfCohesion" : 0.5544163859452128,
      "MetricsIntensity" : 0.05320485982407518,
      "Density" : 3.215160349854227
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "d275f38e-3740-4b87-a042-8c6e1377ffac",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5532743188619692,
      "MetricsIntensity" : 0.052576038663316886,
      "Density" : 0.9971119133574007
    },
    "euclideanDistance" : 17.067604075543613,
    "generation" : 44,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6405300938707894,
      "LackOfCohesion" : 0.5532743188619692,
      "MetricsIntensity" : 0.052576038663316886,
      "Density" : 3.222870478413069
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "a97a40dc-94aa-433f-acb1-2334140772a1",
    "objectives" : {
      "NumberOfConcerns" : 1.0010097610232245,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5537596402799438,
      "MetricsIntensity" : 0.05242562643397069,
      "Density" : 0.997653429602888
    },
    "euclideanDistance" : 17.067710188914393,
    "generation" : 41,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6403750689464978,
      "LackOfCohesion" : 0.5537596402799438,
      "MetricsIntensity" : 0.05242562643397069,
      "Density" : 3.2208624708624707
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "99e8245e-fb35-4f0a-9454-be7e3d768b87",
    "objectives" : {
      "NumberOfConcerns" : 0.995960955907102,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5534923052020765,
      "MetricsIntensity" : 0.05333017046579346,
      "Density" : 0.994043321299639
    },
    "euclideanDistance" : 18.06347857388802,
    "generation" : 41,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.636615044247788,
      "LackOfCohesion" : 0.5534923052020765,
      "MetricsIntensity" : 0.053330170465793456,
      "Density" : 3.2167056074766363
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "ed281b16-820a-4d39-a186-c8df01fbb2cd",
    "objectives" : {
      "NumberOfConcerns" : 1.0016829350387075,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.554201142506708,
      "MetricsIntensity" : 0.05321740383014962,
      "Density" : 0.9945848375451264
    },
    "euclideanDistance" : 18.063846176820945,
    "generation" : 42,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6423841059602653,
      "LackOfCohesion" : 0.554201142506708,
      "MetricsIntensity" : 0.05321740383014962,
      "Density" : 3.210955710955712
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "ea26af2f-2446-49d5-90cd-93f2df58d4cc",
    "objectives" : {
      "NumberOfConcerns" : 0.9996634129922585,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5540669076260881,
      "MetricsIntensity" : 0.05245897195981025,
      "Density" : 0.9969314079422382
    },
    "euclideanDistance" : 18.063857319334716,
    "generation" : 46,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6390728476821195,
      "LackOfCohesion" : 0.5540669076260881,
      "MetricsIntensity" : 0.05245897195981025,
      "Density" : 3.220408163265307
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "395adaaa-903b-4e3a-beaa-117c9091ac9c",
    "objectives" : {
      "NumberOfConcerns" : 0.997307303938068,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.552198009049093,
      "MetricsIntensity" : 0.05264761894975069,
      "Density" : 0.9956678700361011
    },
    "euclideanDistance" : 19.060264184393912,
    "generation" : 40,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.638827433628319,
      "LackOfCohesion" : 0.552198009049093,
      "MetricsIntensity" : 0.052647618949750695,
      "Density" : 3.221962616822429
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "4a0d509f-4c18-44fc-bac8-536843650b38",
    "objectives" : {
      "NumberOfConcerns" : 0.9983170649612925,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5528663571794976,
      "MetricsIntensity" : 0.052465533869489205,
      "Density" : 0.9958483754512636
    },
    "euclideanDistance" : 19.060345348136455,
    "generation" : 45,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6377691882937606,
      "LackOfCohesion" : 0.5528663571794976,
      "MetricsIntensity" : 0.052465533869489205,
      "Density" : 3.216909620991254
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "7e36abe9-8339-4eb7-9825-6fb5c89c401f",
    "objectives" : {
      "NumberOfConcerns" : 0.998653651969034,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5524628119230113,
      "MetricsIntensity" : 0.05254994964524635,
      "Density" : 0.9962093862815884
    },
    "euclideanDistance" : 19.0603703771378,
    "generation" : 46,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6383213694091665,
      "LackOfCohesion" : 0.5524628119230113,
      "MetricsIntensity" : 0.052549949645246355,
      "Density" : 3.2199533255542594
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "5f28d72b-69e0-4f51-883d-bd56b099b934",
    "objectives" : {
      "NumberOfConcerns" : 1.0023561090541906,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5521851024168013,
      "MetricsIntensity" : 0.053279644472776555,
      "Density" : 0.9994584837545126
    },
    "euclideanDistance" : 19.060728793463102,
    "generation" : 45,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6434878587196475,
      "LackOfCohesion" : 0.5521851024168013,
      "MetricsIntensity" : 0.053279644472776555,
      "Density" : 3.224810716365755
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "484114c1-68e2-4190-b183-324266dc4838",
    "objectives" : {
      "NumberOfConcerns" : 0.9962975429148435,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5530609902822633,
      "MetricsIntensity" : 0.05253240809396025,
      "Density" : 0.9945848375451264
    },
    "euclideanDistance" : 20.057179360666968,
    "generation" : 46,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6362631288004426,
      "LackOfCohesion" : 0.5530609902822633,
      "MetricsIntensity" : 0.05253240809396025,
      "Density" : 3.2165791009924103
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "49b5dc2a-ae59-40b9-9c5b-f642b681b3b2",
    "objectives" : {
      "NumberOfConcerns" : 0.9996634129922585,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5534200697735474,
      "MetricsIntensity" : 0.053223688190771,
      "Density" : 0.9933212996389892
    },
    "euclideanDistance" : 20.0572959463185,
    "generation" : 45,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6399779127553835,
      "LackOfCohesion" : 0.5534200697735474,
      "MetricsIntensity" : 0.053223688190771,
      "Density" : 3.206876456876456
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "eb3ea062-520d-4f58-87df-3c2027e210d8",
    "objectives" : {
      "NumberOfConcerns" : 1.000673174015483,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5542735682579711,
      "MetricsIntensity" : 0.05313413764888366,
      "Density" : 0.994043321299639
    },
    "euclideanDistance" : 20.057405399275048,
    "generation" : 41,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.639823496966354,
      "LackOfCohesion" : 0.5542735682579711,
      "MetricsIntensity" : 0.05313413764888366,
      "Density" : 3.2073383808969127
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "c6db7610-a88d-498a-97cc-c96611580915",
    "objectives" : {
      "NumberOfConcerns" : 0.9976438909458095,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5527391661778177,
      "MetricsIntensity" : 0.0534023546400952,
      "Density" : 0.9922382671480144
    },
    "euclideanDistance" : 21.05441052390787,
    "generation" : 9,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6393805309734515,
      "LackOfCohesion" : 0.5527391661778177,
      "MetricsIntensity" : 0.053402354640095205,
      "Density" : 3.2089900758902514
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "fdf12631-acdc-4ac1-a807-7c875f554e8f",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5538458154879482,
      "MetricsIntensity" : 0.053160569769821746,
      "Density" : 0.9938628158844766
    },
    "euclideanDistance" : 21.054627389966072,
    "generation" : 42,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.63962472406181,
      "LackOfCohesion" : 0.5538458154879482,
      "MetricsIntensity" : 0.053160569769821746,
      "Density" : 3.208624708624708
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "d1c60369-2845-4c6e-b584-ce0afeaac30a",
    "objectives" : {
      "NumberOfConcerns" : 0.9969707169303265,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5523090063527946,
      "MetricsIntensity" : 0.05342904913167284,
      "Density" : 0.992057761732852
    },
    "euclideanDistance" : 22.051894002892823,
    "generation" : 45,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6391809629219705,
      "LackOfCohesion" : 0.5523090063527946,
      "MetricsIntensity" : 0.05342904913167284,
      "Density" : 3.210280373831776
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "3e1482dd-514b-4f6a-938d-196140ccb20d",
    "objectives" : {
      "NumberOfConcerns" : 0.997980477953551,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5531661933979376,
      "MetricsIntensity" : 0.05333899536724011,
      "Density" : 0.9927797833935018
    },
    "euclideanDistance" : 22.051993438658474,
    "generation" : 43,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6390270867882806,
      "LackOfCohesion" : 0.5531661933979376,
      "MetricsIntensity" : 0.05333899536724011,
      "Density" : 3.2107413893753654
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "a911de14-5766-47f6-a7ef-82f41ffa2d0d",
    "objectives" : {
      "NumberOfConcerns" : 0.9962975429148435,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5536979861761311,
      "MetricsIntensity" : 0.052553220625201576,
      "Density" : 0.9944043321299639
    },
    "euclideanDistance" : 22.052001996886144,
    "generation" : 41,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6362631288004417,
      "LackOfCohesion" : 0.5536979861761311,
      "MetricsIntensity" : 0.05255322062520158,
      "Density" : 3.217873831775701
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "f5506cbb-06c9-427c-b9a8-7fc37026423e",
    "objectives" : {
      "NumberOfConcerns" : 0.9989902389767755,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5515666794311208,
      "MetricsIntensity" : 0.05332143377202465,
      "Density" : 0.9972924187725631
    },
    "euclideanDistance" : 22.05220267100931,
    "generation" : 44,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.639779005524862,
      "LackOfCohesion" : 0.5515666794311208,
      "MetricsIntensity" : 0.053321433772024654,
      "Density" : 3.2215743440233235
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "316e8f40-596d-467b-a2a0-0511d906f4dc",
    "objectives" : {
      "NumberOfConcerns" : 0.995287781891619,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5528081354794551,
      "MetricsIntensity" : 0.05265785407810577,
      "Density" : 0.9936823104693141
    },
    "euclideanDistance" : 23.049650148910523,
    "generation" : 43,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6355088495575223,
      "LackOfCohesion" : 0.5528081354794551,
      "MetricsIntensity" : 0.05265785407810577,
      "Density" : 3.2174167153711277
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "05db0737-97f8-4c5f-9103-f59506b6a659",
    "objectives" : {
      "NumberOfConcerns" : 0.995287781891619,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5536843517956771,
      "MetricsIntensity" : 0.05254792857456724,
      "Density" : 0.9935018050541516
    },
    "euclideanDistance" : 23.049663148333632,
    "generation" : 35,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6346047540077389,
      "LackOfCohesion" : 0.5536843517956771,
      "MetricsIntensity" : 0.052547928574567235,
      "Density" : 3.2149532710280377
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "64d2d7e8-be07-4a89-a5da-dfc98a4ae542",
    "objectives" : {
      "NumberOfConcerns" : 0.9969707169303265,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5529468371036659,
      "MetricsIntensity" : 0.05345066422319654,
      "Density" : 0.9918772563176895
    },
    "euclideanDistance" : 24.047585705849677,
    "generation" : 32,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6391809629219707,
      "LackOfCohesion" : 0.5529468371036659,
      "MetricsIntensity" : 0.053450664223196546,
      "Density" : 3.211572180011691
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "4d694b04-52e3-4330-92ba-516767d35c70",
    "objectives" : {
      "NumberOfConcerns" : 1.000673174015483,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.553605802217236,
      "MetricsIntensity" : 0.0524547207890061,
      "Density" : 0.9942238267148015
    },
    "euclideanDistance" : 24.047849357079386,
    "generation" : 29,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.640728476821191,
      "LackOfCohesion" : 0.553605802217236,
      "MetricsIntensity" : 0.0524547207890061,
      "Density" : 3.20979020979021
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "b4045ec4-9ad8-4328-894b-5f25c6fa261f",
    "objectives" : {
      "NumberOfConcerns" : 0.995960955907102,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5529331848537752,
      "MetricsIntensity" : 0.053445365236716016,
      "Density" : 0.9909747292418772
    },
    "euclideanDistance" : 25.045609608345835,
    "generation" : 8,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6375207526286661,
      "LackOfCohesion" : 0.5529331848537752,
      "MetricsIntensity" : 0.053445365236716016,
      "Density" : 3.208649912331969
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "aa76a78d-86ba-42a3-b886-448a34ebad25",
    "objectives" : {
      "NumberOfConcerns" : 0.995960955907102,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5538098930933383,
      "MetricsIntensity" : 0.05333446463322568,
      "Density" : 0.9907942238267148
    },
    "euclideanDistance" : 25.04562160103968,
    "generation" : 33,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6366150442477878,
      "LackOfCohesion" : 0.5538098930933383,
      "MetricsIntensity" : 0.05333446463322567,
      "Density" : 3.206191588785047
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "481712e3-e50d-447d-b803-92c4b2876c8a",
    "objectives" : {
      "NumberOfConcerns" : 0.9962975429148435,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5525165313842828,
      "MetricsIntensity" : 0.053477407897773964,
      "Density" : 0.9916967509025271
    },
    "euclideanDistance" : 25.04564244714791,
    "generation" : 42,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6389811738648956,
      "LackOfCohesion" : 0.5525165313842828,
      "MetricsIntensity" : 0.053477407897773964,
      "Density" : 3.212865497076023
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "b2c80a6b-6438-45c4-a62f-9ac97b8fd6d4",
    "objectives" : {
      "NumberOfConcerns" : 0.996634129922585,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5533177455666685,
      "MetricsIntensity" : 0.05338038794625462,
      "Density" : 0.9915162454873646
    },
    "euclideanDistance" : 25.045666172960306,
    "generation" : 39,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6377212389380533,
      "LackOfCohesion" : 0.5533177455666685,
      "MetricsIntensity" : 0.05338038794625462,
      "Density" : 3.2085280373831786
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "021608c3-4026-4dbb-b705-014cdfcf273a",
    "objectives" : {
      "NumberOfConcerns" : 1.0003365870077414,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.55277378816536,
      "MetricsIntensity" : 0.05256514189829026,
      "Density" : 0.9944043321299639
    },
    "euclideanDistance" : 25.045914541459464,
    "generation" : 22,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.641082274986195,
      "LackOfCohesion" : 0.55277378816536,
      "MetricsIntensity" : 0.05256514189829026,
      "Density" : 3.2141190198366396
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "9bdd3cb3-e8d0-429d-b57b-6517a8669360",
    "objectives" : {
      "NumberOfConcerns" : 1.0010097610232245,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.552654461341155,
      "MetricsIntensity" : 0.05249635395886443,
      "Density" : 0.9985559566787003
    },
    "euclideanDistance" : 25.046103835948248,
    "generation" : 47,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6403750689464978,
      "LackOfCohesion" : 0.552654461341155,
      "MetricsIntensity" : 0.05249635395886443,
      "Density" : 3.2237762237762237
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "0e11abb3-4df6-4fd9-90cf-f9124a9b2be0",
    "objectives" : {
      "NumberOfConcerns" : 1.001346348030966,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5524199808521056,
      "MetricsIntensity" : 0.052496387793693075,
      "Density" : 0.9989169675090253
    },
    "euclideanDistance" : 25.046126513348693,
    "generation" : 34,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6409266409266412,
      "LackOfCohesion" : 0.5524199808521056,
      "MetricsIntensity" : 0.05249638779369308,
      "Density" : 3.2249417249417247
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "fe81a87f-edbc-46e1-9c10-c3fb67795e14",
    "objectives" : {
      "NumberOfConcerns" : 1.0003365870077414,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5522256510225257,
      "MetricsIntensity" : 0.05252236949999191,
      "Density" : 0.9983754512635379
    },
    "euclideanDistance" : 26.044291862094024,
    "generation" : 26,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6401766004415015,
      "LackOfCohesion" : 0.5522256510225257,
      "MetricsIntensity" : 0.052522369499991915,
      "Density" : 3.2250728862973763
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "93a16604-cfe9-47c8-8c00-3065c738ea4d",
    "objectives" : {
      "NumberOfConcerns" : 0.995287781891619,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5519531145807233,
      "MetricsIntensity" : 0.05343247496755025,
      "Density" : 0.9947653429602888
    },
    "euclideanDistance" : 27.042330948466965,
    "generation" : 31,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.636413945766464,
      "LackOfCohesion" : 0.5519531145807233,
      "MetricsIntensity" : 0.05343247496755024,
      "Density" : 3.220923436586791
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "148d5256-bda4-4521-959d-0b17021be228",
    "objectives" : {
      "NumberOfConcerns" : 0.998653651969034,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5515249465628651,
      "MetricsIntensity" : 0.052536387727721026,
      "Density" : 0.9971119133574007
    },
    "euclideanDistance" : 27.04253096740516,
    "generation" : 41,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6383213694091665,
      "LackOfCohesion" : 0.5515249465628651,
      "MetricsIntensity" : 0.052536387727721026,
      "Density" : 3.2209912536443155
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "b8525883-433e-422d-8edf-971a25fb4a0d",
    "objectives" : {
      "NumberOfConcerns" : 0.998653651969034,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5522316360383084,
      "MetricsIntensity" : 0.05251108374267489,
      "Density" : 0.9969314079422382
    },
    "euclideanDistance" : 27.04253868523608,
    "generation" : 38,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.637417218543046,
      "LackOfCohesion" : 0.5522316360383084,
      "MetricsIntensity" : 0.05251108374267489,
      "Density" : 3.2204081632653065
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "5e4bef8a-dab3-44c2-a87d-6acf36230d82",
    "objectives" : {
      "NumberOfConcerns" : 0.9956243688993605,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.552948910806871,
      "MetricsIntensity" : 0.0525624221740559,
      "Density" : 0.9911552346570397
    },
    "euclideanDistance" : 28.04072345517001,
    "generation" : 40,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.636061946902655,
      "LackOfCohesion" : 0.552948910806871,
      "MetricsIntensity" : 0.052562422174055906,
      "Density" : 3.2073598130841137
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "3f5cfb19-f4d7-4b02-856a-dc6d38582462",
    "objectives" : {
      "NumberOfConcerns" : 0.9969707169303265,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5512161186461023,
      "MetricsIntensity" : 0.05259593010575222,
      "Density" : 0.996028880866426
    },
    "euclideanDistance" : 28.040909929659122,
    "generation" : 39,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.637368711995578,
      "LackOfCohesion" : 0.5512161186461023,
      "MetricsIntensity" : 0.05259593010575222,
      "Density" : 3.2212492702860462
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "78bd843f-0d82-431b-9579-9c27003da696",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5517645592283883,
      "MetricsIntensity" : 0.053371030300506196,
      "Density" : 0.9949458483754513
    },
    "euclideanDistance" : 28.040991598673813,
    "generation" : 45,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.642343836373687,
      "LackOfCohesion" : 0.5517645592283883,
      "MetricsIntensity" : 0.05337103030050619,
      "Density" : 3.2158693115519243
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "1bcfe8fc-5243-426c-b27d-5df44c9c1830",
    "objectives" : {
      "NumberOfConcerns" : 0.999326825984517,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.556161832662554,
      "MetricsIntensity" : 0.052457495099481104,
      "Density" : 0.9967509025270758
    },
    "euclideanDistance" : 28.041116850791152,
    "generation" : 36,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6376172090457803,
      "LackOfCohesion" : 0.556161832662554,
      "MetricsIntensity" : 0.052457495099481104,
      "Density" : 3.2179487179487176
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "1ed50f68-3c96-4a19-ba9f-7a9030ee8b71",
    "objectives" : {
      "NumberOfConcerns" : 0.999326825984517,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5561618326625538,
      "MetricsIntensity" : 0.05245749509948112,
      "Density" : 0.9967509025270758
    },
    "euclideanDistance" : 28.041116850791152,
    "generation" : 39,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6376172090457801,
      "LackOfCohesion" : 0.5561618326625538,
      "MetricsIntensity" : 0.05245749509948112,
      "Density" : 3.2179487179487176
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "ee73e85f-ba07-4dc1-9c45-5b5c8e653774",
    "objectives" : {
      "NumberOfConcerns" : 0.993941433860653,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5544673783967666,
      "MetricsIntensity" : 0.052572351948718295,
      "Density" : 0.9927797833935018
    },
    "euclideanDistance" : 29.039347947193228,
    "generation" : 19,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6323935876174673,
      "LackOfCohesion" : 0.5544673783967666,
      "MetricsIntensity" : 0.052572351948718295,
      "Density" : 3.212616822429905
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "4848a46f-8873-4869-ae12-59774ab134b3",
    "objectives" : {
      "NumberOfConcerns" : 0.9969707169303265,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5520773256233185,
      "MetricsIntensity" : 0.053393766979926274,
      "Density" : 0.9927797833935018
    },
    "euclideanDistance" : 30.038095854706757,
    "generation" : 45,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6382743362831862,
      "LackOfCohesion" : 0.5520773256233185,
      "MetricsIntensity" : 0.05339376697992628,
      "Density" : 3.2107413893753654
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "17d369ec-ef4b-4d45-a266-8c91ada53956",
    "objectives" : {
      "NumberOfConcerns" : 0.9976438909458095,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5513400435500834,
      "MetricsIntensity" : 0.05338637147624651,
      "Density" : 0.9933212996389892
    },
    "euclideanDistance" : 30.038122552612027,
    "generation" : 46,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6393805309734515,
      "LackOfCohesion" : 0.5513400435500834,
      "MetricsIntensity" : 0.05338637147624651,
      "Density" : 3.212492702860478
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "9777ae76-1912-426b-99f9-25ffe3b1b3e9",
    "objectives" : {
      "NumberOfConcerns" : 0.994614607876136,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5526958168597128,
      "MetricsIntensity" : 0.052687970032424425,
      "Density" : 0.9902527075812274
    },
    "euclideanDistance" : 31.0367219166463,
    "generation" : 4,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6353071389042617,
      "LackOfCohesion" : 0.5526958168597128,
      "MetricsIntensity" : 0.052687970032424425,
      "Density" : 3.2081871345029245
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "a0ee493c-e6f3-4514-8029-5f1d0d42e5b6",
    "objectives" : {
      "NumberOfConcerns" : 0.9962975429148435,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5516467320888887,
      "MetricsIntensity" : 0.05342045584394154,
      "Density" : 0.9925992779783394
    },
    "euclideanDistance" : 31.03683344000783,
    "generation" : 42,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6380741560597676,
      "LackOfCohesion" : 0.5516467320888887,
      "MetricsIntensity" : 0.05342045584394155,
      "Density" : 3.2120327102803734
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "49e7d6f0-a1b0-4f9e-aca7-07dda93c5c1b",
    "objectives" : {
      "NumberOfConcerns" : 0.9956243688993605,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.556050061637712,
      "MetricsIntensity" : 0.05250559726214794,
      "Density" : 0.9944043321299639
    },
    "euclideanDistance" : 31.036946634108457,
    "generation" : 35,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6333517393705133,
      "LackOfCohesion" : 0.556050061637712,
      "MetricsIntensity" : 0.05250559726214795,
      "Density" : 3.2141190198366396
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "e8221e18-78ea-4fea-a36d-a51c82b76ffe",
    "objectives" : {
      "NumberOfConcerns" : 0.9969707169303265,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5524248157568519,
      "MetricsIntensity" : 0.052552626107130754,
      "Density" : 0.9956678700361011
    },
    "euclideanDistance" : 31.036965703390106,
    "generation" : 34,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.635560463832137,
      "LackOfCohesion" : 0.5524248157568519,
      "MetricsIntensity" : 0.05255262610713076,
      "Density" : 3.220081727962639
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "06dce9d8-942a-48d9-a0c1-e0922629b303",
    "objectives" : {
      "NumberOfConcerns" : 0.993941433860653,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5531430669301606,
      "MetricsIntensity" : 0.0526041070731705,
      "Density" : 0.9898916967509025
    },
    "euclideanDistance" : 32.03555118286269,
    "generation" : 39,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6342003320420588,
      "LackOfCohesion" : 0.5531430669301606,
      "MetricsIntensity" : 0.05260410707317051,
      "Density" : 3.2070175438596493
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "2a21ae83-0688-4850-b2db-5d3e2eb03520",
    "objectives" : {
      "NumberOfConcerns" : 0.9969707169303265,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.553965325386309,
      "MetricsIntensity" : 0.05249382443707588,
      "Density" : 0.9918772563176895
    },
    "euclideanDistance" : 32.03572075489095,
    "generation" : 42,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6355604638321375,
      "LackOfCohesion" : 0.553965325386309,
      "MetricsIntensity" : 0.05249382443707588,
      "Density" : 3.2040816326530615
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "87b9ff7c-e4c0-40f2-aaae-47d065a47dac",
    "objectives" : {
      "NumberOfConcerns" : 0.993941433860653,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5517157465866608,
      "MetricsIntensity" : 0.05267120334802792,
      "Density" : 0.994043321299639
    },
    "euclideanDistance" : 33.03457592007591,
    "generation" : 42,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6342003320420582,
      "LackOfCohesion" : 0.5517157465866608,
      "MetricsIntensity" : 0.05267120334802791,
      "Density" : 3.22046783625731
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "ce131bff-9b27-4c55-b768-eeae71a45b02",
    "objectives" : {
      "NumberOfConcerns" : 1.000673174015483,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5523077755167991,
      "MetricsIntensity" : 0.05252629992955577,
      "Density" : 0.9954873646209387
    },
    "euclideanDistance" : 33.0348322954029,
    "generation" : 42,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6407284768211923,
      "LackOfCohesion" : 0.5523077755167991,
      "MetricsIntensity" : 0.05252629992955577,
      "Density" : 3.215743440233236
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "9b833a59-3f5a-427f-8f6d-594dce886e4f",
    "objectives" : {
      "NumberOfConcerns" : 0.9942780208683945,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5537324501955183,
      "MetricsIntensity" : 0.0525868615425581,
      "Density" : 0.9904332129963899
    },
    "euclideanDistance" : 34.03349720108991,
    "generation" : 41,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6338495575221241,
      "LackOfCohesion" : 0.5537324501955183,
      "MetricsIntensity" : 0.0525868615425581,
      "Density" : 3.205023364485981
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "9ef16d41-cb16-4bef-bcd9-ceadb6800eef",
    "objectives" : {
      "NumberOfConcerns" : 0.995287781891619,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5559367718773636,
      "MetricsIntensity" : 0.05251371645185282,
      "Density" : 0.9938628158844766
    },
    "euclideanDistance" : 34.033662518899156,
    "generation" : 34,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6327995582551071,
      "LackOfCohesion" : 0.5559367718773636,
      "MetricsIntensity" : 0.052513716451852814,
      "Density" : 3.2142440163455928
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "7eee46d8-85e9-453e-9c3f-db32e7888baa",
    "objectives" : {
      "NumberOfConcerns" : 0.9996634129922585,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5521132453374382,
      "MetricsIntensity" : 0.05255231816777762,
      "Density" : 0.9949458483754513
    },
    "euclideanDistance" : 34.033760223670505,
    "generation" : 21,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6399779127553835,
      "LackOfCohesion" : 0.5521132453374382,
      "MetricsIntensity" : 0.05255231816777762,
      "Density" : 3.2158693115519243
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "2ca445aa-ad90-4b85-8f37-24260b7d8e7a",
    "objectives" : {
      "NumberOfConcerns" : 0.9929316728374284,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5556651507627965,
      "MetricsIntensity" : 0.052606019055015045,
      "Density" : 0.9924187725631769
    },
    "euclideanDistance" : 35.032589677043184,
    "generation" : 43,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6316371681415929,
      "LackOfCohesion" : 0.5556651507627965,
      "MetricsIntensity" : 0.052606019055015045,
      "Density" : 3.21332554061952
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "b7f01a91-fe0a-448a-86dc-0e77039a00c6",
    "objectives" : {
      "NumberOfConcerns" : 0.9936048468529115,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5557759719992085,
      "MetricsIntensity" : 0.052572490002213104,
      "Density" : 0.9929602888086643
    },
    "euclideanDistance" : 35.03262581543949,
    "generation" : 40,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6318407960199,
      "LackOfCohesion" : 0.5557759719992085,
      "MetricsIntensity" : 0.0525724900022131,
      "Density" : 3.213200934579439
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "eed3c978-6b46-40a6-9e4e-6d7321b2f68c",
    "objectives" : {
      "NumberOfConcerns" : 0.993941433860653,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5562458650353386,
      "MetricsIntensity" : 0.052547163207953704,
      "Density" : 0.9931407942238267
    },
    "euclideanDistance" : 35.032647899892275,
    "generation" : 36,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6314917127071826,
      "LackOfCohesion" : 0.5562458650353386,
      "MetricsIntensity" : 0.0525471632079537,
      "Density" : 3.2137850467289715
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "400604a5-0130-4dcf-8d41-59a0c631a1f2",
    "objectives" : {
      "NumberOfConcerns" : 0.9969707169303265,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5515334986918857,
      "MetricsIntensity" : 0.052599834328726565,
      "Density" : 0.9927797833935018
    },
    "euclideanDistance" : 35.03264931819291,
    "generation" : 42,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6373687119955778,
      "LackOfCohesion" : 0.5515334986918857,
      "MetricsIntensity" : 0.052599834328726565,
      "Density" : 3.2107413893753654
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "bbd4ba3a-8598-42a3-820e-f6c97bee5b41",
    "objectives" : {
      "NumberOfConcerns" : 0.9962975429148435,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5511028310032992,
      "MetricsIntensity" : 0.05262598578506976,
      "Density" : 0.9925992779783394
    },
    "euclideanDistance" : 36.031713058712334,
    "generation" : 38,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.637168141592921,
      "LackOfCohesion" : 0.5511028310032992,
      "MetricsIntensity" : 0.05262598578506976,
      "Density" : 3.2120327102803734
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "8b592053-4af5-4db9-8454-722fe8631b5e",
    "objectives" : {
      "NumberOfConcerns" : 0.99326825984517,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5534798697079858,
      "MetricsIntensity" : 0.05271242541624017,
      "Density" : 0.9895306859205776
    },
    "euclideanDistance" : 37.030728744926954,
    "generation" : 20,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6330935251798564,
      "LackOfCohesion" : 0.5534798697079858,
      "MetricsIntensity" : 0.052712425416240175,
      "Density" : 3.205847953216374
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "514e407e-c0d5-42dc-83d9-07d559bd226b",
    "objectives" : {
      "NumberOfConcerns" : 0.99326825984517,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5543562199352018,
      "MetricsIntensity" : 0.05260239218719953,
      "Density" : 0.9893501805054151
    },
    "euclideanDistance" : 37.030736874195824,
    "generation" : 43,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6321902654867253,
      "LackOfCohesion" : 0.5543562199352018,
      "MetricsIntensity" : 0.05260239218719954,
      "Density" : 3.203389830508475
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "9b15d097-92f3-4e4f-9ac8-871a35814542",
    "objectives" : {
      "NumberOfConcerns" : 0.995960955907102,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5519960288173738,
      "MetricsIntensity" : 0.05260060740535411,
      "Density" : 0.9925992779783394
    },
    "euclideanDistance" : 37.0308608864561,
    "generation" : 38,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6357103372028754,
      "LackOfCohesion" : 0.5519960288173738,
      "MetricsIntensity" : 0.05260060740535412,
      "Density" : 3.2120327102803743
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "4e3e5bb4-bc97-4316-ae36-fd3a5411c3db",
    "objectives" : {
      "NumberOfConcerns" : 0.992595085829687,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5530499135181792,
      "MetricsIntensity" : 0.052738684999796635,
      "Density" : 0.9893501805054151
    },
    "euclideanDistance" : 38.02989224754413,
    "generation" : 44,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6328903654485052,
      "LackOfCohesion" : 0.5530499135181792,
      "MetricsIntensity" : 0.052738684999796635,
      "Density" : 3.2071386775892328
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "b3c3d9b0-9380-4064-a76f-ec71fdec0abc",
    "objectives" : {
      "NumberOfConcerns" : 0.994614607876136,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5523056461197923,
      "MetricsIntensity" : 0.052628483296819836,
      "Density" : 0.9945848375451264
    },
    "euclideanDistance" : 38.03007058238605,
    "generation" : 46,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6334991708126034,
      "LackOfCohesion" : 0.5523056461197923,
      "MetricsIntensity" : 0.05262848329681983,
      "Density" : 3.2184579439252334
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "3927b0b4-db7b-4971-9d3d-64eebe8d6baf",
    "objectives" : {
      "NumberOfConcerns" : 0.992595085829687,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5524997994349339,
      "MetricsIntensity" : 0.052695658731843655,
      "Density" : 0.9933212996389892
    },
    "euclideanDistance" : 39.029219375610815,
    "generation" : 37,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6319867183176537,
      "LackOfCohesion" : 0.5524997994349339,
      "MetricsIntensity" : 0.05269565873184365,
      "Density" : 3.218128654970759
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "9851838b-1bab-455f-a360-355a3553f139",
    "objectives" : {
      "NumberOfConcerns" : 0.9949511948838775,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5559400836863918,
      "MetricsIntensity" : 0.05253555454761184,
      "Density" : 0.9909747292418772
    },
    "euclideanDistance" : 39.029268352805914,
    "generation" : 45,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.633149171270718,
      "LackOfCohesion" : 0.5559400836863918,
      "MetricsIntensity" : 0.05253555454761184,
      "Density" : 3.2049036777583195
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "5241d31d-2972-4ed8-848c-30b49a527e25",
    "objectives" : {
      "NumberOfConcerns" : 0.996634129922585,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5520775262587004,
      "MetricsIntensity" : 0.05258264805171991,
      "Density" : 0.9925992779783394
    },
    "euclideanDistance" : 39.02929780876727,
    "generation" : 44,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6359116022099451,
      "LackOfCohesion" : 0.5520775262587004,
      "MetricsIntensity" : 0.0525826480517199,
      "Density" : 3.2120327102803734
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "0eb07e20-b11c-4908-98c7-a53966d04e8e",
    "objectives" : {
      "NumberOfConcerns" : 0.993941433860653,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5520335425958068,
      "MetricsIntensity" : 0.052675112687939306,
      "Density" : 0.9907942238267148
    },
    "euclideanDistance" : 40.0284537356561,
    "generation" : 46,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6342003320420584,
      "LackOfCohesion" : 0.5520335425958068,
      "MetricsIntensity" : 0.052675112687939306,
      "Density" : 3.2099415204678357
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "982e5fd2-91fe-460e-ad4e-303ab7b01b44",
    "objectives" : {
      "NumberOfConcerns" : 0.9956243688993605,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5518825907719985,
      "MetricsIntensity" : 0.05260873722227065,
      "Density" : 0.992057761732852
    },
    "euclideanDistance" : 40.02852468627579,
    "generation" : 45,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6351575456053071,
      "LackOfCohesion" : 0.5518825907719985,
      "MetricsIntensity" : 0.05260873722227065,
      "Density" : 3.2121566335476333
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "3c792784-37af-495c-90cd-e2cb80e38ee5",
    "objectives" : {
      "NumberOfConcerns" : 0.9936048468529115,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5562494984922095,
      "MetricsIntensity" : 0.05256341220762466,
      "Density" : 0.9929602888086643
    },
    "euclideanDistance" : 40.02855727032535,
    "generation" : 34,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6309392265193363,
      "LackOfCohesion" : 0.5562494984922095,
      "MetricsIntensity" : 0.05256341220762466,
      "Density" : 3.211325160537069
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "29caf4b6-019c-435f-b244-bfeac9bbebec",
    "objectives" : {
      "NumberOfConcerns" : 0.9936048468529115,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5520761896240372,
      "MetricsIntensity" : 0.05267588677777344,
      "Density" : 0.9907942238267148
    },
    "euclideanDistance" : 41.027752639571375,
    "generation" : 46,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6336469286109572,
      "LackOfCohesion" : 0.5520761896240372,
      "MetricsIntensity" : 0.05267588677777344,
      "Density" : 3.2118197776477473
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "a0094c4f-55a8-44b7-8f1f-7ad8e1fc04c6",
    "objectives" : {
      "NumberOfConcerns" : 0.9915853248064624,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5555737111366896,
      "MetricsIntensity" : 0.05274051004458694,
      "Density" : 0.9918772563176895
    },
    "euclideanDistance" : 41.02777724490906,
    "generation" : 44,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6303265080243496,
      "LackOfCohesion" : 0.5555737111366896,
      "MetricsIntensity" : 0.052740510044586936,
      "Density" : 3.2134502923976616
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "a3c59e5f-39b4-4963-ac88-98711118b278",
    "objectives" : {
      "NumberOfConcerns" : 0.9915853248064624,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5564486901514438,
      "MetricsIntensity" : 0.052630458423517226,
      "Density" : 0.9916967509025271
    },
    "euclideanDistance" : 41.02778459790447,
    "generation" : 36,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6294247787610616,
      "LackOfCohesion" : 0.5564486901514438,
      "MetricsIntensity" : 0.05263045842351723,
      "Density" : 3.2109877264757447
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "9c9bd35e-bfdf-4ea7-bbf8-b96f44d82af0",
    "objectives" : {
      "NumberOfConcerns" : 0.9922584988219455,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5565589986002977,
      "MetricsIntensity" : 0.05259691337636415,
      "Density" : 0.9922382671480144
    },
    "euclideanDistance" : 41.02781541907267,
    "generation" : 35,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6296296296296295,
      "LackOfCohesion" : 0.5565589986002977,
      "MetricsIntensity" : 0.05259691337636416,
      "Density" : 3.210864485981309
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "5748cdf8-0549-4445-8fe3-1bdb31353157",
    "objectives" : {
      "NumberOfConcerns" : 0.9962975429148435,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5524294641253537,
      "MetricsIntensity" : 0.05259073865034052,
      "Density" : 0.9925992779783394
    },
    "euclideanDistance" : 41.027866215772015,
    "generation" : 44,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6353591160220995,
      "LackOfCohesion" : 0.5524294641253537,
      "MetricsIntensity" : 0.05259073865034052,
      "Density" : 3.2082847141190203
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "120320a3-7529-4830-a621-ec99eea7e1c1",
    "objectives" : {
      "NumberOfConcerns" : 0.9942780208683945,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5526236524651817,
      "MetricsIntensity" : 0.05265782065725173,
      "Density" : 0.9913357400722022
    },
    "euclideanDistance" : 42.027128156461835,
    "generation" : 45,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.633849557522124,
      "LackOfCohesion" : 0.5526236524651817,
      "MetricsIntensity" : 0.05265782065725173,
      "Density" : 3.2079439252336446
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "8ea66ae1-911f-4ab8-8b6c-b56781aec0c2",
    "objectives" : {
      "NumberOfConcerns" : 0.995287781891619,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5525013698986312,
      "MetricsIntensity" : 0.05262429162627913,
      "Density" : 0.9922382671480144
    },
    "euclideanDistance" : 42.02717170625909,
    "generation" : 42,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6346047540077389,
      "LackOfCohesion" : 0.5525013698986312,
      "MetricsIntensity" : 0.052624291626279136,
      "Density" : 3.208990075890251
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "48f2bca5-9052-4e48-9f7d-a70312eb492f",
    "objectives" : {
      "NumberOfConcerns" : 0.9922584988219455,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5546785653763393,
      "MetricsIntensity" : 0.05274622852757309,
      "Density" : 0.9891696750902527
    },
    "euclideanDistance" : 43.026427739821884,
    "generation" : 39,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6323366555924697,
      "LackOfCohesion" : 0.5546785653763393,
      "MetricsIntensity" : 0.05274622852757309,
      "Density" : 3.2065535400819187
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "377cda95-88b7-4465-8eaa-489dd3d955ce",
    "objectives" : {
      "NumberOfConcerns" : 0.9922584988219455,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5555547043680105,
      "MetricsIntensity" : 0.05263610104142867,
      "Density" : 0.9889891696750902
    },
    "euclideanDistance" : 43.02643475928371,
    "generation" : 28,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6314333148865525,
      "LackOfCohesion" : 0.5555547043680105,
      "MetricsIntensity" : 0.052636101041428664,
      "Density" : 3.204093567251462
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "14af423e-2f40-4f42-86b1-1589bb82e4a5",
    "objectives" : {
      "NumberOfConcerns" : 0.992595085829687,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5560253577536519,
      "MetricsIntensity" : 0.05261069941768153,
      "Density" : 0.9891696750902527
    },
    "euclideanDistance" : 43.02645272079363,
    "generation" : 36,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6310840707964596,
      "LackOfCohesion" : 0.5560253577536519,
      "MetricsIntensity" : 0.05261069941768153,
      "Density" : 3.2046783625730995
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    } ]
  }, {
    "solutionId" : "295e7926-f010-4c99-a335-38ce67068c34",
    "objectives" : {
      "NumberOfConcerns" : 0.9922584988219455,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5541273840245106,
      "MetricsIntensity" : 0.05270319731628607,
      "Density" : 0.9931407942238267
    },
    "euclideanDistance" : 44.02590987532648,
    "generation" : 34,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6314333148865519,
      "LackOfCohesion" : 0.5541273840245106,
      "MetricsIntensity" : 0.05270319731628606,
      "Density" : 3.2175438596491204
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "fce79c15-cc65-44e5-8b5c-c7d697fc59df",
    "objectives" : {
      "NumberOfConcerns" : 0.9949511948838775,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5523879318532559,
      "MetricsIntensity" : 0.05263242144319565,
      "Density" : 0.9916967509025271
    },
    "euclideanDistance" : 45.02534056423111,
    "generation" : 34,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.634051962410171,
      "LackOfCohesion" : 0.5523879318532559,
      "MetricsIntensity" : 0.05263242144319566,
      "Density" : 3.2091121495327104
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "cc803415-7523-46bc-885b-c08e8c87cff9",
    "objectives" : {
      "NumberOfConcerns" : 0.992595085829687,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.5528175954440799,
      "MetricsIntensity" : 0.05269956807175507,
      "Density" : 0.990072202166065
    },
    "euclideanDistance" : 46.024709369079375,
    "generation" : 32,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6319867183176533,
      "LackOfCohesion" : 0.5528175954440799,
      "MetricsIntensity" : 0.05269956807175507,
      "Density" : 3.2076023391812876
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "d63450e0-1ea5-44b2-b9da-019bb53a87d4",
    "objectives" : {
      "NumberOfConcerns" : 0.99326825984517,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.552079830224008,
      "MetricsIntensity" : 0.052692167721742574,
      "Density" : 0.9906137184115523
    },
    "euclideanDistance" : 46.02472668010751,
    "generation" : 39,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6330935251798564,
      "LackOfCohesion" : 0.552079830224008,
      "MetricsIntensity" : 0.052692167721742574,
      "Density" : 3.209356725146198
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "c9e0e97d-d5a8-4184-91c3-6f3dcfaa510e",
    "objectives" : {
      "NumberOfConcerns" : 0.993941433860653,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.5521930719854853,
      "MetricsIntensity" : 0.052658560294533606,
      "Density" : 0.9911552346570397
    },
    "euclideanDistance" : 46.024754191476724,
    "generation" : 33,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6332964601769902,
      "LackOfCohesion" : 0.5521930719854853,
      "MetricsIntensity" : 0.052658560294533606,
      "Density" : 3.209234365867913
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "26634ee8-07fd-4932-8b1f-fd953bb5eb0c",
    "objectives" : {
      "NumberOfConcerns" : 0.992595085829687,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.5547161226814241,
      "MetricsIntensity" : 0.052685886893569456,
      "Density" : 0.9936823104693141
    },
    "euclideanDistance" : 46.024809997630555,
    "generation" : 47,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6310840707964602,
      "LackOfCohesion" : 0.5547161226814241,
      "MetricsIntensity" : 0.052685886893569456,
      "Density" : 3.2155373831775704
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "482d0281-f715-405a-b0b2-7635c2f51576",
    "objectives" : {
      "NumberOfConcerns" : 0.991921911814204,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5523872049760673,
      "MetricsIntensity" : 0.052725819224265946,
      "Density" : 0.9898916967509025
    },
    "euclideanDistance" : 47.024160878070624,
    "generation" : 38,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6317829457364346,
      "LackOfCohesion" : 0.5523872049760673,
      "MetricsIntensity" : 0.052725819224265946,
      "Density" : 3.208894090111176
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "8566c856-f03b-4220-a887-6a19e63431a7",
    "objectives" : {
      "NumberOfConcerns" : 0.992595085829687,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.552500319520644,
      "MetricsIntensity" : 0.05269216772174259,
      "Density" : 0.9904332129963899
    },
    "euclideanDistance" : 47.024187776307514,
    "generation" : 45,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.631986718317654,
      "LackOfCohesion" : 0.552500319520644,
      "MetricsIntensity" : 0.052692167721742594,
      "Density" : 3.2087719298245614
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "bfc6b3aa-787a-4cf2-871f-4e21e794c7f3",
    "objectives" : {
      "NumberOfConcerns" : 0.9922584988219455,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.5551537419257636,
      "MetricsIntensity" : 0.052737019034485834,
      "Density" : 0.9891696750902527
    },
    "euclideanDistance" : 48.02368176686325,
    "generation" : 37,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6314333148865523,
      "LackOfCohesion" : 0.5551537419257636,
      "MetricsIntensity" : 0.05273701903448583,
      "Density" : 3.2046783625731
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "651e1869-bd42-4f6f-9340-ee76247169ab",
    "objectives" : {
      "NumberOfConcerns" : 0.9909121507909795,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5554631323576275,
      "MetricsIntensity" : 0.05277069994770609,
      "Density" : 0.9884476534296028
    },
    "euclideanDistance" : 49.02316044169672,
    "generation" : 45,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.630121816168328,
      "LackOfCohesion" : 0.5554631323576275,
      "MetricsIntensity" : 0.052770699947706085,
      "Density" : 3.204212990052662
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "203b1156-d5f0-4ea3-a4cf-8b5739f2f4f1",
    "objectives" : {
      "NumberOfConcerns" : 0.9909121507909795,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5554631323576275,
      "MetricsIntensity" : 0.05277069994770609,
      "Density" : 0.9884476534296028
    },
    "euclideanDistance" : 49.02316044169672,
    "generation" : 19,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6301218161683282,
      "LackOfCohesion" : 0.5554631323576275,
      "MetricsIntensity" : 0.052770699947706085,
      "Density" : 3.2042129900526626
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "e7efc932-062b-4f24-b9ba-1ceb4ba0546e",
    "objectives" : {
      "NumberOfConcerns" : 0.9909121507909795,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5563387572162833,
      "MetricsIntensity" : 0.05266055642524438,
      "Density" : 0.9882671480144405
    },
    "euclideanDistance" : 49.02316661328003,
    "generation" : 19,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6292197011621463,
      "LackOfCohesion" : 0.5563387572162833,
      "MetricsIntensity" : 0.05266055642524439,
      "Density" : 3.201754385964913
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "04a51507-9569-4e90-b355-3e37c5baa7e6",
    "objectives" : {
      "NumberOfConcerns" : 0.9915853248064624,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5555742312223997,
      "MetricsIntensity" : 0.05273701903448584,
      "Density" : 0.9889891696750902
    },
    "euclideanDistance" : 49.02318619748905,
    "generation" : 23,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6303265080243496,
      "LackOfCohesion" : 0.5555742312223997,
      "MetricsIntensity" : 0.05273701903448585,
      "Density" : 3.204093567251462
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "76227845-f4d6-41a0-98db-dd8e43e79080",
    "objectives" : {
      "NumberOfConcerns" : 0.9915853248064624,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.556449209896561,
      "MetricsIntensity" : 0.05262696969960484,
      "Density" : 0.9888086642599277
    },
    "euclideanDistance" : 49.02319236190174,
    "generation" : 33,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.629424778761062,
      "LackOfCohesion" : 0.556449209896561,
      "MetricsIntensity" : 0.05262696969960484,
      "Density" : 3.2016364699006434
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "fe7e6871-7859-4ca1-b668-625564293fe5",
    "objectives" : {
      "NumberOfConcerns" : 0.9909121507909795,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 0.5549114368727835,
      "MetricsIntensity" : 0.05272765270010181,
      "Density" : 0.9924187725631769
    },
    "euclideanDistance" : 50.02276990350347,
    "generation" : 31,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6292197011621472,
      "LackOfCohesion" : 0.5549114368727835,
      "MetricsIntensity" : 0.05272765270010182,
      "Density" : 3.2152046783625723
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "74efa34c-e173-4ff6-8a8f-a92cbf18313f",
    "objectives" : {
      "NumberOfConcerns" : 0.9915853248064624,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 0.5550228242749625,
      "MetricsIntensity" : 0.05269402203453109,
      "Density" : 0.9929602888086643
    },
    "euclideanDistance" : 50.02279518966276,
    "generation" : 46,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.629424778761062,
      "LackOfCohesion" : 0.5550228242749625,
      "MetricsIntensity" : 0.05269402203453109,
      "Density" : 3.2150789012273524
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "b13a3072-1e8e-4677-9121-3e94c5fdb542",
    "objectives" : {
      "NumberOfConcerns" : 0.9915853248064624,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5540158568342275,
      "MetricsIntensity" : 0.05273336275204239,
      "Density" : 0.98971119133574
    },
    "euclideanDistance" : 52.0218462194086,
    "generation" : 36,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6312292358803984,
      "LackOfCohesion" : 0.5540158568342275,
      "MetricsIntensity" : 0.0527333627520424,
      "Density" : 3.2083089526038617
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "7db396b5-9d1f-4a6a-993f-4cfe7c7e967b",
    "objectives" : {
      "NumberOfConcerns" : 0.9922584988219455,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5541279041102206,
      "MetricsIntensity" : 0.05269970630618499,
      "Density" : 0.9902527075812274
    },
    "euclideanDistance" : 52.02187051948935,
    "generation" : 37,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6314333148865523,
      "LackOfCohesion" : 0.5541279041102206,
      "MetricsIntensity" : 0.052699706306185,
      "Density" : 3.2081871345029236
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "33ca00ae-1b2e-4077-ace1-8ce762582120",
    "objectives" : {
      "NumberOfConcerns" : 0.991921911814204,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.554605054380949,
      "MetricsIntensity" : 0.05271602121801617,
      "Density" : 0.9902527075812274
    },
    "euclideanDistance" : 54.0210595531895,
    "generation" : 43,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6308799114554506,
      "LackOfCohesion" : 0.554605054380949,
      "MetricsIntensity" : 0.052716021218016176,
      "Density" : 3.206312098188194
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "b4dc0192-e28a-4d4a-a033-d2b28b445441",
    "objectives" : {
      "NumberOfConcerns" : 0.9915853248064624,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 0.5544914676618574,
      "MetricsIntensity" : 0.05272416169000075,
      "Density" : 0.98971119133574
    },
    "euclideanDistance" : 57.019935200976526,
    "generation" : 45,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6303265080243505,
      "LackOfCohesion" : 0.5544914676618574,
      "MetricsIntensity" : 0.05272416169000074,
      "Density" : 3.2064327485380133
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "18ade61b-3abc-4d75-9882-39d395e19450",
    "objectives" : {
      "NumberOfConcerns" : 0.991248737798721,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 0.5548140850177015,
      "MetricsIntensity" : 0.05276313663340114,
      "Density" : 0.9898916967509025
    },
    "euclideanDistance" : 57.01993565630363,
    "generation" : 31,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6306755260243635,
      "LackOfCohesion" : 0.5548140850177015,
      "MetricsIntensity" : 0.05276313663340113,
      "Density" : 3.2088940901111767
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "1c5143f2-bf78-4b6a-a1d1-2847421cac84",
    "objectives" : {
      "NumberOfConcerns" : 0.9902389767754964,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5548004238155156,
      "MetricsIntensity" : 0.05275783417217539,
      "Density" : 0.9889891696750902
    },
    "euclideanDistance" : 58.01955928571151,
    "generation" : 18,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6290143964562573,
      "LackOfCohesion" : 0.5548004238155156,
      "MetricsIntensity" : 0.052757834172175395,
      "Density" : 3.205968402574605
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "dc02fec8-d4e3-4161-8fb8-7d80dd549aa0",
    "objectives" : {
      "NumberOfConcerns" : 0.9902389767754964,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5548004238155158,
      "MetricsIntensity" : 0.05275783417217538,
      "Density" : 0.9889891696750902
    },
    "euclideanDistance" : 58.01955928571151,
    "generation" : 32,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6290143964562576,
      "LackOfCohesion" : 0.5548004238155158,
      "MetricsIntensity" : 0.05275783417217539,
      "Density" : 3.205968402574605
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.ldap.ContextSourceSettingPostProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  }, {
    "solutionId" : "7ac343f3-def6-41d9-9ff7-f76ce4ec9fec",
    "objectives" : {
      "NumberOfConcerns" : 0.9909121507909795,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5549119569584936,
      "MetricsIntensity" : 0.05272416169000073,
      "Density" : 0.9895306859205776
    },
    "euclideanDistance" : 58.019581048006245,
    "generation" : 22,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6292197011621472,
      "LackOfCohesion" : 0.5549119569584936,
      "MetricsIntensity" : 0.052724161690000736,
      "Density" : 3.2058479532163746
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.messaging.access.expression.MessageSecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.access.SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.access.SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.DefaultCacheKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.UserInfoEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.web.authentication.WebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.crypto.encrypt.BouncyCastleAesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.rsocket.util.matcher.PayloadExchangeMatcherEntry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.User.AuthorityComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer.MvcMatchersRequiresChannelUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.core.userdetails.UserDetailsMapFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.oauth2.jwt.BadJwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.config.http.RememberMeBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.ContentTypeOptionsSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.context.DelegatingApplicationListener'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.context.DelegatingApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.FilterChainProxy.NullFilterChainValidator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser.RequestRejectedHandlerPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.web.server.ServerHttpBasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.MvcMatchersAuthorizedUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.web.server.ui.LogoutPageGeneratingWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.access.prepost.PostInvocationAdviceProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial.RedirectSignature'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.jackson2.WebAuthenticationDetailsMixin'"
      } ]
    } ]
  } ]
}