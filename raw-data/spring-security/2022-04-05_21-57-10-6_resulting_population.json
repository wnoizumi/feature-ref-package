{
  "executionId" : "3b945dc8-3299-4e98-b7a4-0ae98464e72b",
  "computingTime" : 8687,
  "maxEvaluations" : 1000,
  "initialPopulationSize" : 50,
  "finalPopulationSize" : 34,
  "algorithm" : "Baseline",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.159117305458769,
    "meanNumConcerns" : 1.6116343490304712,
    "meanMetricsIntensity" : 0.053565974990151706,
    "meanLackOfCohesion" : 0.5516677364702989
  },
  "population" : [ {
    "solutionId" : "dd2d6480-8f69-4752-b25c-1c807be50068",
    "objectives" : {
      "NumberOfConcerns" : 0.9993124785149536,
      "NumberOfRefactorings" : 1.0,
      "LackOfCohesion" : 0.5516896087362658,
      "MetricsIntensity" : 0.053564172330868735,
      "Density" : 0.9992647058823529
    },
    "euclideanDistance" : 1.8177969983149687,
    "generation" : 0,
    "numberOfRefactorings" : 1,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6105263157894736,
      "LackOfCohesion" : 0.5516896087362658,
      "MetricsIntensity" : 0.05356417233086874,
      "Density" : 3.1567944250871083,
      "baselineType" : "MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    } ]
  }, {
    "solutionId" : "5225d238-d65f-48f9-a9f5-a6d237d07e8d",
    "objectives" : {
      "NumberOfConcerns" : 1.0006875214850464,
      "NumberOfRefactorings" : 1.0,
      "LackOfCohesion" : 0.5526220162788066,
      "MetricsIntensity" : 0.0535264480380299,
      "Density" : 1.0
    },
    "euclideanDistance" : 1.8192393160800773,
    "generation" : 0,
    "numberOfRefactorings" : 1,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6118493909191587,
      "LackOfCohesion" : 0.5526220162788066,
      "MetricsIntensity" : 0.0535264480380299,
      "Density" : 3.157283807312827,
      "baselineType" : "EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    } ]
  }, {
    "solutionId" : "779e8e3b-588a-4f0a-9c66-58877d6e7b13",
    "objectives" : {
      "NumberOfConcerns" : 1.0020625644551393,
      "NumberOfRefactorings" : 7.0,
      "LackOfCohesion" : 0.5529165993742121,
      "MetricsIntensity" : 0.05328938366008761,
      "Density" : 0.9988970588235294
    },
    "euclideanDistance" : 7.163133479245177,
    "generation" : 0,
    "numberOfRefactorings" : 7,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6087196467991172,
      "LackOfCohesion" : 0.5529165993742121,
      "MetricsIntensity" : 0.053289383660087605,
      "Density" : 3.146496815286624,
      "baselineType" : "CONCERN_EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange(), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)]"
      } ]
    } ]
  }, {
    "solutionId" : "838072bd-8d44-4426-9ab7-647a5acdb55c",
    "objectives" : {
      "NumberOfConcerns" : 1.0010312822275695,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5532803775874352,
      "MetricsIntensity" : 0.053285452064574315,
      "Density" : 0.9977941176470588
    },
    "euclideanDistance" : 9.127245764458973,
    "generation" : 0,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6070640176600446,
      "LackOfCohesion" : 0.5532803775874352,
      "MetricsIntensity" : 0.05328545206457432,
      "Density" : 3.1448435689455385,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.firewall.DefaultHttpFirewall'"
      } ]
    } ]
  }, {
    "solutionId" : "f1f8317d-b5f1-4cae-840a-6a0f3a96eeab",
    "objectives" : {
      "NumberOfConcerns" : 1.0013750429700927,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5531409094246383,
      "MetricsIntensity" : 0.05332246048472326,
      "Density" : 0.9985294117647059
    },
    "euclideanDistance" : 10.114772420243265,
    "generation" : 0,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6085035891772503,
      "LackOfCohesion" : 0.5531409094246383,
      "MetricsIntensity" : 0.05332246048472326,
      "Density" : 3.1471610660486675,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.authentication.session.NullAuthenticatedSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='io.spring.gradle.convention.ManagementConfigurationPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    } ]
  }, {
    "solutionId" : "e649a5bd-8e24-4546-96eb-4d05acc82e88",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5537774294647531,
      "MetricsIntensity" : 0.05333675583356752,
      "Density" : 0.9948529411764706
    },
    "euclideanDistance" : 11.104019390539397,
    "generation" : 0,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6062948647156263,
      "LackOfCohesion" : 0.5537774294647531,
      "MetricsIntensity" : 0.05333675583356753,
      "Density" : 3.1373913043478256,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.acls.domain.CumulativePermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.web.authentication.www.BasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.firewall.DefaultHttpFirewall'"
      } ]
    } ]
  }, {
    "solutionId" : "a27f608b-6e14-4fba-b7dd-c7923de9df45",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5537774294647531,
      "MetricsIntensity" : 0.05333675583356752,
      "Density" : 0.9948529411764706
    },
    "euclideanDistance" : 11.104019390539397,
    "generation" : 0,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.606294864715627,
      "LackOfCohesion" : 0.5537774294647531,
      "MetricsIntensity" : 0.05333675583356753,
      "Density" : 3.137391304347826,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.acls.domain.CumulativePermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.web.authentication.www.BasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.firewall.DefaultHttpFirewall'"
      } ]
    } ]
  }, {
    "solutionId" : "bc4ec51c-94f2-4a9d-9847-5803be302df9",
    "objectives" : {
      "NumberOfConcerns" : 1.0003437607425232,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5529130711690359,
      "MetricsIntensity" : 0.05335908854388107,
      "Density" : 0.9977941176470588
    },
    "euclideanDistance" : 11.104271286197369,
    "generation" : 0,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.607734806629834,
      "LackOfCohesion" : 0.5529130711690359,
      "MetricsIntensity" : 0.053359088543881064,
      "Density" : 3.146666666666666,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.oauth2.jwt.JwtValidationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenErrors'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    } ]
  }, {
    "solutionId" : "ad3f9d94-d209-4393-84c8-c495a73461a6",
    "objectives" : {
      "NumberOfConcerns" : 1.0006875214850464,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.553181759097841,
      "MetricsIntensity" : 0.053305086013567274,
      "Density" : 0.9979779411764705
    },
    "euclideanDistance" : 11.104331901448381,
    "generation" : 0,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6073992269464388,
      "LackOfCohesion" : 0.553181759097841,
      "MetricsIntensity" : 0.053305086013567274,
      "Density" : 3.145422943221321,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='s101.S101PluginExtension'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    } ]
  }, {
    "solutionId" : "1f3b1c82-4494-4d36-b1cf-c6d97c75444e",
    "objectives" : {
      "NumberOfConcerns" : 1.0003437607425232,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.553638195169657,
      "MetricsIntensity" : 0.05337382201185196,
      "Density" : 0.9955882352941177
    },
    "euclideanDistance" : 12.095505263937486,
    "generation" : 0,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6077348066298334,
      "LackOfCohesion" : 0.553638195169657,
      "MetricsIntensity" : 0.05337382201185196,
      "Density" : 3.139710144927537,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.authentication.session.NullAuthenticatedSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='io.spring.gradle.convention.ManagementConfigurationPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.acls.domain.CumulativePermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.web.authentication.www.BasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    } ]
  }, {
    "solutionId" : "1093738d-dd93-47c9-b346-61a5a9aedd98",
    "objectives" : {
      "NumberOfConcerns" : 1.0006875214850464,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5534925541067497,
      "MetricsIntensity" : 0.053360885308267755,
      "Density" : 0.9981617647058824
    },
    "euclideanDistance" : 12.095739076869554,
    "generation" : 0,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6082872928176795,
      "LackOfCohesion" : 0.5534925541067497,
      "MetricsIntensity" : 0.05336088530826776,
      "Density" : 3.1478260869565218,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.authentication.session.NullAuthenticatedSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='io.spring.gradle.convention.ManagementConfigurationPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenErrors'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    } ]
  }, {
    "solutionId" : "3677abec-62c4-4426-85b4-c789e24d7bc0",
    "objectives" : {
      "NumberOfConcerns" : 0.9993124785149536,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5534105332540346,
      "MetricsIntensity" : 0.053410507655817514,
      "Density" : 0.9948529411764706
    },
    "euclideanDistance" : 13.088066079636354,
    "generation" : 0,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6069651741293531,
      "LackOfCohesion" : 0.5534105332540346,
      "MetricsIntensity" : 0.053410507655817514,
      "Density" : 3.139211136890952,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.acls.domain.CumulativePermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.web.authentication.www.BasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.oauth2.jwt.JwtValidationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenErrors'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    } ]
  }, {
    "solutionId" : "81ba05d5-e6ab-4dca-9d72-33fbb018b577",
    "objectives" : {
      "NumberOfConcerns" : 0.9993124785149536,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5541294904451253,
      "MetricsIntensity" : 0.053375190006588046,
      "Density" : 0.9944852941176471
    },
    "euclideanDistance" : 13.088068414896874,
    "generation" : 0,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6060773480662982,
      "LackOfCohesion" : 0.5541294904451253,
      "MetricsIntensity" : 0.053375190006588046,
      "Density" : 3.138051044083527,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.acls.domain.CumulativePermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.web.authentication.www.BasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenErrors'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.firewall.DefaultHttpFirewall'"
      } ]
    } ]
  }, {
    "solutionId" : "f0a921de-ad25-46f7-94e6-d860f33ae06d",
    "objectives" : {
      "NumberOfConcerns" : 0.9996562392574768,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5529298239546078,
      "MetricsIntensity" : 0.05341410353637673,
      "Density" : 0.9952205882352941
    },
    "euclideanDistance" : 13.08809997947024,
    "generation" : 0,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6075179657269214,
      "LackOfCohesion" : 0.5529298239546078,
      "MetricsIntensity" : 0.05341410353637673,
      "Density" : 3.1403712296983763,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.authentication.session.NullAuthenticatedSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='io.spring.gradle.convention.ManagementConfigurationPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.acls.domain.CumulativePermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.web.authentication.www.BasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.oauth2.jwt.JwtValidationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    } ]
  }, {
    "solutionId" : "30e6da28-412a-4b08-a5d0-5246caae83b6",
    "objectives" : {
      "NumberOfConcerns" : 1.0006875214850464,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.554275795477825,
      "MetricsIntensity" : 0.05332606779766939,
      "Density" : 0.9954044117647058
    },
    "euclideanDistance" : 13.088249339983399,
    "generation" : 0,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6073992269464386,
      "LackOfCohesion" : 0.554275795477825,
      "MetricsIntensity" : 0.05332606779766939,
      "Density" : 3.1373117033603726,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.acls.domain.CumulativePermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.web.authentication.www.BasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='s101.S101PluginExtension'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange(), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)]"
      } ]
    } ]
  }, {
    "solutionId" : "c22524e8-a9eb-4044-a22c-fef27e736ccd",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.553533430496547,
      "MetricsIntensity" : 0.05334349947382129,
      "Density" : 0.997610294117647
    },
    "euclideanDistance" : 13.088333396064716,
    "generation" : 0,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6071823204419888,
      "LackOfCohesion" : 0.553533430496547,
      "MetricsIntensity" : 0.05334349947382129,
      "Density" : 3.1460869565217378,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='s101.S101PluginExtension'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenErrors'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    } ]
  }, {
    "solutionId" : "69ce9d69-98df-475d-b044-a9b63b187d39",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.553533430496547,
      "MetricsIntensity" : 0.05334349947382128,
      "Density" : 0.997610294117647
    },
    "euclideanDistance" : 13.088333396064716,
    "generation" : 0,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6071823204419893,
      "LackOfCohesion" : 0.553533430496547,
      "MetricsIntensity" : 0.05334349947382128,
      "Density" : 3.146086956521738,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='s101.S101PluginExtension'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenErrors'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    } ]
  }, {
    "solutionId" : "e0b09c73-bb1f-4deb-9442-9390a59074c9",
    "objectives" : {
      "NumberOfConcerns" : 0.9989687177724303,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5529407314589709,
      "MetricsIntensity" : 0.05341906830695659,
      "Density" : 0.9944852941176471
    },
    "euclideanDistance" : 14.081744797739708,
    "generation" : 0,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.606412382531785,
      "LackOfCohesion" : 0.5529407314589709,
      "MetricsIntensity" : 0.05341906830695659,
      "Density" : 3.13987231572838,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.authentication.session.NullAuthenticatedSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='io.spring.gradle.convention.ManagementConfigurationPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.acls.domain.CumulativePermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.web.authentication.www.BasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.oauth2.jwt.JwtValidationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.firewall.DefaultHttpFirewall'"
      } ]
    } ]
  }, {
    "solutionId" : "a8d9cb5d-e706-4d21-ba1f-66373cc35c3f",
    "objectives" : {
      "NumberOfConcerns" : 0.9993124785149536,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5535443308671596,
      "MetricsIntensity" : 0.05334846099733077,
      "Density" : 0.996875
    },
    "euclideanDistance" : 14.081961602698206,
    "generation" : 0,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6060773480662982,
      "LackOfCohesion" : 0.5535443308671596,
      "MetricsIntensity" : 0.05334846099733077,
      "Density" : 3.1455916473317864,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='s101.S101PluginExtension'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenErrors'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.firewall.DefaultHttpFirewall'"
      } ]
    } ]
  }, {
    "solutionId" : "1a4b385a-51cf-4db1-baab-322538abe0d9",
    "objectives" : {
      "NumberOfConcerns" : 0.998281196287384,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5529816346003321,
      "MetricsIntensity" : 0.05340167109434622,
      "Density" : 0.9939338235294117
    },
    "euclideanDistance" : 15.076243239583848,
    "generation" : 0,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.60530679933665,
      "LackOfCohesion" : 0.5529816346003321,
      "MetricsIntensity" : 0.05340167109434622,
      "Density" : 3.1381311665699365,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.acls.domain.CumulativePermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.web.authentication.www.BasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.oauth2.jwt.JwtValidationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='s101.S101PluginExtension'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.firewall.DefaultHttpFirewall'"
      } ]
    } ]
  }, {
    "solutionId" : "439401c7-da67-4369-a0e8-36c497768771",
    "objectives" : {
      "NumberOfConcerns" : 0.9996562392574768,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5534048528987044,
      "MetricsIntensity" : 0.05338555909403275,
      "Density" : 0.997610294117647
    },
    "euclideanDistance" : 15.076592647038902,
    "generation" : 0,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6075179657269212,
      "LackOfCohesion" : 0.5534048528987044,
      "MetricsIntensity" : 0.05338555909403275,
      "Density" : 3.1479118329466353,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.authentication.session.NullAuthenticatedSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='io.spring.gradle.convention.ManagementConfigurationPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='s101.S101PluginExtension'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenErrors'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    } ]
  }, {
    "solutionId" : "904de3c0-79e2-41ac-9390-b73e359add3a",
    "objectives" : {
      "NumberOfConcerns" : 0.998281196287384,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5532927056180952,
      "MetricsIntensity" : 0.05345760672412868,
      "Density" : 0.9941176470588236
    },
    "euclideanDistance" : 16.071522198499483,
    "generation" : 0,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.606194690265487,
      "LackOfCohesion" : 0.5532927056180952,
      "MetricsIntensity" : 0.05345760672412867,
      "Density" : 3.140534262485483,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.authentication.session.NullAuthenticatedSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='io.spring.gradle.convention.ManagementConfigurationPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.acls.domain.CumulativePermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.web.authentication.www.BasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.oauth2.jwt.JwtValidationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenErrors'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.firewall.DefaultHttpFirewall'"
      } ]
    } ]
  }, {
    "solutionId" : "a82d414b-2bd4-470f-a4ef-a9d62afa6a11",
    "objectives" : {
      "NumberOfConcerns" : 0.9986249570299072,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.552841696792823,
      "MetricsIntensity" : 0.053438828331974,
      "Density" : 0.9946691176470588
    },
    "euclideanDistance" : 16.071562092979327,
    "generation" : 0,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6067477876106193,
      "LackOfCohesion" : 0.552841696792823,
      "MetricsIntensity" : 0.053438828331974,
      "Density" : 3.140452698781195,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.authentication.session.NullAuthenticatedSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='io.spring.gradle.convention.ManagementConfigurationPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.acls.domain.CumulativePermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.web.authentication.www.BasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.oauth2.jwt.JwtValidationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='s101.S101PluginExtension'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult'"
      } ]
    } ]
  }, {
    "solutionId" : "64926ca8-02e9-4d2b-a86a-ea7df96504f4",
    "objectives" : {
      "NumberOfConcerns" : 0.9993124785149536,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5539204590830049,
      "MetricsIntensity" : 0.05340477040092347,
      "Density" : 0.9946691176470588
    },
    "euclideanDistance" : 16.071641858497493,
    "generation" : 0,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6069651741293547,
      "LackOfCohesion" : 0.5539204590830049,
      "MetricsIntensity" : 0.05340477040092347,
      "Density" : 3.13863109048724,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.acls.domain.CumulativePermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.web.authentication.www.BasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.oauth2.jwt.JwtValidationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='s101.S101PluginExtension'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenErrors'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange(), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)]"
      } ]
    } ]
  }, {
    "solutionId" : "68d58b22-45df-4ef9-91d2-1d81f9d9694e",
    "objectives" : {
      "NumberOfConcerns" : 0.9996562392574768,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5534397497835783,
      "MetricsIntensity" : 0.0534083662814827,
      "Density" : 0.9950367647058823
    },
    "euclideanDistance" : 16.07166944564354,
    "generation" : 0,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6075179657269214,
      "LackOfCohesion" : 0.5534397497835783,
      "MetricsIntensity" : 0.0534083662814827,
      "Density" : 3.1397911832946646,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.authentication.session.NullAuthenticatedSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='io.spring.gradle.convention.ManagementConfigurationPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.acls.domain.CumulativePermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.web.authentication.www.BasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.oauth2.jwt.JwtValidationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='s101.S101PluginExtension'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange(), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)]"
      } ]
    } ]
  }, {
    "solutionId" : "21c81e02-1e11-4684-bb8d-8e06a59042b7",
    "objectives" : {
      "NumberOfConcerns" : 1.0006875214850464,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5549361178704575,
      "MetricsIntensity" : 0.05340857592296567,
      "Density" : 0.9957720588235294
    },
    "euclideanDistance" : 18.06387954121951,
    "generation" : 0,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6082872928176797,
      "LackOfCohesion" : 0.5549361178704575,
      "MetricsIntensity" : 0.053408575922965676,
      "Density" : 3.138470451911936,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.acls.domain.CumulativePermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.web.authentication.www.BasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.jackson2.DefaultSavedRequestMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.jackson2.DefaultSavedRequestMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenErrors'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange(), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)]"
      } ]
    } ]
  }, {
    "solutionId" : "f33bea78-920f-462b-877b-745e153ecb46",
    "objectives" : {
      "NumberOfConcerns" : 1.0013750429700927,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5543100819026948,
      "MetricsIntensity" : 0.053399232748154876,
      "Density" : 0.9987132352941176
    },
    "euclideanDistance" : 18.064060762962242,
    "generation" : 0,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6093922651933696,
      "LackOfCohesion" : 0.5543100819026948,
      "MetricsIntensity" : 0.05339923274815488,
      "Density" : 3.1477404403244504,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.authentication.session.NullAuthenticatedSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='io.spring.gradle.convention.ManagementConfigurationPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.jackson2.DefaultSavedRequestMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.jackson2.DefaultSavedRequestMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenErrors'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange(), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)]"
      } ]
    } ]
  }, {
    "solutionId" : "d01b0241-8c9d-4e08-aeaa-4bb247f97d89",
    "objectives" : {
      "NumberOfConcerns" : 0.998281196287384,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5536419743367156,
      "MetricsIntensity" : 0.053484336796294274,
      "Density" : 0.9943014705882353
    },
    "euclideanDistance" : 20.057282487199128,
    "generation" : 0,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6061946902654871,
      "LackOfCohesion" : 0.5536419743367156,
      "MetricsIntensity" : 0.05348433679629427,
      "Density" : 3.139291932675566,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.acls.domain.CumulativePermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.web.authentication.www.BasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.jackson2.DefaultSavedRequestMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.jackson2.DefaultSavedRequestMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.oauth2.jwt.JwtValidationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenErrors'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.firewall.DefaultHttpFirewall'"
      } ]
    } ]
  }, {
    "solutionId" : "b5ecce83-664b-4cef-b9c0-75c8fd6f4e41",
    "objectives" : {
      "NumberOfConcerns" : 0.9993124785149536,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5532840912432571,
      "MetricsIntensity" : 0.05342083232383472,
      "Density" : 0.9974264705882353
    },
    "euclideanDistance" : 20.057478955863193,
    "generation" : 0,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6069651741293531,
      "LackOfCohesion" : 0.5532840912432571,
      "MetricsIntensity" : 0.05342083232383471,
      "Density" : 3.147331786542923,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.authentication.session.NullAuthenticatedSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='io.spring.gradle.convention.ManagementConfigurationPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest), org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.jackson2.DefaultSavedRequestMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.jackson2.DefaultSavedRequestMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='s101.S101PluginExtension'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.firewall.DefaultHttpFirewall'"
      } ]
    } ]
  }, {
    "solutionId" : "ada5d9df-4409-4b71-9c81-f3b9636f2ed9",
    "objectives" : {
      "NumberOfConcerns" : 1.0003437607425232,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5548084582617339,
      "MetricsIntensity" : 0.05345067813247634,
      "Density" : 0.9957720588235294
    },
    "euclideanDistance" : 20.057490347327647,
    "generation" : 0,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6086235489220566,
      "LackOfCohesion" : 0.5548084582617339,
      "MetricsIntensity" : 0.05345067813247633,
      "Density" : 3.1402898550724627,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.authentication.session.NullAuthenticatedSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='io.spring.gradle.convention.ManagementConfigurationPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.acls.domain.CumulativePermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.web.authentication.www.BasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.jackson2.DefaultSavedRequestMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.jackson2.DefaultSavedRequestMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext(), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext), org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenErrors'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange(), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)]"
      } ]
    } ]
  }, {
    "solutionId" : "de1287b4-6cf1-4c32-909c-eb811b46be98",
    "objectives" : {
      "NumberOfConcerns" : 0.9979374355448608,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5542631461846296,
      "MetricsIntensity" : 0.05346872730833003,
      "Density" : 0.9941176470588236
    },
    "euclideanDistance" : 22.052079619878803,
    "generation" : 0,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6056415929203531,
      "LackOfCohesion" : 0.5542631461846296,
      "MetricsIntensity" : 0.053468727308330036,
      "Density" : 3.138711549622751,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.acls.domain.CumulativePermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.web.authentication.www.BasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.jackson2.DefaultSavedRequestMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.jackson2.DefaultSavedRequestMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='s101.S101PluginExtension'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenErrors'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.firewall.DefaultHttpFirewall'"
      } ]
    } ]
  }, {
    "solutionId" : "6b2f2337-758c-42a0-9e2c-ac683bc97f7e",
    "objectives" : {
      "NumberOfConcerns" : 0.9979374355448608,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5542631461846296,
      "MetricsIntensity" : 0.053468727308330036,
      "Density" : 0.9941176470588236
    },
    "euclideanDistance" : 22.052079619878803,
    "generation" : 0,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6056415929203545,
      "LackOfCohesion" : 0.5542631461846296,
      "MetricsIntensity" : 0.05346872730833003,
      "Density" : 3.138711549622753,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.logout.LogoutFilter.logoutRequestMatcher], extractedMethods=[org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain), org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher), org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.acls.domain.CumulativePermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.web.authentication.www.BasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.jackson2.DefaultSavedRequestMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.jackson2.DefaultSavedRequestMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='s101.S101PluginExtension'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenErrors'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.firewall.DefaultHttpFirewall'"
      } ]
    } ]
  }, {
    "solutionId" : "9cbd9449-1829-46bc-a255-de6a163ba954",
    "objectives" : {
      "NumberOfConcerns" : 0.9993124785149536,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5547215613778187,
      "MetricsIntensity" : 0.05347542688000295,
      "Density" : 0.9952205882352941
    },
    "euclideanDistance" : 23.049938504926658,
    "generation" : 0,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6078539823008853,
      "LackOfCohesion" : 0.5547215613778187,
      "MetricsIntensity" : 0.05347542688000295,
      "Density" : 3.1403712296983763,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.authentication.session.NullAuthenticatedSessionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='io.spring.gradle.convention.ManagementConfigurationPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.authentication.logout.Saml2LogoutRequestValidatorParameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.acls.domain.CumulativePermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.web.authentication.www.BasicAuthenticationConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.core.OAuth2AuthorizationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.jackson2.DefaultSavedRequestMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.jackson2.DefaultSavedRequestMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.method.annotation.CsrfTokenArgumentResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.metadataFilename], extractedMethods=[org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String), org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='s101.S101PluginExtension'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portMapper], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortMapper(PortMapper), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.authentication.InsufficientAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecuritySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenErrors'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange(), org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)]"
      } ]
    } ]
  }, {
    "solutionId" : "8cfaca55-9380-4a7f-b168-0967dcc145b0",
    "objectives" : {
      "NumberOfConcerns" : 0.9938123066345823,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5532431077307095,
      "MetricsIntensity" : 0.05358154426522392,
      "Density" : 0.9926470588235294
    },
    "euclideanDistance" : 24.047493840364048,
    "generation" : 0,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.601662049861496,
      "LackOfCohesion" : 0.5532431077307095,
      "MetricsIntensity" : 0.053581544265223914,
      "Density" : 3.137710633352701,
      "baselineType" : "CONCERN_MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.authorization.method.SecuredAuthorizationManager.SecuredAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setLogoutRequestMatcher(RequestMatcher)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.HttpSessionLogoutRequestRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.logout.LogoutFilter.setFilterProcessesUrl(String)', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthenticationMethodConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.ExpressionInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.toString()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.AnonymousSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSaml3LogoutResponseResolver.LogoutResponseParameters'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.authentication.BadCredentialsException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.rsocket.authorization.PayloadExchangeMatcherReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.rsocket.authorization.PayloadExchangeMatcherReactiveAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.writeMetadataToResponse(HttpServletResponse, String, String)', targetType='org.springframework.security.oauth2.jwt.SupplierJwtDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.saml2.provider.service.web.Saml2MetadataFilter.setMetadataFilename(String)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.context.ListeningSecurityContextHolderStrategy",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.publish(SecurityContext, SecurityContext)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcImportSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.getContext()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeAuthenticationProviderBeanManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.setContext(SecurityContext)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.CachingResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.context.ListeningSecurityContextHolderStrategy.clearContext()', targetType='org.springframework.security.web.PortResolverImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport.ExactUrlRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.logout.DelegatingLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationGrantRequestEntityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange()', targetType='org.springframework.security.oauth2.core.oidc.user.OidcUserAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers(HttpMethod, String...)', targetType='org.springframework.security.web.WebAttributes'"
      } ]
    } ]
  } ]
}