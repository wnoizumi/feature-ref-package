{
  "executionId" : "807a575d-bd13-463d-97d4-103ad575e658",
  "computingTime" : 3765786,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 44,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.189888300999411,
    "meanNumConcerns" : 1.6376731301939056,
    "meanMetricsIntensity" : 0.05356597499015171,
    "meanLackOfCohesion" : 0.5516677364702991
  },
  "population" : [ {
    "solutionId" : "9e56d46b-fdd8-466c-aa16-4defc9fe36bc",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.552667560228994,
      "MetricsIntensity" : 0.05348299735668933,
      "Density" : 0.9957611500184298
    },
    "euclideanDistance" : 12.09539124662046,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347537354731594,
      "LackOfCohesion" : 0.552667560228994,
      "MetricsIntensity" : 0.05348299735668933,
      "Density" : 3.170774647887322
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.oauth2.core.endpoint.MapOAuth2AccessTokenResponseConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.session.HttpSessionIdChangedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "fcf51a8b-67c3-4ab6-884a-fc288597205e",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5526675602289941,
      "MetricsIntensity" : 0.05348299735668932,
      "Density" : 0.9957611500184298
    },
    "euclideanDistance" : 12.09539124662046,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.634753735473159,
      "LackOfCohesion" : 0.5526675602289941,
      "MetricsIntensity" : 0.05348299735668932,
      "Density" : 3.1707746478873227
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.oauth2.core.endpoint.MapOAuth2AccessTokenResponseConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.session.HttpSessionIdChangedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "aca4e320-61d4-40ba-950f-8c4fbea8377b",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5526675602289941,
      "MetricsIntensity" : 0.05348299735668932,
      "Density" : 0.9957611500184298
    },
    "euclideanDistance" : 12.09539124662046,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.63475373547316,
      "LackOfCohesion" : 0.5526675602289941,
      "MetricsIntensity" : 0.05348299735668933,
      "Density" : 3.1707746478873235
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.oauth2.core.endpoint.MapOAuth2AccessTokenResponseConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.session.HttpSessionIdChangedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "4736bd3f-51a3-49dc-991e-37853650ae93",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5526675602289941,
      "MetricsIntensity" : 0.05348299735668932,
      "Density" : 0.9957611500184298
    },
    "euclideanDistance" : 12.09539124662046,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.63475373547316,
      "LackOfCohesion" : 0.5526675602289941,
      "MetricsIntensity" : 0.05348299735668932,
      "Density" : 3.1707746478873235
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.oauth2.core.endpoint.MapOAuth2AccessTokenResponseConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.session.HttpSessionIdChangedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "e67bb30b-217a-4a47-8f2d-748efec383bd",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.552666936126142,
      "MetricsIntensity" : 0.05347853947917397,
      "Density" : 0.9959454478437154
    },
    "euclideanDistance" : 12.09540637222882,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347537354731587,
      "LackOfCohesion" : 0.552666936126142,
      "MetricsIntensity" : 0.05347853947917398,
      "Density" : 3.1713615023474184
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.oauth2.core.endpoint.MapOAuth2AccessTokenResponseConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.session.HttpSessionIdChangedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "4ecdecd0-4fe0-400e-b049-cd66138971f7",
    "objectives" : {
      "NumberOfConcerns" : 0.9996617050067659,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5520340958340618,
      "MetricsIntensity" : 0.053502301777950144,
      "Density" : 0.9966826391448581
    },
    "euclideanDistance" : 12.095466255869951,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6353071389042613,
      "LackOfCohesion" : 0.5520340958340618,
      "MetricsIntensity" : 0.05350230177795015,
      "Density" : 3.175572519083969
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.session.HttpSessionIdChangedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "c202cbcf-05ff-4c36-8e5e-94a98eb77db5",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5520465778911047,
      "MetricsIntensity" : 0.05349784390043477,
      "Density" : 0.9972355326207151
    },
    "euclideanDistance" : 12.095540341422726,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6358605423353627,
      "LackOfCohesion" : 0.5520465778911047,
      "MetricsIntensity" : 0.05349784390043478,
      "Density" : 3.1773341162654143
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.session.HttpSessionIdChangedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "4dfb4daf-7a07-47fa-8c7e-f2da33e3117f",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5526717609212684,
      "MetricsIntensity" : 0.053492358899471605,
      "Density" : 0.9957611500184298
    },
    "euclideanDistance" : 13.088079272211742,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6342003320420584,
      "LackOfCohesion" : 0.5526717609212684,
      "MetricsIntensity" : 0.0534923588994716,
      "Density" : 3.1707746478873235
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.oauth2.core.endpoint.MapOAuth2AccessTokenResponseConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.session.HttpSessionIdChangedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "c53ddce1-ae8d-4ab2-a000-dc0dc5d59681",
    "objectives" : {
      "NumberOfConcerns" : 0.9996617050067659,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5519618039203542,
      "MetricsIntensity" : 0.05345662762012116,
      "Density" : 0.9957611500184298
    },
    "euclideanDistance" : 13.088100826184316,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6353071389042617,
      "LackOfCohesion" : 0.5519618039203542,
      "MetricsIntensity" : 0.05345662762012117,
      "Density" : 3.1707746478873218
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.access.intercept.RequestKey'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "80290725-8f23-475d-ab46-c10182dd95b8",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5527019804469006,
      "MetricsIntensity" : 0.05347999459768372,
      "Density" : 0.9957611500184298
    },
    "euclideanDistance" : 13.088106323479312,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347537354731598,
      "LackOfCohesion" : 0.5527019804469006,
      "MetricsIntensity" : 0.05347999459768372,
      "Density" : 3.170774647887324
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.oauth2.core.endpoint.MapOAuth2AccessTokenResponseConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.session.HttpSessionIdChangedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "8f877589-500d-4a65-88d1-bb227c715122",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5526436362863283,
      "MetricsIntensity" : 0.05348299735668932,
      "Density" : 0.9959454478437154
    },
    "euclideanDistance" : 13.088117894969303,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.63475373547316,
      "LackOfCohesion" : 0.5526436362863283,
      "MetricsIntensity" : 0.05348299735668932,
      "Density" : 3.1713615023474184
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.oauth2.core.endpoint.MapOAuth2AccessTokenResponseConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.session.HttpSessionIdChangedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "e9b27760-2802-4111-816d-ef947bfcd059",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5520000302200485,
      "MetricsIntensity" : 0.05345662762012116,
      "Density" : 0.9953925543678585
    },
    "euclideanDistance" : 14.081797302173166,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347537354731598,
      "LackOfCohesion" : 0.5520000302200485,
      "MetricsIntensity" : 0.05345662762012116,
      "Density" : 3.169600938967136
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.access.intercept.RequestKey'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "6f46d85c-9ef8-41d3-8003-ba91d6c68722",
    "objectives" : {
      "NumberOfConcerns" : 0.9986468200270636,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5527316653389706,
      "MetricsIntensity" : 0.053479994597683725,
      "Density" : 0.9952082565425728
    },
    "euclideanDistance" : 15.0763426383434,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6336469286109572,
      "LackOfCohesion" : 0.5527316653389706,
      "MetricsIntensity" : 0.053479994597683725,
      "Density" : 3.169014084507042
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.oauth2.core.endpoint.MapOAuth2AccessTokenResponseConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.session.HttpSessionIdChangedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "b3ec2931-289a-4706-9c79-e135d1d961c3",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5519900185701286,
      "MetricsIntensity" : 0.05345662762012117,
      "Density" : 0.9952082565425728
    },
    "euclideanDistance" : 15.076360215361305,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347537354731592,
      "LackOfCohesion" : 0.5519900185701286,
      "MetricsIntensity" : 0.05345662762012117,
      "Density" : 3.169014084507043
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.access.intercept.RequestKey'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.core.context.SecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "d83d7abb-464c-48f8-96c5-e0084e322fe3",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5518635077211407,
      "MetricsIntensity" : 0.053461119465498586,
      "Density" : 0.9988942130482861
    },
    "euclideanDistance" : 15.076644224472174,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6358605423353632,
      "LackOfCohesion" : 0.5518635077211407,
      "MetricsIntensity" : 0.05346111946549859,
      "Density" : 3.182618907809748
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.access.intercept.RequestKey'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2Utils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "5f768734-fa5a-420c-bd9c-382788b298f0",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5519430808347902,
      "MetricsIntensity" : 0.05345312893032955,
      "Density" : 0.9946553630667158
    },
    "euclideanDistance" : 16.07155278598752,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6342003320420582,
      "LackOfCohesion" : 0.5519430808347902,
      "MetricsIntensity" : 0.05345312893032955,
      "Density" : 3.169113329418674
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2Utils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "87bd8587-1b84-42e6-83b4-59c94a90136e",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.551907584985074,
      "MetricsIntensity" : 0.053453128930329566,
      "Density" : 0.9948396608920015
    },
    "euclideanDistance" : 16.071584005568376,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347537354731596,
      "LackOfCohesion" : 0.551907584985074,
      "MetricsIntensity" : 0.053453128930329566,
      "Density" : 3.1697005284791544
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.core.context.SecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2Utils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "52dec557-bc91-4990-9462-086ae541ed16",
    "objectives" : {
      "NumberOfConcerns" : 0.9986468200270636,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.552695259339262,
      "MetricsIntensity" : 0.05347999459768372,
      "Density" : 0.9952082565425728
    },
    "euclideanDistance" : 16.071591928137018,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6336469286109572,
      "LackOfCohesion" : 0.552695259339262,
      "MetricsIntensity" : 0.05347999459768372,
      "Density" : 3.169014084507042
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.oauth2.core.endpoint.MapOAuth2AccessTokenResponseConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.session.HttpSessionIdChangedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "ac006301-ceb0-43ec-b330-cee3043896a2",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5519590734703762,
      "MetricsIntensity" : 0.05344860311709008,
      "Density" : 0.9950239587172871
    },
    "euclideanDistance" : 16.071597167929017,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347537354731596,
      "LackOfCohesion" : 0.5519590734703762,
      "MetricsIntensity" : 0.05344860311709007,
      "Density" : 3.1702877275396353
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.access.intercept.RequestKey'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.core.context.SecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "d2897b32-d37f-4c8c-a2ca-efb9fa5d4b23",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5517565186607721,
      "MetricsIntensity" : 0.0534719034529423,
      "Density" : 0.9955768521931441
    },
    "euclideanDistance" : 16.07162453041905,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.63475373547316,
      "LackOfCohesion" : 0.5517565186607721,
      "MetricsIntensity" : 0.053471903452942296,
      "Density" : 3.172049324721081
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.BCryptPasswordEncoder(BCryptVersion, SecureRandom)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "39dd6bcc-f41c-4cd8-8bad-0d4b94ed1286",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5517565186607722,
      "MetricsIntensity" : 0.053471903452942296,
      "Density" : 0.9955768521931441
    },
    "euclideanDistance" : 16.07162453041905,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347537354731596,
      "LackOfCohesion" : 0.5517565186607722,
      "MetricsIntensity" : 0.053471903452942296,
      "Density" : 3.172049324721081
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.BCryptPasswordEncoder(BCryptVersion, SecureRandom)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "58bec99b-0cb2-4b53-abb2-445cfe9baf84",
    "objectives" : {
      "NumberOfConcerns" : 0.9996617050067659,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5517210228110561,
      "MetricsIntensity" : 0.05346564527873803,
      "Density" : 0.9957611500184298
    },
    "euclideanDistance" : 16.07165574714005,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6353071389042615,
      "LackOfCohesion" : 0.5517210228110561,
      "MetricsIntensity" : 0.05346564527873804,
      "Density" : 3.172636523781561
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.BCryptPasswordEncoder(BCryptVersion, SecureRandom)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.core.context.SecurityContextHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "405aa919-9bda-49f2-9b23-455c948d913d",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5518534960712208,
      "MetricsIntensity" : 0.053461119465498586,
      "Density" : 0.9957611500184298
    },
    "euclideanDistance" : 16.07168132586963,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6358605423353623,
      "LackOfCohesion" : 0.5518534960712208,
      "MetricsIntensity" : 0.05346111946549858,
      "Density" : 3.1726365237815615
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.access.intercept.RequestKey'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.core.context.SecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2Utils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "d3353609-1255-411e-b91a-bb6cff918fb0",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5518721077098475,
      "MetricsIntensity" : 0.053478161627146546,
      "Density" : 0.998341319572429
    },
    "euclideanDistance" : 16.071778973947993,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.634200332042058,
      "LackOfCohesion" : 0.5518721077098475,
      "MetricsIntensity" : 0.053478161627146546,
      "Density" : 3.1808573106283022
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.BCryptPasswordEncoder(BCryptVersion, SecureRandom)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.core.context.SecurityContextHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "863f4a68-3803-4018-b592-475793c27786",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5519130458850302,
      "MetricsIntensity" : 0.053453128930329545,
      "Density" : 0.9946553630667158
    },
    "euclideanDistance" : 17.067359953974137,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6342003320420584,
      "LackOfCohesion" : 0.5519130458850302,
      "MetricsIntensity" : 0.053453128930329545,
      "Density" : 3.169113329418674
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.core.context.SecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2Utils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "cb3f900a-0770-4290-b756-80bd89477c57",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5519263080706384,
      "MetricsIntensity" : 0.053448603117090085,
      "Density" : 0.9950239587172871
    },
    "euclideanDistance" : 17.06740165810069,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347537354731598,
      "LackOfCohesion" : 0.5519263080706384,
      "MetricsIntensity" : 0.05344860311709008,
      "Density" : 3.1684272300469485
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.access.intercept.RequestKey'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.core.context.SecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "8e4a03bb-4f79-42c5-81ed-902da6565368",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5518177587531394,
      "MetricsIntensity" : 0.05347190345294228,
      "Density" : 0.9981570217471434
    },
    "euclideanDistance" : 17.06758116433604,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347537354731598,
      "LackOfCohesion" : 0.5518177587531394,
      "MetricsIntensity" : 0.05347190345294228,
      "Density" : 3.180270111567821
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.BCryptPasswordEncoder(BCryptVersion, SecureRandom)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.core.context.SecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2Utils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "d1740e71-3e66-402f-8e67-cd70eef22aa2",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5517383156609179,
      "MetricsIntensity" : 0.0534719034529423,
      "Density" : 0.998341319572429
    },
    "euclideanDistance" : 17.067589375233805,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347537354731594,
      "LackOfCohesion" : 0.5517383156609179,
      "MetricsIntensity" : 0.0534719034529423,
      "Density" : 3.1808573106283013
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.BCryptPasswordEncoder(BCryptVersion, SecureRandom)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2Utils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "d7621f0f-6a9e-4c2b-a79c-22cfb2e17c37",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5518171346502874,
      "MetricsIntensity" : 0.05346744557542695,
      "Density" : 0.998341319572429
    },
    "euclideanDistance" : 17.067591909405284,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347537354731596,
      "LackOfCohesion" : 0.5518171346502874,
      "MetricsIntensity" : 0.05346744557542695,
      "Density" : 3.1808573106283027
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.BCryptPasswordEncoder(BCryptVersion, SecureRandom)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.core.context.SecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2Utils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "4df35c19-d3dc-41a0-bcd6-172e20d60dcf",
    "objectives" : {
      "NumberOfConcerns" : 0.9986468200270636,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5518630062099202,
      "MetricsIntensity" : 0.05347677315034712,
      "Density" : 0.9950239587172871
    },
    "euclideanDistance" : 18.063631437019,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6336469286109572,
      "LackOfCohesion" : 0.5518630062099202,
      "MetricsIntensity" : 0.05347677315034713,
      "Density" : 3.1684272300469485
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.BCryptPasswordEncoder(BCryptVersion, SecureRandom)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.core.context.SecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2Utils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "9c229ae3-fcfa-4aab-be17-268e0158776a",
    "objectives" : {
      "NumberOfConcerns" : 0.9986468200270636,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5519035728953101,
      "MetricsIntensity" : 0.05347224733710766,
      "Density" : 0.9950239587172871
    },
    "euclideanDistance" : 18.063632663021618,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6336469286109572,
      "LackOfCohesion" : 0.5519035728953101,
      "MetricsIntensity" : 0.05347224733710767,
      "Density" : 3.1684272300469476
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.BCryptPasswordEncoder(BCryptVersion, SecureRandom)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.access.intercept.RequestKey'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.core.context.SecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2Utils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "61f14de1-00da-4000-878b-73748d225f2c",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5518161984960089,
      "MetricsIntensity" : 0.05344860311709005,
      "Density" : 0.9948396608920015
    },
    "euclideanDistance" : 18.063638478474196,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6342003320420582,
      "LackOfCohesion" : 0.5518161984960089,
      "MetricsIntensity" : 0.05344860311709006,
      "Density" : 3.167840375586854
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.BCryptPasswordEncoder(BCryptVersion, SecureRandom)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.access.intercept.RequestKey'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.core.context.SecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "8db8a63d-397f-4ea5-81fa-8ce392d15e8a",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5517210228110562,
      "MetricsIntensity" : 0.05347190345294228,
      "Density" : 0.998341319572429
    },
    "euclideanDistance" : 18.06384754141922,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347537354731594,
      "LackOfCohesion" : 0.5517210228110562,
      "MetricsIntensity" : 0.053471903452942275,
      "Density" : 3.180857310628302
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.BCryptPasswordEncoder(BCryptVersion, SecureRandom)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.core.context.SecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2Utils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "976680aa-90ea-4d12-b9c7-0e983e7ce67f",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.551761589496446,
      "MetricsIntensity" : 0.05346737763970284,
      "Density" : 0.998341319572429
    },
    "euclideanDistance" : 18.06384876708953,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347537354731594,
      "LackOfCohesion" : 0.551761589496446,
      "MetricsIntensity" : 0.05346737763970284,
      "Density" : 3.1808573106283022
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.BCryptPasswordEncoder(BCryptVersion, SecureRandom)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.access.intercept.RequestKey'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.core.context.SecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2Utils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "39f7f296-2687-4e80-b3ca-bffb3fe62f4e",
    "objectives" : {
      "NumberOfConcerns" : 0.9989851150202977,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5517374055109251,
      "MetricsIntensity" : 0.053453128930329545,
      "Density" : 0.9948396608920015
    },
    "euclideanDistance" : 19.060297705244484,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6342003320420586,
      "LackOfCohesion" : 0.5517374055109251,
      "MetricsIntensity" : 0.053453128930329545,
      "Density" : 3.1678403755868545
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.BCryptPasswordEncoder(BCryptVersion, SecureRandom)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.core.context.SecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2Utils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "6144f6ed-cab6-42ff-a30e-a7fd9f9f3d83",
    "objectives" : {
      "NumberOfConcerns" : 0.9993234100135318,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5520433516711121,
      "MetricsIntensity" : 0.05342573077629972,
      "Density" : 0.998341319572429
    },
    "euclideanDistance" : 19.060507308017797,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6347537354731596,
      "LackOfCohesion" : 0.5520433516711121,
      "MetricsIntensity" : 0.053425730776299724,
      "Density" : 3.1827262044653346
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.access.intercept.RequestKey'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.core.context.SecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2Utils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.session.HttpSessionIdChangedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "8400c41a-ddca-475b-86d9-2e84ad6906a3",
    "objectives" : {
      "NumberOfConcerns" : 0.9996617050067659,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5519951137214979,
      "MetricsIntensity" : 0.05342573077629974,
      "Density" : 0.9987099152230003
    },
    "euclideanDistance" : 19.06054296009175,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6353071389042622,
      "LackOfCohesion" : 0.5519951137214979,
      "MetricsIntensity" : 0.05342573077629973,
      "Density" : 3.1820317087492667
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.access.intercept.RequestKey'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2Utils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.session.HttpSessionIdChangedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "82f62c93-3e8c-464c-86a7-c7a4d37321f9",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5519596178717819,
      "MetricsIntensity" : 0.053419472602095494,
      "Density" : 0.9988942130482861
    },
    "euclideanDistance" : 19.06056931753812,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6358605423353627,
      "LackOfCohesion" : 0.5519596178717819,
      "MetricsIntensity" : 0.053419472602095494,
      "Density" : 3.182618907809748
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.access.intercept.RequestKey'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.core.context.SecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2Utils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.session.HttpSessionIdChangedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "4e325d0d-ba4c-4960-ae88-b4ab8b3cd493",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5519539914900087,
      "MetricsIntensity" : 0.05342753107298863,
      "Density" : 0.9992628086988573
    },
    "euclideanDistance" : 19.06058849748997,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.635860542335363,
      "LackOfCohesion" : 0.5519539914900087,
      "MetricsIntensity" : 0.05342753107298863,
      "Density" : 3.1837933059307106
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.access.intercept.RequestKey'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.core.context.SecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2Utils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.session.HttpSessionIdChangedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "a206b9c3-6ccb-488b-b6b8-8d5e4fb88ba6",
    "objectives" : {
      "NumberOfConcerns" : 0.9983085250338295,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5527170438384386,
      "MetricsIntensity" : 0.053478160333132775,
      "Density" : 0.9944710652414301
    },
    "euclideanDistance" : 20.057266729416042,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6330935251798564,
      "LackOfCohesion" : 0.5527170438384386,
      "MetricsIntensity" : 0.05347816033313277,
      "Density" : 3.168526130358192
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.access.intercept.RequestKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.oauth2.core.endpoint.MapOAuth2AccessTokenResponseConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.core.context.SecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2Utils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.session.HttpSessionIdChangedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "8a958bc9-b3a4-4aa5-90b7-ffc5cbb8c734",
    "objectives" : {
      "NumberOfConcerns" : 0.9996617050067659,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5519778208716363,
      "MetricsIntensity" : 0.05342573077629973,
      "Density" : 0.9987099152230003
    },
    "euclideanDistance" : 20.057524245097273,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6353071389042613,
      "LackOfCohesion" : 0.5519778208716363,
      "MetricsIntensity" : 0.053425730776299724,
      "Density" : 3.1820317087492658
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.access.intercept.RequestKey'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.core.context.SecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2Utils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.session.HttpSessionIdChangedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "99cef83c-4998-4d95-b269-f9a72edf9b51",
    "objectives" : {
      "NumberOfConcerns" : 0.9983085250338295,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5526749168959183,
      "MetricsIntensity" : 0.05347816033313276,
      "Density" : 0.9946553630667158
    },
    "euclideanDistance" : 21.054554582793507,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6330935251798564,
      "LackOfCohesion" : 0.5526749168959183,
      "MetricsIntensity" : 0.05347816033313277,
      "Density" : 3.1691133294186735
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(HttpMethod, DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.access.intercept.RequestKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.oauth2.core.endpoint.MapOAuth2AccessTokenResponseConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.core.context.SecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2Utils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.web.session.HttpSessionIdChangedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "2b38d47a-d378-4d91-b803-60b4a106597e",
    "objectives" : {
      "NumberOfConcerns" : 1.0006765899864682,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5537787995703326,
      "MetricsIntensity" : 0.053346620844548505,
      "Density" : 0.9976041282712864
    },
    "euclideanDistance" : 22.052348728770365,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.635157545605307,
      "LackOfCohesion" : 0.5537787995703326,
      "MetricsIntensity" : 0.0533466208445485,
      "Density" : 3.1729191090269637
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.getApplicationContext()', targetType='org.springframework.security.config.annotation.web.configurers.PasswordManagementConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.anyRequest()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.PreAuthorizeAuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='s101.S101Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer.PasswordCompareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer.PasswordCompareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer.PasswordCompareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer.PasswordCompareConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer.PasswordCompareConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpRequest(), org.springframework.security.web.FilterInvocation.getRequest(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getHttpResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.portResolver, org.springframework.security.web.access.channel.AbstractRetryEntryPoint.redirectStrategy, org.springframework.security.web.access.channel.AbstractRetryEntryPoint.logger], extractedMethods=[org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy(), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer), org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.determineTargetUrl(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getRedirectStrategy()', targetType='org.springframework.security.web.session.HttpSessionIdChangedEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  }, {
    "solutionId" : "5e8192c3-4b1d-4a21-a21d-d7b94cd02a89",
    "objectives" : {
      "NumberOfConcerns" : 1.000338294993234,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5518568394793576,
      "MetricsIntensity" : 0.05341326457092569,
      "Density" : 0.9957611500184298
    },
    "euclideanDistance" : 24.047860942720632,
    "generation" : 1,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.636413945766464,
      "LackOfCohesion" : 0.5518568394793576,
      "MetricsIntensity" : 0.05341326457092569,
      "Density" : 3.1707746478873235
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.init(FilterConfig)', targetType='org.springframework.security.web.server.header.StrictTransportSecurityServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.token.Sha512DigestUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.oauth2.client.OAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.crypto.codec.Hex'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.crypto.codec.Hex'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry.dispatcherTypeMatchers(DispatcherType...)', targetType='org.springframework.gradle.maven.MavenPublishingConventionsPlugin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.getSalt(), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence), org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>)', targetType='org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.authorize(OAuth2AuthorizeRequest)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.TrustedIssuerJwtAuthenticationManagerResolver'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.access.intercept.RequestKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getRequest()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.SecretKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.core.context.SecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.commence(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.logger', targetTypeName='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.PublicKeyReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setPortResolver(PortResolver)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2Utils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortResolver()', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.Saml2Utils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpsRedirectSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      } ]
    } ]
  } ]
}