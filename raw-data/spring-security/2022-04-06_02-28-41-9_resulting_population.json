{
  "executionId" : "a9f9fb55-d840-4612-aa6b-4f3a7d3c183c",
  "computingTime" : 11426,
  "maxEvaluations" : 1000,
  "initialPopulationSize" : 50,
  "finalPopulationSize" : 34,
  "algorithm" : "Baseline",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2359813084112146,
    "meanNumConcerns" : 1.6459833795013852,
    "meanMetricsIntensity" : 0.053565974990151706,
    "meanLackOfCohesion" : 0.5516677364702989
  },
  "population" : [ {
    "solutionId" : "c365861d-ba64-4e09-b0c6-641ef93bfe41",
    "objectives" : {
      "NumberOfConcerns" : 1.002019522046449,
      "NumberOfRefactorings" : 3.0,
      "LackOfCohesion" : 0.5531773980294643,
      "MetricsIntensity" : 0.05345318862122457,
      "Density" : 1.0001805054151625
    },
    "euclideanDistance" : 3.3635199780942506,
    "generation" : 0,
    "numberOfRefactorings" : 3,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6465707964601768,
      "LackOfCohesion" : 0.5531773980294643,
      "MetricsIntensity" : 0.05345318862122457,
      "Density" : 3.2309037900874626,
      "baselineType" : "EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.clientRegistrationRepository, org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.authenticationRequest(ServerWebExchange, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.<T>oauth2AuthorizationException(String), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()]"
      } ]
    } ]
  }, {
    "solutionId" : "6bc94669-c98a-4185-9dd8-739319168db6",
    "objectives" : {
      "NumberOfConcerns" : 0.999326825984517,
      "NumberOfRefactorings" : 6.0,
      "LackOfCohesion" : 0.5515935586462626,
      "MetricsIntensity" : 0.05353345312429014,
      "Density" : 0.9987364620938628
    },
    "euclideanDistance" : 6.188961941262162,
    "generation" : 0,
    "numberOfRefactorings" : 6,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6448753462603876,
      "LackOfCohesion" : 0.5515935586462626,
      "MetricsIntensity" : 0.05353345312429014,
      "Density" : 3.231892523364486,
      "baselineType" : "MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    } ]
  }, {
    "solutionId" : "a718b23a-bf0d-4bd6-b0b2-90cbe047b3c9",
    "objectives" : {
      "NumberOfConcerns" : 1.004039044092898,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5548052887356051,
      "MetricsIntensity" : 0.0530883659060355,
      "Density" : 0.9994584837545126
    },
    "euclideanDistance" : 10.115218185774117,
    "generation" : 0,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.643526170798898,
      "LackOfCohesion" : 0.5548052887356051,
      "MetricsIntensity" : 0.0530883659060355,
      "Density" : 3.2210587550901684,
      "baselineType" : "CONCERN_EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "f4a64566-7daf-4a49-a8e3-0439e044d0a4",
    "objectives" : {
      "NumberOfConcerns" : 1.0023561090541906,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5536314270437283,
      "MetricsIntensity" : 0.05332001104759347,
      "Density" : 0.9987364620938628
    },
    "euclideanDistance" : 11.1045730701663,
    "generation" : 0,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6443953616786309,
      "LackOfCohesion" : 0.5536314270437283,
      "MetricsIntensity" : 0.05332001104759347,
      "Density" : 3.224358974358974,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.clientRegistrationRepository, org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.authenticationRequest(ServerWebExchange, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.<T>oauth2AuthorizationException(String), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "d421f1a5-ed4f-4ba3-90b4-4685a15137b3",
    "objectives" : {
      "NumberOfConcerns" : 1.0037024570851565,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5536933419858389,
      "MetricsIntensity" : 0.053246620796528386,
      "Density" : 1.0001805054151625
    },
    "euclideanDistance" : 14.082513667146111,
    "generation" : 0,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6447876447876448,
      "LackOfCohesion" : 0.5536933419858389,
      "MetricsIntensity" : 0.05324662079652839,
      "Density" : 3.225261932479629,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.clientRegistrationRepository, org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.authenticationRequest(ServerWebExchange, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.<T>oauth2AuthorizationException(String), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='s101.S101PluginExtension'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "7cd3627c-bc50-48a6-afb7-a77fd05b98d1",
    "objectives" : {
      "NumberOfConcerns" : 1.0037024570851565,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5539352492416538,
      "MetricsIntensity" : 0.05328674030551507,
      "Density" : 1.0005415162454874
    },
    "euclideanDistance" : 14.082548976841318,
    "generation" : 0,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6456953642384107,
      "LackOfCohesion" : 0.5539352492416538,
      "MetricsIntensity" : 0.05328674030551507,
      "Density" : 3.226426076833528,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.clientRegistrationRepository, org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.authenticationRequest(ServerWebExchange, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.<T>oauth2AuthorizationException(String), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='s101.S101PluginExtension'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()]"
      } ]
    } ]
  }, {
    "solutionId" : "57cbd9c8-e99f-498c-81ef-11c9fdcb3e97",
    "objectives" : {
      "NumberOfConcerns" : 1.001346348030966,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5532138240106329,
      "MetricsIntensity" : 0.05329511609750749,
      "Density" : 0.9987364620938628
    },
    "euclideanDistance" : 15.076772032962063,
    "generation" : 0,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6436464088397793,
      "LackOfCohesion" : 0.5532138240106329,
      "MetricsIntensity" : 0.05329511609750749,
      "Density" : 3.2262390670553933,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='s101.S101PluginExtension'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "5d592a14-c0e9-46be-a014-91979a286b9a",
    "objectives" : {
      "NumberOfConcerns" : 1.003365870077415,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5542836054358622,
      "MetricsIntensity" : 0.05328674030551507,
      "Density" : 1.0001805054151625
    },
    "euclideanDistance" : 16.07224856404965,
    "generation" : 0,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6451434878587203,
      "LackOfCohesion" : 0.5542836054358622,
      "MetricsIntensity" : 0.05328674030551507,
      "Density" : 3.225261932479628,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.clientRegistrationRepository, org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.authenticationRequest(ServerWebExchange, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.<T>oauth2AuthorizationException(String), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FeaturePolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='s101.S101PluginExtension'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()]"
      } ]
    } ]
  }, {
    "solutionId" : "c4dfc190-a7d0-4962-b661-cd189cf619a2",
    "objectives" : {
      "NumberOfConcerns" : 1.0010097610232245,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5548564220922527,
      "MetricsIntensity" : 0.05334672226425236,
      "Density" : 0.9978339350180505
    },
    "euclideanDistance" : 17.067759215124017,
    "generation" : 0,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6421866372170073,
      "LackOfCohesion" : 0.5548564220922527,
      "MetricsIntensity" : 0.05334672226425236,
      "Density" : 3.221445221445221,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.clientRegistrationRepository, org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.authenticationRequest(ServerWebExchange, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.<T>oauth2AuthorizationException(String), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer.PasswordCompareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.web.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.server.authentication.AnonymousAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.server.authentication.AnonymousAuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "4b2c4128-9d2f-47e9-b6f2-8beb89aa80cf",
    "objectives" : {
      "NumberOfConcerns" : 1.001346348030966,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5548976031661239,
      "MetricsIntensity" : 0.05246425364065237,
      "Density" : 0.9978339350180505
    },
    "euclideanDistance" : 17.06777756236875,
    "generation" : 0,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6418322295805743,
      "LackOfCohesion" : 0.5548976031661239,
      "MetricsIntensity" : 0.05246425364065237,
      "Density" : 3.221445221445221,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.clientRegistrationRepository, org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.authenticationRequest(ServerWebExchange, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.<T>oauth2AuthorizationException(String), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "946e0367-228c-46b9-87de-f225f1bf94e8",
    "objectives" : {
      "NumberOfConcerns" : 1.0023561090541906,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5548369608063306,
      "MetricsIntensity" : 0.0532048254975507,
      "Density" : 0.9994584837545126
    },
    "euclideanDistance" : 17.06793220740697,
    "generation" : 0,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6434878587196469,
      "LackOfCohesion" : 0.5548369608063306,
      "MetricsIntensity" : 0.053204825497550706,
      "Density" : 3.2229336437718277,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.ldap.server.UnboundIdContainer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FeaturePolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='s101.S101PluginExtension'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()]"
      } ]
    } ]
  }, {
    "solutionId" : "0e07ca65-7f38-4105-8841-5001f5ce655a",
    "objectives" : {
      "NumberOfConcerns" : 1.0010097610232245,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5544869138529048,
      "MetricsIntensity" : 0.05328160812452857,
      "Density" : 0.9956678700361011
    },
    "euclideanDistance" : 18.063877482879597,
    "generation" : 0,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6430939226519339,
      "LackOfCohesion" : 0.5544869138529048,
      "MetricsIntensity" : 0.05328160812452857,
      "Density" : 3.2163265306122453,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.ParameterRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.messaging.util.matcher.SimpMessageTypeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.authorization.method.SecuredAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.authentication.OAuth2LoginReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.core.session.SessionRegistryImpl'"
      } ]
    } ]
  }, {
    "solutionId" : "bd66884a-e5a7-44f7-a483-79b692fb59df",
    "objectives" : {
      "NumberOfConcerns" : 1.0003365870077414,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5545667247131987,
      "MetricsIntensity" : 0.053318035945321474,
      "Density" : 0.9969314079422382
    },
    "euclideanDistance" : 18.06391243846593,
    "generation" : 0,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.641082274986195,
      "LackOfCohesion" : 0.5545667247131987,
      "MetricsIntensity" : 0.053318035945321474,
      "Density" : 3.218531468531469,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FeaturePolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer.PasswordCompareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.web.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.server.authentication.AnonymousAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.server.authentication.AnonymousAuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "c96e4ac1-8909-4af9-8926-51c98ff086ea",
    "objectives" : {
      "NumberOfConcerns" : 1.0003365870077414,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5538279006389569,
      "MetricsIntensity" : 0.05260796546258744,
      "Density" : 0.9978339350180505
    },
    "euclideanDistance" : 18.063937521779028,
    "generation" : 0,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.641988950276243,
      "LackOfCohesion" : 0.5538279006389569,
      "MetricsIntensity" : 0.05260796546258743,
      "Density" : 3.2233236151603495,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.ldap.server.UnboundIdContainer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()]"
      } ]
    } ]
  }, {
    "solutionId" : "6662157c-d7ab-4f84-adbc-4a5ae19b5b22",
    "objectives" : {
      "NumberOfConcerns" : 1.001346348030966,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5549840411748317,
      "MetricsIntensity" : 0.053217437687078095,
      "Density" : 0.9953068592057762
    },
    "euclideanDistance" : 20.057521522718847,
    "generation" : 0,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6418322295805738,
      "LackOfCohesion" : 0.5549840411748317,
      "MetricsIntensity" : 0.053217437687078095,
      "Density" : 3.2132867132867133,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FeaturePolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.ParameterRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.messaging.util.matcher.SimpMessageTypeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.authorization.method.SecuredAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.authentication.OAuth2LoginReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.core.session.SessionRegistryImpl'"
      } ]
    } ]
  }, {
    "solutionId" : "e4bbf5d9-73c1-47b1-910f-a349d8023cf9",
    "objectives" : {
      "NumberOfConcerns" : 1.0003365870077414,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5531621600185771,
      "MetricsIntensity" : 0.05266234224385915,
      "Density" : 0.9981949458483754
    },
    "euclideanDistance" : 22.052342917132197,
    "generation" : 0,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6428966279712554,
      "LackOfCohesion" : 0.5531621600185771,
      "MetricsIntensity" : 0.052662342243859156,
      "Density" : 3.224489795918368,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FeaturePolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='s101.S101PluginExtension'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()]"
      } ]
    } ]
  }, {
    "solutionId" : "1978cb9a-177f-4247-9a7c-26c7593cc920",
    "objectives" : {
      "NumberOfConcerns" : 1.0010097610232245,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5559605109207623,
      "MetricsIntensity" : 0.052454527049468555,
      "Density" : 0.997653429602888
    },
    "euclideanDistance" : 22.05241883500251,
    "generation" : 0,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6403750689464978,
      "LackOfCohesion" : 0.5559605109207623,
      "MetricsIntensity" : 0.052454527049468555,
      "Density" : 3.217112922002328,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.clientRegistrationRepository, org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.authenticationRequest(ServerWebExchange, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.<T>oauth2AuthorizationException(String), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer.PasswordCompareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.web.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.server.authentication.AnonymousAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.server.authentication.AnonymousAuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "fd0dc096-3e2b-4d5f-a40c-2a6b0f259346",
    "objectives" : {
      "NumberOfConcerns" : 0.9996634129922585,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5536701577533417,
      "MetricsIntensity" : 0.0525725239256146,
      "Density" : 0.997653429602888
    },
    "euclideanDistance" : 23.050031536176522,
    "generation" : 0,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.641791044776119,
      "LackOfCohesion" : 0.5536701577533417,
      "MetricsIntensity" : 0.052572523925614595,
      "Density" : 3.2208624708624707,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.ldap.server.UnboundIdContainer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FeaturePolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='s101.S101PluginExtension'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()]"
      } ]
    } ]
  }, {
    "solutionId" : "55182e14-517b-43b5-8c73-d2fa9c3b799b",
    "objectives" : {
      "NumberOfConcerns" : 0.999326825984517,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5530056988623461,
      "MetricsIntensity" : 0.05343152373882715,
      "Density" : 0.9951263537906138
    },
    "euclideanDistance" : 24.047819044475617,
    "generation" : 0,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6421460176991147,
      "LackOfCohesion" : 0.5530056988623461,
      "MetricsIntensity" : 0.05343152373882715,
      "Density" : 3.218330414477525,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.ldap.server.UnboundIdContainer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='s101.S101PluginExtension'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.ParameterRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.messaging.util.matcher.SimpMessageTypeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.authorization.method.SecuredAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.authentication.OAuth2LoginReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.core.session.SessionRegistryImpl'"
      } ]
    } ]
  }, {
    "solutionId" : "7d79b04e-6388-4591-af49-561f06105a7b",
    "objectives" : {
      "NumberOfConcerns" : 0.9996634129922585,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5529178894119199,
      "MetricsIntensity" : 0.05339170326678661,
      "Density" : 0.9954873646209387
    },
    "euclideanDistance" : 24.047845868160515,
    "generation" : 0,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6426991150442476,
      "LackOfCohesion" : 0.5529178894119199,
      "MetricsIntensity" : 0.05339170326678661,
      "Density" : 3.2176196032672126,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.ldap.server.UnboundIdContainer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='s101.S101PluginExtension'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.ParameterRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.messaging.util.matcher.SimpMessageTypeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.authorization.method.SecuredAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.authentication.OAuth2LoginReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.core.session.SessionRegistryImpl'"
      } ]
    } ]
  }, {
    "solutionId" : "f57ef147-d839-436c-a650-25cbe8504dd4",
    "objectives" : {
      "NumberOfConcerns" : 0.999326825984517,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5533123484813727,
      "MetricsIntensity" : 0.053429975380598356,
      "Density" : 0.9947653429602888
    },
    "euclideanDistance" : 25.0459022897946,
    "generation" : 0,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6421460176991147,
      "LackOfCohesion" : 0.5533123484813727,
      "MetricsIntensity" : 0.05342997538059836,
      "Density" : 3.215285880980164,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.ldap.server.UnboundIdContainer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FeaturePolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='s101.S101PluginExtension'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.ParameterRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.messaging.util.matcher.SimpMessageTypeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.authorization.method.SecuredAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.authentication.OAuth2LoginReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.core.session.SessionRegistryImpl'"
      } ]
    } ]
  }, {
    "solutionId" : "c6b4a683-7e30-4787-bebc-686a02079dba",
    "objectives" : {
      "NumberOfConcerns" : 1.0010097610232245,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5539174405742888,
      "MetricsIntensity" : 0.05336882820147117,
      "Density" : 0.9985559566787003
    },
    "euclideanDistance" : 25.046133579917644,
    "generation" : 0,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6430939226519337,
      "LackOfCohesion" : 0.5539174405742888,
      "MetricsIntensity" : 0.05336882820147117,
      "Density" : 3.2256559766763844,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.clientRegistrationRepository, org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.authenticationRequest(ServerWebExchange, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.<T>oauth2AuthorizationException(String), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FeaturePolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.oauth2.server.resource.authentication.DelegatingJwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.JwtSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.JwtSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientRowMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientRowMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientRowMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='s101.S101PluginExtension'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "96a78de3-3cee-41ea-9fa2-6321261ffb9f",
    "objectives" : {
      "NumberOfConcerns" : 1.002019522046449,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5558565098157556,
      "MetricsIntensity" : 0.053277857263892045,
      "Density" : 0.9998194945848375
    },
    "euclideanDistance" : 26.0444907251782,
    "generation" : 0,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6429359823399554,
      "LackOfCohesion" : 0.5558565098157556,
      "MetricsIntensity" : 0.05327785726389204,
      "Density" : 3.2240977881257273,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.clientRegistrationRepository, org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.authenticationRequest(ServerWebExchange, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.<T>oauth2AuthorizationException(String), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.oauth2.server.resource.authentication.DelegatingJwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.JwtSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.JwtSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientRowMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientRowMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientRowMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer.PasswordCompareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.web.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.server.authentication.AnonymousAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.server.authentication.AnonymousAuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()]"
      } ]
    } ]
  }, {
    "solutionId" : "b81a6cb8-6eac-4e0a-8153-7e7576a2cad1",
    "objectives" : {
      "NumberOfConcerns" : 0.9983170649612925,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5535957025898777,
      "MetricsIntensity" : 0.0526994754553335,
      "Density" : 0.9971119133574007
    },
    "euclideanDistance" : 28.04104339297294,
    "generation" : 0,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6404867256637163,
      "LackOfCohesion" : 0.5535957025898777,
      "MetricsIntensity" : 0.0526994754553335,
      "Density" : 3.2209912536443155,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.ldap.server.UnboundIdContainer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='s101.S101PluginExtension'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer.PasswordCompareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.web.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.server.authentication.AnonymousAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.server.authentication.AnonymousAuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()]"
      } ]
    } ]
  }, {
    "solutionId" : "140f480a-06b5-4028-ae64-11de0b5beaba",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5553861075037914,
      "MetricsIntensity" : 0.05333379876802071,
      "Density" : 0.997653429602888
    },
    "euclideanDistance" : 28.041159223329153,
    "generation" : 0,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.642343836373687,
      "LackOfCohesion" : 0.5553861075037914,
      "MetricsIntensity" : 0.05333379876802072,
      "Density" : 3.222740524781341,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.clientRegistrationRepository, org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.authenticationRequest(ServerWebExchange, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.<T>oauth2AuthorizationException(String), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FeaturePolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.config.annotation.web.configurers.CorsConfigurer.MvcCorsFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SpringAntMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SpringAntMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.messaging.web.csrf.CsrfChannelInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.messaging.web.csrf.CsrfChannelInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.messaging.web.csrf.CsrfChannelInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.messaging.web.csrf.CsrfChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='s101.S101PluginExtension'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "13c67c4a-931e-4965-8e3d-6f1a409e676b",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5542548271349454,
      "MetricsIntensity" : 0.053426948551585536,
      "Density" : 0.9989169675090253
    },
    "euclideanDistance" : 31.037201677345386,
    "generation" : 0,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.642343836373688,
      "LackOfCohesion" : 0.5542548271349454,
      "MetricsIntensity" : 0.05342694855158554,
      "Density" : 3.2249417249417256,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FeaturePolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.oauth2.server.resource.authentication.DelegatingJwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.JwtSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.JwtSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientRowMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientRowMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientRowMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.permitAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.rememberMe, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.denyAll, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.fullyAuthenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anonymous, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.type, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.authenticated, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.delegate, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pattern, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.messageMatchers, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasRole(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyRole(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='s101.S101PluginExtension'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer.PasswordCompareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.web.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.server.authentication.AnonymousAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.server.authentication.AnonymousAuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()]"
      } ]
    } ]
  }, {
    "solutionId" : "6846cb76-ef95-4f4b-81eb-13915d059815",
    "objectives" : {
      "NumberOfConcerns" : 1.000673174015483,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5550416901979681,
      "MetricsIntensity" : 0.05251957163673614,
      "Density" : 0.9985559566787003
    },
    "euclideanDistance" : 32.03606234204003,
    "generation" : 0,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6416344561016014,
      "LackOfCohesion" : 0.5550416901979681,
      "MetricsIntensity" : 0.05251957163673614,
      "Density" : 3.221898660454281,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.config.annotation.web.configurers.CorsConfigurer.MvcCorsFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SpringAntMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SpringAntMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.messaging.web.csrf.CsrfChannelInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.messaging.web.csrf.CsrfChannelInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.messaging.web.csrf.CsrfChannelInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.messaging.web.csrf.CsrfChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='s101.S101PluginExtension'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()]"
      } ]
    } ]
  }, {
    "solutionId" : "90126d42-5826-4ee9-b068-4e13026adb67",
    "objectives" : {
      "NumberOfConcerns" : 0.9976438909458095,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5545994615048179,
      "MetricsIntensity" : 0.05258017342321971,
      "Density" : 0.9935018050541516
    },
    "euclideanDistance" : 37.03096926097298,
    "generation" : 0,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6384742951907134,
      "LackOfCohesion" : 0.5545994615048179,
      "MetricsIntensity" : 0.05258017342321971,
      "Density" : 3.2093294460641406,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FeaturePolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='s101.S101PluginExtension'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer.PasswordCompareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.web.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.server.authentication.AnonymousAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.server.authentication.AnonymousAuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.ParameterRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.messaging.util.matcher.SimpMessageTypeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.authorization.method.SecuredAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.authentication.OAuth2LoginReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.core.session.SessionRegistryImpl'"
      } ]
    } ]
  }, {
    "solutionId" : "3b09fa55-2d68-497f-8660-b3ff77327fb4",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5546106869497609,
      "MetricsIntensity" : 0.053369312046273314,
      "Density" : 0.9989169675090253
    },
    "euclideanDistance" : 37.031179786843474,
    "generation" : 0,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.642343836373687,
      "LackOfCohesion" : 0.5546106869497609,
      "MetricsIntensity" : 0.053369312046273314,
      "Density" : 3.2268221574344027,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationResponseUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository, org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager], extractedMethods=[org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable(), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity), org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FeaturePolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.oauth2.server.resource.authentication.DelegatingJwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.JwtSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.JwtSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientRowMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientRowMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientRowMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.config.annotation.web.configurers.CorsConfigurer.MvcCorsFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SpringAntMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SpringAntMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.messaging.web.csrf.CsrfChannelInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.messaging.web.csrf.CsrfChannelInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.messaging.web.csrf.CsrfChannelInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.messaging.web.csrf.CsrfChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='s101.S101PluginExtension'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER, org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger], extractedMethods=[org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice(), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation), org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()]"
      } ]
    } ]
  }, {
    "solutionId" : "fe21edea-530c-4626-98d2-a5f835b8cf72",
    "objectives" : {
      "NumberOfConcerns" : 0.999326825984517,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.556146097468898,
      "MetricsIntensity" : 0.05257942709276975,
      "Density" : 0.9949458483754513
    },
    "euclideanDistance" : 39.029484168051916,
    "generation" : 0,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6394257316399778,
      "LackOfCohesion" : 0.556146097468898,
      "MetricsIntensity" : 0.05257942709276974,
      "Density" : 3.212121212121213,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.clientRegistrationRepository, org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.authenticationRequest(ServerWebExchange, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.<T>oauth2AuthorizationException(String), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.oauth2.server.resource.authentication.DelegatingJwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.JwtSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.JwtSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientRowMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientRowMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientRowMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher, org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.defaultPathMatcher], extractedMethods=[org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured(), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...), org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.passwordParameter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.usernameParameter], extractedMethods=[org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer.PasswordCompareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.web.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.server.authentication.AnonymousAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.server.authentication.AnonymousAuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.ParameterRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.messaging.util.matcher.SimpMessageTypeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.authorization.method.SecuredAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.authentication.OAuth2LoginReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.core.session.SessionRegistryImpl'"
      } ]
    } ]
  }, {
    "solutionId" : "a1311e72-0374-4521-829b-bbfd199eb01d",
    "objectives" : {
      "NumberOfConcerns" : 0.998653651969034,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5532278428311704,
      "MetricsIntensity" : 0.05262563786089903,
      "Density" : 0.9949458483754513
    },
    "euclideanDistance" : 40.02869042151685,
    "generation" : 0,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6401326699834164,
      "LackOfCohesion" : 0.5532278428311704,
      "MetricsIntensity" : 0.05262563786089903,
      "Density" : 3.215869311551925,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FeaturePolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.provisioning.MutableUser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.oauth2.server.resource.authentication.DelegatingJwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.rsocket.authentication.AnonymousPayloadInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.JwtSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.JwtSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientRowMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientRowMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientRowMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.messaging.util.matcher.MessageMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='s101.S101PluginExtension'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.core.userdetails.User.UserBuilder.username, org.springframework.security.core.userdetails.User.UserBuilder.accountExpired, org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder, org.springframework.security.core.userdetails.User.UserBuilder.password, org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired, org.springframework.security.core.userdetails.User.UserBuilder.accountLocked], extractedMethods=[org.springframework.security.core.userdetails.User.UserBuilder.username(String), org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>), org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean), org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean), org.springframework.security.core.userdetails.User.UserBuilder.password(String), org.springframework.security.core.userdetails.User.UserBuilder.build()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.ParameterRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.messaging.util.matcher.SimpMessageTypeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.authorization.method.SecuredAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.authentication.OAuth2LoginReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.core.session.SessionRegistryImpl'"
      } ]
    } ]
  }, {
    "solutionId" : "471053df-8dd5-47d5-8afc-c03b8f99b92e",
    "objectives" : {
      "NumberOfConcerns" : 0.999326825984517,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5549998991271142,
      "MetricsIntensity" : 0.052650658139423545,
      "Density" : 0.9953068592057762
    },
    "euclideanDistance" : 40.0287407599708,
    "generation" : 0,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6412382531785514,
      "LackOfCohesion" : 0.5549998991271142,
      "MetricsIntensity" : 0.052650658139423545,
      "Density" : 3.215160349854227,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.clientRegistrationRepository, org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.authenticationRequest(ServerWebExchange, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.<T>oauth2AuthorizationException(String), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.OAuth2ClasspathGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurity.BasicAuthenticationSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.acls.jdbc.AclClassIdUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.useEquals, org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger], extractedMethods=[org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange), org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.core.Authentication'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.config.annotation.web.configurers.CorsConfigurer.MvcCorsFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SpringAntMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SpringAntMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.messaging.web.csrf.CsrfChannelInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.messaging.web.csrf.CsrfChannelInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.messaging.web.csrf.CsrfChannelInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.messaging.web.csrf.CsrfChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='s101.S101PluginExtension'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.authorities(String...)', targetType='org.springframework.security.core.authority.AuthorityUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.ParameterRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.messaging.util.matcher.SimpMessageTypeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.authorization.method.SecuredAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.authentication.OAuth2LoginReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.core.session.SessionRegistryImpl'"
      } ]
    } ]
  }, {
    "solutionId" : "fbaeb65e-f914-4622-8668-18e6e451e8bf",
    "objectives" : {
      "NumberOfConcerns" : 0.9983170649612925,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5572946228038507,
      "MetricsIntensity" : 0.05335744564042787,
      "Density" : 0.9944043321299639
    },
    "euclideanDistance" : 42.02735896117627,
    "generation" : 0,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6395798783858484,
      "LackOfCohesion" : 0.5572946228038507,
      "MetricsIntensity" : 0.05335744564042786,
      "Density" : 3.212244897959184,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.clientRegistrationRepository, org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.CLIENT_REGISTRATION_NOT_FOUND_ERROR_CODE], extractedMethods=[org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.authenticationRequest(ServerWebExchange, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.<T>oauth2AuthorizationException(String), org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HeaderSpec.FeaturePolicySpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.authenticated, org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.toString(), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.getName(), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean), org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.config.annotation.web.configurers.CorsConfigurer.MvcCorsFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.authentication.LockedException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SpringAntMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SpringAntMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.LazyPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.web.util.matcher.AntPathRequestMatcher.SubpathMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.acls.model.NotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.messaging.web.csrf.CsrfChannelInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.messaging.web.csrf.CsrfChannelInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.messaging.web.csrf.CsrfChannelInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.messaging.web.csrf.CsrfChannelInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.logout.LogoutFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='s101.S101PluginExtension'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer.PasswordCompareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.authorization.method.PreFilterAuthorizationMethodInterceptor.PreFilterExpressionAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.oauth2.client.web.OAuth2AuthorizationResponseUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.web.server.authentication.AnonymousAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.web.server.authentication.AnonymousAuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.ParameterRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.savedrequest.SimpleSavedRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.messaging.util.matcher.SimpMessageTypeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.authorization.method.SecuredAuthorizationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.authentication.OAuth2LoginReactiveAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.core.session.SessionRegistryImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.core.session.SessionRegistryImpl'"
      } ]
    } ]
  }, {
    "solutionId" : "ea4b15ae-6c9e-4e3f-90c7-338cd581464d",
    "objectives" : {
      "NumberOfConcerns" : 0.991248737798721,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 0.5529947947248317,
      "MetricsIntensity" : 0.05280672719437551,
      "Density" : 0.9924187725631769
    },
    "euclideanDistance" : 57.019961950826946,
    "generation" : 0,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6315789473684208,
      "LackOfCohesion" : 0.5529947947248317,
      "MetricsIntensity" : 0.052806727194375506,
      "Density" : 3.2133255406195205,
      "baselineType" : "CONCERN_MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.convertResponse(ServerWebExchange)', targetType='org.springframework.security.saml2.provider.service.web.authentication.logout.OpenSamlSigningUtils.QueryParametersPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter.setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<OAuth2AuthorizationRequest>)', targetType='org.springframework.security.oauth2.jwt.SupplierJwtDecoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.securityContextRepository(ServerSecurityContextRepository)', targetType='org.springframework.security.web.context.HttpSessionSecurityContextRepository.SaveToSessionResponseWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.and()', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.disable()', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.defaultSuccessHandler', targetTypeName='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.web.server.ServerHttpSecurity.FormLoginSpec.isEntryPointExplicit', targetTypeName='org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.vote.ConsensusBased",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.vote.ConsensusBased.setAllowIfEqualGrantedDeniedDecisions(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.crypto.password.DelegatingPasswordEncoder.UnmappedIdPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.HttpBasicSpec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.logger', targetTypeName='org.springframework.security.config.web.server.ServerHttpSecurity.HttpBasicSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getDetails()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AccessTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities()', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.toString()', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.getName()', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.ConnectionInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.equals(Object)', targetType='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.DefaultContextAttributesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.setAuthenticated(boolean)', targetType='org.springframework.security.taglibs.TagLibConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.AbstractAuthenticationToken.isAuthenticated()', targetType='org.springframework.security.taglibs.TagLibConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.AbstractAuthenticationToken.authenticated', targetTypeName='org.springframework.security.taglibs.TagLibConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.matchers(MessageMatcher<?>...)', targetType='org.springframework.security.web.util.matcher.RequestMatcherEditor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(String)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestPathMatcher(PathMatcher)', targetType='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.pathMatcher', targetTypeName='org.springframework.security.config.http.OAuth2ResourceServerBeanDefinitionParser.NimbusJwtDecoderJwkSetUriFactoryBean'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpTypeMatchers(SimpMessageType...)', targetType='org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.nullDestMatcher()', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpMessageDestMatchers(String...)', targetType='org.springframework.security.core.userdetails.memory.UserAttributeEditor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.createMetadataSource()', targetType='org.springframework.security.core.userdetails.memory.UserAttributeEditor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.anyMessage()', targetType='org.springframework.security.core.userdetails.memory.UserAttributeEditor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(SimpMessageType, String...)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpSubscribeDestMatchers(String...)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.simpDestMatchers(String...)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.isSimpDestPathMatcherConfigured()', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPostOnly(boolean)', targetType='org.springframework.security.authentication.RememberMeAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getPasswordParameter()', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setPasswordParameter(String)', targetType='org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.getUsernameParameter()', targetType='org.springframework.security.config.annotation.web.configuration.AutowiredWebSecurityConfigurersIgnoreParents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.setUsernameParameter(String)', targetType='org.springframework.security.config.annotation.web.configuration.AutowiredWebSecurityConfigurersIgnoreParents'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.userdetails.User.UserBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountLocked(boolean)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.password(String)', targetType='org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityAspectJAutoProxyRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.passwordEncoder(Function<String,String>)', targetType='org.springframework.security.web.csrf.CsrfFilter.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.username(String)', targetType='org.springframework.security.web.server.ServerFormLoginAuthenticationConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.build()', targetType='org.springframework.security.rsocket.core.DefaultPayloadExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.credentialsExpired(boolean)', targetType='org.springframework.security.oauth2.jwt.JoseHeader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.userdetails.User.UserBuilder.accountExpired(boolean)', targetType='org.springframework.security.oauth2.jwt.JoseHeader'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.ldap.ppolicy.PasswordPolicyResponseControl.NetscapeDecoder.SpecificTagDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize()', targetType='org.springframework.security.oauth2.client.endpoint.NimbusJwtClientAuthenticationParametersConverter.JwsEncoderHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getPointcut()', targetType='org.springframework.security.authentication.event.LogoutSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.postAuthorize(PostAuthorizeAuthorizationManager)', targetType='org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequestEntityConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.attemptAuthorization(MethodInvocation, Object)', targetType='org.springframework.security.access.vote.AbstractAclVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.access.vote.AbstractAclVoter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.access.vote.AbstractAclVoter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.logger', targetTypeName='org.springframework.security.access.vote.AbstractAclVoter'"
      } ]
    } ]
  } ]
}