{
  "executionId" : "889865be-676a-4495-811e-847f079a7929",
  "computingTime" : 3466906,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 38,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.1561403508771924,
    "meanNumConcerns" : 1.6132963988919662,
    "meanMetricsIntensity" : 0.0535659749901517,
    "meanLackOfCohesion" : 0.5516677364702989
  },
  "population" : [ {
    "solutionId" : "d58c6ad5-294a-4dbc-bb72-23e0c11ecc2e",
    "objectives" : {
      "NumberOfConcerns" : 0.9986263736263736,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.552237766976048,
      "MetricsIntensity" : 0.05348164830341044,
      "Density" : 0.9951825088011859
    },
    "euclideanDistance" : 9.126635179402424,
    "generation" : 1,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.608407079646018,
      "LackOfCohesion" : 0.552237766976048,
      "MetricsIntensity" : 0.05348164830341044,
      "Density" : 3.139099941554646
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "1922d6f2-0017-43a4-97cb-7ef42540dbf1",
    "objectives" : {
      "NumberOfConcerns" : 0.9986263736263736,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5524014866879012,
      "MetricsIntensity" : 0.053479849185697766,
      "Density" : 0.9951825088011859
    },
    "euclideanDistance" : 10.114131221053537,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.608407079646018,
      "LackOfCohesion" : 0.5524014866879012,
      "MetricsIntensity" : 0.053479849185697766,
      "Density" : 3.1390999415546457
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "6fb03cc4-5d22-455f-9510-bda9bf106bb7",
    "objectives" : {
      "NumberOfConcerns" : 0.9986263736263736,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5524014866879012,
      "MetricsIntensity" : 0.053479849185697766,
      "Density" : 0.9951825088011859
    },
    "euclideanDistance" : 10.114131221053537,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.608407079646018,
      "LackOfCohesion" : 0.5524014866879012,
      "MetricsIntensity" : 0.053479849185697766,
      "Density" : 3.139099941554646
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "eedfd292-bf56-4612-9611-48a9b6108741",
    "objectives" : {
      "NumberOfConcerns" : 0.9986263736263736,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5524014866879012,
      "MetricsIntensity" : 0.053479849185697766,
      "Density" : 0.9951825088011859
    },
    "euclideanDistance" : 10.114131221053537,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.608407079646018,
      "LackOfCohesion" : 0.5524014866879012,
      "MetricsIntensity" : 0.053479849185697766,
      "Density" : 3.1390999415546457
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "636e0072-9378-4513-bc96-d63ce53adf3b",
    "objectives" : {
      "NumberOfConcerns" : 0.9986263736263736,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5524014866879013,
      "MetricsIntensity" : 0.05347984918569775,
      "Density" : 0.9951825088011859
    },
    "euclideanDistance" : 10.114131221053537,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.608407079646018,
      "LackOfCohesion" : 0.5524014866879013,
      "MetricsIntensity" : 0.05347984918569776,
      "Density" : 3.139099941554646
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "dc92eec4-a1a6-4eba-945f-6e1c2e8beb6c",
    "objectives" : {
      "NumberOfConcerns" : 0.9989697802197802,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5521884411654255,
      "MetricsIntensity" : 0.053479849185697766,
      "Density" : 0.9953677969242172
    },
    "euclideanDistance" : 10.114171732859381,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6089601769911508,
      "LackOfCohesion" : 0.5521884411654255,
      "MetricsIntensity" : 0.053479849185697766,
      "Density" : 3.1396843950905904
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "1b1b0159-d71d-48fd-894b-01a9a0307ba3",
    "objectives" : {
      "NumberOfConcerns" : 0.9993131868131868,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5524067341145633,
      "MetricsIntensity" : 0.053479849185697745,
      "Density" : 0.9959236612933111
    },
    "euclideanDistance" : 10.114272296049116,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6095132743362832,
      "LackOfCohesion" : 0.5524067341145633,
      "MetricsIntensity" : 0.05347984918569774,
      "Density" : 3.139602803738318
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "5e966735-4acb-440f-96f5-3381bb00e21b",
    "objectives" : {
      "NumberOfConcerns" : 0.9979395604395604,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5521017086990271,
      "MetricsIntensity" : 0.05347182993774396,
      "Density" : 0.9946266444320919
    },
    "euclideanDistance" : 11.103730952317326,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.607300884955752,
      "LackOfCohesion" : 0.5521017086990271,
      "MetricsIntensity" : 0.05347182993774396,
      "Density" : 3.1391812865497077
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "d698957d-951c-4d19-9c15-c6bdc182b48a",
    "objectives" : {
      "NumberOfConcerns" : 0.9979395604395604,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5523147542215028,
      "MetricsIntensity" : 0.053462920021452635,
      "Density" : 0.9948119325551232
    },
    "euclideanDistance" : 11.103758103407708,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6073008849557524,
      "LackOfCohesion" : 0.5523147542215028,
      "MetricsIntensity" : 0.05346292002145263,
      "Density" : 3.139766081871346
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "500709c5-bbc1-4048-9aae-47a707179bd4",
    "objectives" : {
      "NumberOfConcerns" : 0.9986263736263736,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.552304409294655,
      "MetricsIntensity" : 0.05346557586188561,
      "Density" : 0.9951825088011859
    },
    "euclideanDistance" : 11.103852556129091,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.608407079646018,
      "LackOfCohesion" : 0.552304409294655,
      "MetricsIntensity" : 0.05346557586188561,
      "Density" : 3.1390999415546457
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "13194bf5-53f7-4bd0-a0f0-a6b5135538bb",
    "objectives" : {
      "NumberOfConcerns" : 0.998282967032967,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.552129659991713,
      "MetricsIntensity" : 0.05345438738644982,
      "Density" : 0.9972206781545303
    },
    "euclideanDistance" : 11.103995789632693,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6078539823008853,
      "LackOfCohesion" : 0.552129659991713,
      "MetricsIntensity" : 0.05345438738644983,
      "Density" : 3.147368421052631
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "4d9b00d8-95c3-4f29-adde-b0d536fb48bf",
    "objectives" : {
      "NumberOfConcerns" : 0.9986263736263736,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5520676004257242,
      "MetricsIntensity" : 0.053468694655879175,
      "Density" : 0.9974059662775616
    },
    "euclideanDistance" : 11.104040293173304,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.608407079646018,
      "LackOfCohesion" : 0.5520676004257242,
      "MetricsIntensity" : 0.053468694655879175,
      "Density" : 3.147953216374269
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "8426ffd0-839d-4605-82bf-2383683840cd",
    "objectives" : {
      "NumberOfConcerns" : 0.9989697802197802,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5523479529408509,
      "MetricsIntensity" : 0.05345438738644981,
      "Density" : 0.9977765425236242
    },
    "euclideanDistance" : 11.10411834785867,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6089601769911503,
      "LackOfCohesion" : 0.5523479529408509,
      "MetricsIntensity" : 0.05345438738644981,
      "Density" : 3.1472822910578606
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "90c8a07a-4e8d-4391-9792-233bbb4ded64",
    "objectives" : {
      "NumberOfConcerns" : 0.998282967032967,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5522321364039472,
      "MetricsIntensity" : 0.05346586779419372,
      "Density" : 0.9912914582175283
    },
    "euclideanDistance" : 12.094918212575868,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.607853982300885,
      "LackOfCohesion" : 0.5522321364039472,
      "MetricsIntensity" : 0.053465867794193725,
      "Density" : 3.126826417299825
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filterArray(Object[], Expression, EvaluationContext, MethodSecurityExpressionOperations)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "5066b3ba-d8c8-4983-b738-dfb5570a8818",
    "objectives" : {
      "NumberOfConcerns" : 0.9979395604395604,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.552107620799733,
      "MetricsIntensity" : 0.05346374279855572,
      "Density" : 0.9946266444320919
    },
    "euclideanDistance" : 12.095157986766594,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6073008849557526,
      "LackOfCohesion" : 0.552107620799733,
      "MetricsIntensity" : 0.05346374279855572,
      "Density" : 3.139181286549708
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "d258aef4-3fda-438c-96a9-9010e969d732",
    "objectives" : {
      "NumberOfConcerns" : 0.998282967032967,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5521289953176692,
      "MetricsIntensity" : 0.05345442133206705,
      "Density" : 0.9972206781545303
    },
    "euclideanDistance" : 12.095400851804689,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6078539823008853,
      "LackOfCohesion" : 0.5521289953176692,
      "MetricsIntensity" : 0.05345442133206704,
      "Density" : 3.1473684210526316
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "716ca12e-3429-4bcd-9206-298bae73c219",
    "objectives" : {
      "NumberOfConcerns" : 0.998282967032967,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5522660930849242,
      "MetricsIntensity" : 0.053452588268737146,
      "Density" : 0.9972206781545303
    },
    "euclideanDistance" : 12.095407102696917,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.607853982300885,
      "LackOfCohesion" : 0.5522660930849242,
      "MetricsIntensity" : 0.053452588268737146,
      "Density" : 3.1473684210526307
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "43149f3b-a805-442d-9cc4-ae7befddb4c1",
    "objectives" : {
      "NumberOfConcerns" : 0.9979395604395604,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5523117361561076,
      "MetricsIntensity" : 0.05346194368084305,
      "Density" : 0.9942560681860293
    },
    "euclideanDistance" : 13.087869762827445,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6073008849557522,
      "LackOfCohesion" : 0.5523117361561076,
      "MetricsIntensity" : 0.05346194368084305,
      "Density" : 3.138011695906433
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "98cf20ce-bbce-4b5f-a338-7b77cdf0edbc",
    "objectives" : {
      "NumberOfConcerns" : 0.9979395604395604,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5521894806556596,
      "MetricsIntensity" : 0.05345748872269739,
      "Density" : 0.9946266444320919
    },
    "euclideanDistance" : 13.087892743056532,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6073008849557526,
      "LackOfCohesion" : 0.5521894806556596,
      "MetricsIntensity" : 0.053457488722697385,
      "Density" : 3.139181286549708
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "ba6210e8-57ed-4b74-b89b-61a1ea034628",
    "objectives" : {
      "NumberOfConcerns" : 0.9986263736263736,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5523013912292596,
      "MetricsIntensity" : 0.05345568960498471,
      "Density" : 0.9948119325551232
    },
    "euclideanDistance" : 13.087963926935355,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.608407079646018,
      "LackOfCohesion" : 0.5523013912292596,
      "MetricsIntensity" : 0.05345568960498471,
      "Density" : 3.1379310344827576
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "7194d371-d1a6-4a03-aa03-ed83a181be76",
    "objectives" : {
      "NumberOfConcerns" : 0.9979395604395604,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5521738883021498,
      "MetricsIntensity" : 0.05346194368084304,
      "Density" : 0.9974059662775616
    },
    "euclideanDistance" : 13.08810361397713,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6073008849557524,
      "LackOfCohesion" : 0.5521738883021498,
      "MetricsIntensity" : 0.05346194368084303,
      "Density" : 3.147953216374269
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "073a6891-71fe-45bd-b2cc-5b7a5c22e8e5",
    "objectives" : {
      "NumberOfConcerns" : 0.998282967032967,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5521349074183751,
      "MetricsIntensity" : 0.053446334192878794,
      "Density" : 0.9972206781545303
    },
    "euclideanDistance" : 13.088113975276793,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.607853982300885,
      "LackOfCohesion" : 0.5521349074183751,
      "MetricsIntensity" : 0.053446334192878794,
      "Density" : 3.147368421052631
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "a1e09908-a3cb-4078-ab70-f23a259e077c",
    "objectives" : {
      "NumberOfConcerns" : 0.998282967032967,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.552134907418375,
      "MetricsIntensity" : 0.05344633419287881,
      "Density" : 0.9972206781545303
    },
    "euclideanDistance" : 13.088113975276793,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6078539823008842,
      "LackOfCohesion" : 0.552134907418375,
      "MetricsIntensity" : 0.05344633419287881,
      "Density" : 3.147368421052631
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "c4f52ad6-ef18-4a3f-81f6-c639a4a600c2",
    "objectives" : {
      "NumberOfConcerns" : 0.9979395604395604,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5522557481580764,
      "MetricsIntensity" : 0.0534556896049847,
      "Density" : 0.9974059662775616
    },
    "euclideanDistance" : 14.081851652037143,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6073008849557526,
      "LackOfCohesion" : 0.5522557481580764,
      "MetricsIntensity" : 0.0534556896049847,
      "Density" : 3.147953216374269
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource()', targetType='org.springframework.security.authentication.AuthenticationCredentialsNotFoundException'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.permitAll, org.springframework.security.access.expression.SecurityExpressionRoot.denyAll, org.springframework.security.access.expression.SecurityExpressionRoot.write, org.springframework.security.access.expression.SecurityExpressionRoot.admin, org.springframework.security.access.expression.SecurityExpressionRoot.read, org.springframework.security.access.expression.SecurityExpressionRoot.create, org.springframework.security.access.expression.SecurityExpressionRoot.delete], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.server.WebFilterChainProxy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "7dd43a36-28ab-4033-b51e-307c145b093b",
    "objectives" : {
      "NumberOfConcerns" : 0.9962225274725275,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5524707575101918,
      "MetricsIntensity" : 0.053499112680958395,
      "Density" : 0.9929590513248101
    },
    "euclideanDistance" : 28.040800864005526,
    "generation" : 1,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6054233536247922,
      "LackOfCohesion" : 0.5524707575101918,
      "MetricsIntensity" : 0.05349911268095839,
      "Density" : 3.1357519016968984
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages], extractedMethods=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[]), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource(), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.authentication.preauth.websphere.DefaultWASUsernameAndGroupsExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.rsocket.core.PayloadSocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "2c203476-be23-4189-9e21-028798084a9f",
    "objectives" : {
      "NumberOfConcerns" : 0.9962225274725275,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.552479859010119,
      "MetricsIntensity" : 0.05348479603586099,
      "Density" : 0.9929590513248101
    },
    "euclideanDistance" : 28.040801016017184,
    "generation" : 1,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6054233536247926,
      "LackOfCohesion" : 0.552479859010119,
      "MetricsIntensity" : 0.05348479603586098,
      "Density" : 3.1357519016968984
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages], extractedMethods=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[]), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource(), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.authentication.preauth.websphere.DefaultWASUsernameAndGroupsExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.rsocket.core.PayloadSocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "e152be9a-22f5-46f9-a0c2-db939ac7878b",
    "objectives" : {
      "NumberOfConcerns" : 0.9962225274725275,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.552556631662252,
      "MetricsIntensity" : 0.05348479603586098,
      "Density" : 0.9929590513248101
    },
    "euclideanDistance" : 28.040802528751787,
    "generation" : 1,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6054233536247922,
      "LackOfCohesion" : 0.552556631662252,
      "MetricsIntensity" : 0.053484796035860975,
      "Density" : 3.1357519016968984
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages], extractedMethods=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[]), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource(), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.rsocket.core.PayloadSocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "714fb13e-5cf1-479b-ace0-bac2860d12c5",
    "objectives" : {
      "NumberOfConcerns" : 0.9962225274725275,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5524952615484571,
      "MetricsIntensity" : 0.05348479603586098,
      "Density" : 0.9955530850472485
    },
    "euclideanDistance" : 28.040893297233442,
    "generation" : 1,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.605423353624792,
      "LackOfCohesion" : 0.5524952615484571,
      "MetricsIntensity" : 0.05348479603586098,
      "Density" : 3.143943826799296
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages], extractedMethods=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[]), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource(), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.authentication.preauth.websphere.DefaultWASUsernameAndGroupsExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.rsocket.core.PayloadSocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "90f8ef70-cee1-4190-8705-f3f51db7ddb8",
    "objectives" : {
      "NumberOfConcerns" : 0.9962225274725275,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5524661367486902,
      "MetricsIntensity" : 0.05347853786165674,
      "Density" : 0.9925884750787475
    },
    "euclideanDistance" : 29.039383085585147,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6054233536247924,
      "LackOfCohesion" : 0.5524661367486902,
      "MetricsIntensity" : 0.05347853786165674,
      "Density" : 3.1345816266822704
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages], extractedMethods=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[]), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource(), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.authentication.preauth.websphere.DefaultWASUsernameAndGroupsExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.rsocket.core.PayloadSocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "d0713c1f-569f-407d-8914-60936f421397",
    "objectives" : {
      "NumberOfConcerns" : 0.9962225274725275,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5524661367486902,
      "MetricsIntensity" : 0.05347853786165674,
      "Density" : 0.9925884750787475
    },
    "euclideanDistance" : 29.039383085585147,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6054233536247926,
      "LackOfCohesion" : 0.5524661367486902,
      "MetricsIntensity" : 0.05347853786165673,
      "Density" : 3.1345816266822712
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages], extractedMethods=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[]), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource(), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.authentication.preauth.websphere.DefaultWASUsernameAndGroupsExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.rsocket.core.PayloadSocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "02bd210f-8d78-451f-9e41-dfe9b7dcd38d",
    "objectives" : {
      "NumberOfConcerns" : 0.9962225274725275,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5523883189243127,
      "MetricsIntensity" : 0.05348479603586099,
      "Density" : 0.9929590513248101
    },
    "euclideanDistance" : 29.039394285696503,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6054233536247924,
      "LackOfCohesion" : 0.5523883189243127,
      "MetricsIntensity" : 0.05348479603586098,
      "Density" : 3.1357519016968984
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages], extractedMethods=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[]), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource(), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.authentication.preauth.websphere.DefaultWASUsernameAndGroupsExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "3f5e6c06-b421-406a-b106-aa3cb38317e6",
    "objectives" : {
      "NumberOfConcerns" : 0.9958791208791209,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5524172241424382,
      "MetricsIntensity" : 0.053500415752847495,
      "Density" : 0.9931443394478414
    },
    "euclideanDistance" : 30.03807813403506,
    "generation" : 1,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.604869950193691,
      "LackOfCohesion" : 0.5524172241424382,
      "MetricsIntensity" : 0.053500415752847495,
      "Density" : 3.1363370392042125
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages], extractedMethods=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[]), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource(), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getUserAttributes()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.authentication.preauth.websphere.DefaultWASUsernameAndGroupsExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.rsocket.core.PayloadSocketAcceptorInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "a1f436a4-a674-4901-86d5-d448ef5a75b6",
    "objectives" : {
      "NumberOfConcerns" : 0.9962225274725275,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5523422963397907,
      "MetricsIntensity" : 0.05349498089491877,
      "Density" : 0.9931443394478414
    },
    "euclideanDistance" : 30.038088133709973,
    "generation" : 1,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6054233536247922,
      "LackOfCohesion" : 0.5523422963397907,
      "MetricsIntensity" : 0.05349498089491877,
      "Density" : 3.1363370392042125
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages], extractedMethods=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[]), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource(), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getUserAttributes()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.authentication.preauth.websphere.DefaultWASUsernameAndGroupsExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.rsocket.core.PayloadSocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.config.http.AuthenticationConfigBuilder.CsrfTokenHiddenInputFunction'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "7eec7a48-ef44-47c7-88de-01202084dfbe",
    "objectives" : {
      "NumberOfConcerns" : 0.9958791208791209,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5523255590360285,
      "MetricsIntensity" : 0.05350434243770101,
      "Density" : 0.9962942375393737
    },
    "euclideanDistance" : 30.03818076496946,
    "generation" : 1,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.604869950193691,
      "LackOfCohesion" : 0.5523255590360285,
      "MetricsIntensity" : 0.05350434243770101,
      "Density" : 3.1462843768285556
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages], extractedMethods=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[]), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource(), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getUserAttributes()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.authentication.preauth.websphere.DefaultWASUsernameAndGroupsExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.config.http.AuthenticationConfigBuilder.CsrfTokenHiddenInputFunction'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "182b9647-fb22-421b-9c7a-2f644aa2c982",
    "objectives" : {
      "NumberOfConcerns" : 0.9955357142857143,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5523005949219426,
      "MetricsIntensity" : 0.05350434243770101,
      "Density" : 0.9961089494163424
    },
    "euclideanDistance" : 31.03693320963488,
    "generation" : 1,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6043165467625902,
      "LackOfCohesion" : 0.5523005949219426,
      "MetricsIntensity" : 0.053504342437701004,
      "Density" : 3.1456992393212415
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages], extractedMethods=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[]), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource(), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getUserAttributes(), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.AbstractLdapAuthenticator(ContextSource)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.authentication.preauth.websphere.DefaultWASUsernameAndGroupsExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.rsocket.core.PayloadSocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.config.http.AuthenticationConfigBuilder.CsrfTokenHiddenInputFunction'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "b2cda656-89f0-4024-b12b-36552b10ba34",
    "objectives" : {
      "NumberOfConcerns" : 0.9958791208791209,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5526028947409527,
      "MetricsIntensity" : 0.05349808426349677,
      "Density" : 0.9959236612933111
    },
    "euclideanDistance" : 31.036943650540444,
    "generation" : 1,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6048699501936914,
      "LackOfCohesion" : 0.5526028947409527,
      "MetricsIntensity" : 0.05349808426349676,
      "Density" : 3.14695550351288
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages], extractedMethods=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[]), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource(), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.authentication.preauth.websphere.DefaultWASUsernameAndGroupsExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.rsocket.core.PayloadSocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.config.http.AuthenticationConfigBuilder.CsrfTokenHiddenInputFunction'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "4a355d24-cf04-4ad9-b50d-ae83bd1ff26d",
    "objectives" : {
      "NumberOfConcerns" : 0.9958791208791209,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5525214313157804,
      "MetricsIntensity" : 0.05349988456018566,
      "Density" : 0.996479525662405
    },
    "euclideanDistance" : 31.036960045052393,
    "generation" : 1,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6048699501936912,
      "LackOfCohesion" : 0.5525214313157804,
      "MetricsIntensity" : 0.05349988456018565,
      "Density" : 3.1468695143358687
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages], extractedMethods=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[]), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource(), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.authentication.preauth.websphere.DefaultWASUsernameAndGroupsExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix()', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.rsocket.core.PayloadSocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.config.http.AuthenticationConfigBuilder.CsrfTokenHiddenInputFunction'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "80558b7c-b394-4a87-b71b-6321f8c9c99d",
    "objectives" : {
      "NumberOfConcerns" : 0.9958791208791209,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5526075409611954,
      "MetricsIntensity" : 0.05349808426349674,
      "Density" : 0.9959236612933111
    },
    "euclideanDistance" : 32.03579055216016,
    "generation" : 1,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.604869950193691,
      "LackOfCohesion" : 0.5526075409611954,
      "MetricsIntensity" : 0.05349808426349675,
      "Density" : 3.14695550351288
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages], extractedMethods=[org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[]), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.getContextSource(), org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setTargetUrlParameter(String)', targetType='org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.passwordEncoder, org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD, org.springframework.security.authentication.dao.DaoAuthenticationProvider.userNotFoundEncodedPassword], extractedMethods=[org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails), org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken), org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection(), org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.oauth2.jwt.JwtException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer.ConcurrencyControlConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.web.authentication.preauth.websphere.DefaultWASUsernameAndGroupsExtractor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.matches(ServerWebExchange)', targetType='org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createEvaluationContextInternal(Authentication, MethodInvocation)', targetType='org.springframework.security.core.SpringSecurityMessageSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParserUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.rsocket.core.PayloadSocketAcceptorInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.config.http.AuthenticationConfigBuilder.CsrfTokenHiddenInputFunction'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getToken()', targetType='org.springframework.security.web.authentication.rememberme.InvalidCookieException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.util.SimpleMethodInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.web.header.writers.HstsHeaderWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse)', targetType='org.springframework.security.web.csrf.CsrfFilter'"
      } ]
    } ]
  } ]
}