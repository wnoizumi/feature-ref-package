{
  "executionId" : "7c0e62ac-e51b-4d22-90bb-95c6aee22943",
  "computingTime" : 8796,
  "maxEvaluations" : 1000,
  "initialPopulationSize" : 50,
  "finalPopulationSize" : 34,
  "algorithm" : "Baseline",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.5816733067729087,
    "meanNumConcerns" : 1.7258687258687258,
    "meanMetricsIntensity" : 0.10570392479894604,
    "meanLackOfCohesion" : 0.6760798143144731
  },
  "population" : [ {
    "solutionId" : "0fc5ce6d-e1b9-419c-9d6f-f8811f28c6b1",
    "objectives" : {
      "NumberOfConcerns" : 0.9977628635346756,
      "NumberOfRefactorings" : 3.0,
      "LackOfCohesion" : 0.67585254536777,
      "MetricsIntensity" : 0.10560788171490511,
      "Density" : 0.9955506117908788
    },
    "euclideanDistance" : 3.3844617652215416,
    "generation" : 0,
    "numberOfRefactorings" : 3,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7220077220077221,
      "LackOfCohesion" : 0.67585254536777,
      "MetricsIntensity" : 0.10560788171490511,
      "Density" : 3.5657370517928286,
      "baselineType" : "MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    } ]
  }, {
    "solutionId" : "b4553a05-b35c-468f-a9d7-2f26178da613",
    "objectives" : {
      "NumberOfConcerns" : 1.0178970917225951,
      "NumberOfRefactorings" : 5.0,
      "LackOfCohesion" : 0.6738751678184635,
      "MetricsIntensity" : 0.10716858200671023,
      "Density" : 1.010011123470523
    },
    "euclideanDistance" : 5.2461252182580616,
    "generation" : 0,
    "numberOfRefactorings" : 5,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7234848484848484,
      "LackOfCohesion" : 0.6738751678184635,
      "MetricsIntensity" : 0.10716858200671023,
      "Density" : 3.546875,
      "baselineType" : "EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "9d54a106-1d02-49bb-baba-a06ca622ce4c",
    "objectives" : {
      "NumberOfConcerns" : 1.0223713646532437,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.6811777347793944,
      "MetricsIntensity" : 0.10359192548581002,
      "Density" : 1.003337041156841
    },
    "euclideanDistance" : 9.139292249337766,
    "generation" : 0,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.705223880597015,
      "LackOfCohesion" : 0.6811777347793944,
      "MetricsIntensity" : 0.10359192548581,
      "Density" : 3.4692307692307693,
      "baselineType" : "CONCERN_EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "e61df181-44f0-4a8a-8f22-623746c5a86c",
    "objectives" : {
      "NumberOfConcerns" : 1.0134228187919463,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.6911368655908945,
      "MetricsIntensity" : 0.10460227872573093,
      "Density" : 0.9922135706340378
    },
    "euclideanDistance" : 20.06240577256606,
    "generation" : 0,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6966292134831462,
      "LackOfCohesion" : 0.6911368655908945,
      "MetricsIntensity" : 0.10460227872573091,
      "Density" : 3.4573643410852717,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.mockwebserver.MockResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "9cf5bc2c-3f26-4c93-911d-fad2ccf48338",
    "objectives" : {
      "NumberOfConcerns" : 1.0089485458612975,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.6797017042903337,
      "MetricsIntensity" : 0.10515696173623594,
      "Density" : 0.9899888765294772
    },
    "euclideanDistance" : 21.05875370332405,
    "generation" : 0,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.695488721804511,
      "LackOfCohesion" : 0.6797017042903337,
      "MetricsIntensity" : 0.10515696173623594,
      "Density" : 3.463035019455253,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.mockwebserver.MockResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "0a10ca84-5c71-466d-b5bd-5cbcb0481b29",
    "objectives" : {
      "NumberOfConcerns" : 1.0022371364653244,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.6688060132706595,
      "MetricsIntensity" : 0.10512477089134509,
      "Density" : 0.9933259176863182
    },
    "euclideanDistance" : 28.043707464550753,
    "generation" : 0,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6905660377358491,
      "LackOfCohesion" : 0.6688060132706595,
      "MetricsIntensity" : 0.10512477089134507,
      "Density" : 3.4747081712062258,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.cache.CacheInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.recipes.AsynchronousGet'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "8e0d2669-e968-4110-8279-c3bb2c30113e",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.6687081620541035,
      "MetricsIntensity" : 0.10557919512729785,
      "Density" : 0.9666295884315906
    },
    "euclideanDistance" : 31.0385677880548,
    "generation" : 0,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6867924528301885,
      "LackOfCohesion" : 0.6687081620541035,
      "MetricsIntensity" : 0.10557919512729784,
      "Density" : 3.3813229571984436,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.cache.CacheInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.recipes.AsynchronousGet'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "63e83920-c67a-44ce-9740-65a7c6e3cb7d",
    "objectives" : {
      "NumberOfConcerns" : 1.0022371364653244,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.6756953363086246,
      "MetricsIntensity" : 0.10470966938231976,
      "Density" : 0.9988876529477196
    },
    "euclideanDistance" : 31.039809666350937,
    "generation" : 0,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6905660377358491,
      "LackOfCohesion" : 0.6756953363086246,
      "MetricsIntensity" : 0.10470966938231978,
      "Density" : 3.4941634241245136,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.internal.http.RequestLine'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.slack.RtmStartResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.JavaNetAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.tls.HandshakeCertificates'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.Credentials'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "77f7baa1-b4c7-41fb-b829-dee6f224f894",
    "objectives" : {
      "NumberOfConcerns" : 1.0022371364653244,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.6906759948468569,
      "MetricsIntensity" : 0.1040462403444878,
      "Density" : 0.9977753058954394
    },
    "euclideanDistance" : 36.034537513179664,
    "generation" : 0,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6905660377358491,
      "LackOfCohesion" : 0.6906759948468569,
      "MetricsIntensity" : 0.10404624034448777,
      "Density" : 3.4902723735408565,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.internal.http.RequestLine'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.slack.RtmStartResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.JavaNetAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.tls.HandshakeCertificates'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.Credentials'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "d140c31d-8ee9-4300-b053-f0553d7883a5",
    "objectives" : {
      "NumberOfConcerns" : 1.0022371364653244,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.6813864671751215,
      "MetricsIntensity" : 0.10630738509312924,
      "Density" : 0.9733036707452726
    },
    "euclideanDistance" : 38.03192590562528,
    "generation" : 0,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6969696969696968,
      "LackOfCohesion" : 0.6813864671751215,
      "MetricsIntensity" : 0.10630738509312923,
      "Density" : 3.41796875,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.Cache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http2.Http2Connection.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.logging.LoggingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.logging.LoggingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "9838cda7-aecd-485a-9c23-9a7c821234fb",
    "objectives" : {
      "NumberOfConcerns" : 1.0067114093959733,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.6833389364745296,
      "MetricsIntensity" : 0.10666290214783748,
      "Density" : 0.9744160177975528
    },
    "euclideanDistance" : 38.032108586224155,
    "generation" : 0,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7045454545454544,
      "LackOfCohesion" : 0.6833389364745296,
      "MetricsIntensity" : 0.10666290214783748,
      "Density" : 3.421875,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.Cache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http2.Http2Connection.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.logging.LoggingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.logging.LoggingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "d4c44cbe-3ea8-4cbf-bba1-a766511ff2bb",
    "objectives" : {
      "NumberOfConcerns" : 1.0022371364653244,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.6823095391253082,
      "MetricsIntensity" : 0.10546040188615521,
      "Density" : 0.9922135706340378
    },
    "euclideanDistance" : 39.03159790798998,
    "generation" : 0,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6905660377358493,
      "LackOfCohesion" : 0.6823095391253082,
      "MetricsIntensity" : 0.10546040188615521,
      "Density" : 3.470817120622568,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.cache.CacheInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.recipes.AsynchronousGet'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "33b7aeb9-de56-4535-bd89-a4daf48c3286",
    "objectives" : {
      "NumberOfConcerns" : 0.9910514541387024,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.6789997339354114,
      "MetricsIntensity" : 0.10691524752006497,
      "Density" : 0.985539488320356
    },
    "euclideanDistance" : 40.03031279638751,
    "generation" : 0,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6844106463878328,
      "LackOfCohesion" : 0.6789997339354114,
      "MetricsIntensity" : 0.10691524752006497,
      "Density" : 3.474509803921568,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.cache.DiskLruCache.Entry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.mockwebserver.MockWebServer.TruncatingBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "31afe091-d9c4-4e0a-b3fd-1655676646a3",
    "objectives" : {
      "NumberOfConcerns" : 0.9910514541387024,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.6731047177514936,
      "MetricsIntensity" : 0.10646366630094763,
      "Density" : 0.9632925472747497
    },
    "euclideanDistance" : 42.028258588593545,
    "generation" : 0,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.684410646387833,
      "LackOfCohesion" : 0.6731047177514936,
      "MetricsIntensity" : 0.10646366630094763,
      "Density" : 3.3960784313725494,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.cache.CacheInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.recipes.AsynchronousGet'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "74211aa9-b5d6-4f50-b50c-bb114ed1698e",
    "objectives" : {
      "NumberOfConcerns" : 0.9888143176733781,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.6756453396327905,
      "MetricsIntensity" : 0.1068426678971519,
      "Density" : 0.982202447163515
    },
    "euclideanDistance" : 45.02677411699289,
    "generation" : 0,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6806083650190111,
      "LackOfCohesion" : 0.6756453396327905,
      "MetricsIntensity" : 0.1068426678971519,
      "Density" : 3.462745098039216,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.cache.DiskLruCache.Entry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.mockwebserver.MockWebServer.TruncatingBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.cache.CacheInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.recipes.AsynchronousGet'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "859e3bec-9df2-4f4e-b186-2115b7717e2c",
    "objectives" : {
      "NumberOfConcerns" : 1.0044742729306488,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.6812475199651072,
      "MetricsIntensity" : 0.105544737299196,
      "Density" : 0.9933259176863182
    },
    "euclideanDistance" : 45.027446105889204,
    "generation" : 0,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6943396226415095,
      "LackOfCohesion" : 0.6812475199651072,
      "MetricsIntensity" : 0.105544737299196,
      "Density" : 3.474708171206226,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.cache.DiskLruCache.Entry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.mockwebserver.MockWebServer.TruncatingBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.cache.CacheInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.recipes.AsynchronousGet'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "e523a402-9725-49b8-b3eb-77afae6632cb",
    "objectives" : {
      "NumberOfConcerns" : 1.0067114093959733,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.6812475199651072,
      "MetricsIntensity" : 0.10561862892481175,
      "Density" : 0.9944382647385984
    },
    "euclideanDistance" : 45.02752079342609,
    "generation" : 0,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6981132075471699,
      "LackOfCohesion" : 0.6812475199651072,
      "MetricsIntensity" : 0.10561862892481176,
      "Density" : 3.4785992217898833,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.cache.DiskLruCache.Entry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.mockwebserver.MockWebServer.TruncatingBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.cache.CacheInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.recipes.AsynchronousGet'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "12b174e6-93e4-4a6d-8b06-f6b1ee35059c",
    "objectives" : {
      "NumberOfConcerns" : 0.9977628635346756,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.6791251481869204,
      "MetricsIntensity" : 0.1064965627451584,
      "Density" : 1.0011123470522802
    },
    "euclideanDistance" : 46.02684335415634,
    "generation" : 0,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6893939393939394,
      "LackOfCohesion" : 0.6791251481869204,
      "MetricsIntensity" : 0.1064965627451584,
      "Density" : 3.515625,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.cache.DiskLruCache.Entry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.mockwebserver.MockWebServer.TruncatingBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.Cache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http2.Http2Connection.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.logging.LoggingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.logging.LoggingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "bd7b2376-712a-4f25-a1d0-6a50c8b94a06",
    "objectives" : {
      "NumberOfConcerns" : 0.9910514541387024,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.6834459060269347,
      "MetricsIntensity" : 0.10619651397909445,
      "Density" : 0.9877641824249166
    },
    "euclideanDistance" : 47.025910273708455,
    "generation" : 0,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6780303030303032,
      "LackOfCohesion" : 0.6834459060269347,
      "MetricsIntensity" : 0.10619651397909445,
      "Density" : 3.46875,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.FileOperator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.FileOperator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      } ]
    } ]
  }, {
    "solutionId" : "7db59acd-5745-49db-9e76-c3c3cc569883",
    "objectives" : {
      "NumberOfConcerns" : 0.9932885906040269,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.679331881125977,
      "MetricsIntensity" : 0.10491502242639243,
      "Density" : 0.9810901001112347
    },
    "euclideanDistance" : 49.02470457815534,
    "generation" : 0,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6754716981132076,
      "LackOfCohesion" : 0.679331881125977,
      "MetricsIntensity" : 0.10491502242639243,
      "Density" : 3.431906614785992,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.internal.http.RequestLine'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.slack.RtmStartResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.JavaNetAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.tls.HandshakeCertificates'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.Credentials'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.cache.DiskLruCache.Entry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.mockwebserver.MockWebServer.TruncatingBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.cache.CacheInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.recipes.AsynchronousGet'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "b9130650-7ea1-49a1-a105-fc4ae9e970e5",
    "objectives" : {
      "NumberOfConcerns" : 0.9910514541387024,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.6784091335430251,
      "MetricsIntensity" : 0.10629323129221539,
      "Density" : 0.985539488320356
    },
    "euclideanDistance" : 49.024738737409734,
    "generation" : 0,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.684410646387833,
      "LackOfCohesion" : 0.6784091335430251,
      "MetricsIntensity" : 0.10629323129221538,
      "Density" : 3.488188976377953,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.mockwebserver.MockResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.Cache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http2.Http2Connection.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.logging.LoggingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.logging.LoggingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "0bc250ad-7352-4868-929c-0034f61289d8",
    "objectives" : {
      "NumberOfConcerns" : 0.9932885906040269,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.6812524981747317,
      "MetricsIntensity" : 0.1064952220865295,
      "Density" : 0.9866518353726362
    },
    "euclideanDistance" : 53.02297191092805,
    "generation" : 0,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6882129277566542,
      "LackOfCohesion" : 0.6812524981747317,
      "MetricsIntensity" : 0.1064952220865295,
      "Density" : 3.4784313725490197,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.cache.DiskLruCache.Entry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.mockwebserver.MockWebServer.TruncatingBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.cache.CacheInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.recipes.AsynchronousGet'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "2d386df8-7c6d-4ea5-8293-a59e5c4676ad",
    "objectives" : {
      "NumberOfConcerns" : 0.9753914988814317,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.6848709294434658,
      "MetricsIntensity" : 0.10639427303058906,
      "Density" : 0.9833147942157954
    },
    "euclideanDistance" : 58.02067445740306,
    "generation" : 0,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.66412213740458,
      "LackOfCohesion" : 0.6848709294434658,
      "MetricsIntensity" : 0.10639427303058908,
      "Density" : 3.4940711462450595,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.mockwebserver.MockResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.cache.DiskLruCache.Entry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.mockwebserver.MockWebServer.TruncatingBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.Cache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http2.Http2Connection.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.logging.LoggingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.logging.LoggingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "d5d181ec-58ca-4e1c-b3d4-27be855cd6e9",
    "objectives" : {
      "NumberOfConcerns" : 0.9955257270693513,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.6949104848818661,
      "MetricsIntensity" : 0.10588104425563502,
      "Density" : 0.9877641824249166
    },
    "euclideanDistance" : 58.02121044006985,
    "generation" : 0,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.679245283018868,
      "LackOfCohesion" : 0.6949104848818661,
      "MetricsIntensity" : 0.10588104425563502,
      "Density" : 3.455252918287938,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.cache.CacheInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.recipes.AsynchronousGet'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.FileOperator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.FileOperator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      } ]
    } ]
  }, {
    "solutionId" : "f5d640e6-48a5-4e09-9601-a64ebacf5eaf",
    "objectives" : {
      "NumberOfConcerns" : 0.9865771812080537,
      "NumberOfRefactorings" : 60.0,
      "LackOfCohesion" : 0.6885890607001645,
      "MetricsIntensity" : 0.10625701643089183,
      "Density" : 0.9888765294771968
    },
    "euclideanDistance" : 60.020302038336055,
    "generation" : 0,
    "numberOfRefactorings" : 60,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6704545454545456,
      "LackOfCohesion" : 0.6885890607001645,
      "MetricsIntensity" : 0.10625701643089185,
      "Density" : 3.47265625,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.cache.DiskLruCache.Entry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.mockwebserver.MockWebServer.TruncatingBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.FileOperator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.FileOperator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      } ]
    } ]
  }, {
    "solutionId" : "76f3f010-a81d-47a8-9038-72c205a2e00c",
    "objectives" : {
      "NumberOfConcerns" : 0.9865771812080537,
      "NumberOfRefactorings" : 61.0,
      "LackOfCohesion" : 0.6777061962316765,
      "MetricsIntensity" : 0.10743328883797464,
      "Density" : 0.9833147942157954
    },
    "euclideanDistance" : 61.01975966946252,
    "generation" : 0,
    "numberOfRefactorings" : 61,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6768060836501901,
      "LackOfCohesion" : 0.6777061962316765,
      "MetricsIntensity" : 0.10743328883797464,
      "Density" : 3.466666666666667,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.cache.CacheInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.recipes.AsynchronousGet'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.FileOperator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.FileOperator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      } ]
    } ]
  }, {
    "solutionId" : "83952d72-07b9-44b6-a2b6-70257d9cdd93",
    "objectives" : {
      "NumberOfConcerns" : 0.9776286353467561,
      "NumberOfRefactorings" : 64.0,
      "LackOfCohesion" : 0.6768091410696803,
      "MetricsIntensity" : 0.10695872631957097,
      "Density" : 0.978865406006674
    },
    "euclideanDistance" : 64.01861796395092,
    "generation" : 0,
    "numberOfRefactorings" : 64,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6679389312977098,
      "LackOfCohesion" : 0.6768091410696803,
      "MetricsIntensity" : 0.10695872631957098,
      "Density" : 3.478260869565217,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.mockwebserver.MockResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.cache.CacheInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.recipes.AsynchronousGet'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.Cache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http2.Http2Connection.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.logging.LoggingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.logging.LoggingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "fa2edca3-591c-41dc-a512-7966254285b0",
    "objectives" : {
      "NumberOfConcerns" : 0.9843400447427293,
      "NumberOfRefactorings" : 64.0,
      "LackOfCohesion" : 0.6870167418584752,
      "MetricsIntensity" : 0.10569482395691278,
      "Density" : 0.9733036707452726
    },
    "euclideanDistance" : 64.01874263650119,
    "generation" : 0,
    "numberOfRefactorings" : 64,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.673003802281369,
      "LackOfCohesion" : 0.6870167418584752,
      "MetricsIntensity" : 0.10569482395691278,
      "Density" : 3.4313725490196076,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.internal.http.RequestLine'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.slack.RtmStartResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.JavaNetAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.tls.HandshakeCertificates'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.Credentials'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.cache.DiskLruCache.Entry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.mockwebserver.MockWebServer.TruncatingBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.cache.CacheInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.recipes.AsynchronousGet'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "bec3f1b8-4a52-41e4-a1be-dceff2ace447",
    "objectives" : {
      "NumberOfConcerns" : 0.9843400447427293,
      "NumberOfRefactorings" : 65.0,
      "LackOfCohesion" : 0.6849922159757741,
      "MetricsIntensity" : 0.10646998026465886,
      "Density" : 0.9911012235817576
    },
    "euclideanDistance" : 65.01870313341934,
    "generation" : 0,
    "numberOfRefactorings" : 65,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6666666666666665,
      "LackOfCohesion" : 0.6849922159757741,
      "MetricsIntensity" : 0.10646998026465886,
      "Density" : 3.4941176470588236,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.mockwebserver.MockResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.cache.CacheInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.recipes.AsynchronousGet'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.FileOperator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.FileOperator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      } ]
    } ]
  }, {
    "solutionId" : "eb6aeecd-5638-47b1-8642-83f3ba61cbb8",
    "objectives" : {
      "NumberOfConcerns" : 0.9865771812080537,
      "NumberOfRefactorings" : 66.0,
      "LackOfCohesion" : 0.6876026694471963,
      "MetricsIntensity" : 0.10625804239636812,
      "Density" : 1.0
    },
    "euclideanDistance" : 66.01861421400092,
    "generation" : 0,
    "numberOfRefactorings" : 66,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6704545454545456,
      "LackOfCohesion" : 0.6876026694471963,
      "MetricsIntensity" : 0.10625804239636812,
      "Density" : 3.51171875,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.cache.DiskLruCache.Entry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.mockwebserver.MockWebServer.TruncatingBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.Cache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http2.Http2Connection.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.logging.LoggingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.logging.LoggingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.FileOperator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.FileOperator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      } ]
    } ]
  }, {
    "solutionId" : "5e778eee-178b-4a38-8f2b-aabbc2217e9f",
    "objectives" : {
      "NumberOfConcerns" : 0.9664429530201343,
      "NumberOfRefactorings" : 81.0,
      "LackOfCohesion" : 0.6917693491816315,
      "MetricsIntensity" : 0.10793812922072984,
      "Density" : 0.978865406006674
    },
    "euclideanDistance" : 81.01470474510616,
    "generation" : 0,
    "numberOfRefactorings" : 81,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6615384615384616,
      "LackOfCohesion" : 0.6917693491816315,
      "MetricsIntensity" : 0.10793812922072984,
      "Density" : 3.5059760956175294,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.mockwebserver.MockResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.cache.CacheInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.recipes.AsynchronousGet'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.FileOperator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.FileOperator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      } ]
    } ]
  }, {
    "solutionId" : "1a6455bc-8f98-437f-827b-84b1a3078023",
    "objectives" : {
      "NumberOfConcerns" : 0.9753914988814317,
      "NumberOfRefactorings" : 81.0,
      "LackOfCohesion" : 0.6870282007055389,
      "MetricsIntensity" : 0.10649392261378189,
      "Density" : 0.9844271412680756
    },
    "euclideanDistance" : 81.01483712306452,
    "generation" : 0,
    "numberOfRefactorings" : 81,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6641221374045803,
      "LackOfCohesion" : 0.6870282007055389,
      "MetricsIntensity" : 0.1064939226137819,
      "Density" : 3.484251968503937,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.internal.http.RequestLine'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.slack.RtmStartResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.JavaNetAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.tls.HandshakeCertificates'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.Credentials'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.cache.CacheInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.recipes.AsynchronousGet'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.FileOperator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.FileOperator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      } ]
    } ]
  }, {
    "solutionId" : "4a2e7abc-611e-47b4-96ab-b1943c0532a2",
    "objectives" : {
      "NumberOfConcerns" : 0.970917225950783,
      "NumberOfRefactorings" : 85.0,
      "LackOfCohesion" : 0.6992065258927673,
      "MetricsIntensity" : 0.10668176615008755,
      "Density" : 0.982202447163515
    },
    "euclideanDistance" : 85.01416160071182,
    "generation" : 0,
    "numberOfRefactorings" : 85,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6564885496183208,
      "LackOfCohesion" : 0.6992065258927673,
      "MetricsIntensity" : 0.10668176615008758,
      "Density" : 3.4901185770750986,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.mockwebserver.MockResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.ConnectionShutdownException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.cache.DiskLruCache.Entry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.mockwebserver.MockWebServer.TruncatingBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.cache.CacheInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.recipes.AsynchronousGet'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.FileOperator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.FileOperator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.PerCallSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      } ]
    } ]
  }, {
    "solutionId" : "bbf46ebe-511c-4860-8eaa-547cf8965155",
    "objectives" : {
      "NumberOfConcerns" : 0.9552572706935123,
      "NumberOfRefactorings" : 119.0,
      "LackOfCohesion" : 0.6910878317922715,
      "MetricsIntensity" : 0.1076537664019165,
      "Density" : 0.9766407119021134
    },
    "euclideanDistance" : 119.00989679542634,
    "generation" : 0,
    "numberOfRefactorings" : 119,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6486486486486487,
      "LackOfCohesion" : 0.6910878317922715,
      "MetricsIntensity" : 0.1076537664019165,
      "Density" : 3.4703557312252964,
      "baselineType" : "CONCERN_MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.RealWebSocket.Streams'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.RealWebSocket.Streams'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.WebSocketListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.StreamResetException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.logging.LoggingEventListener.Factory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.logging.LoggingEventListener.Factory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors.Contributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.recipes.CertificatePinning'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.recipes.CertificatePinning'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.recipes.CertificatePinning'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.internal.http.RequestLine'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.internal.cache.CacheStrategy.Factory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.internal.http2.Http2Connection.ReaderRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.internal.http2.Huffman.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.Credentials'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.AbstractSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.AbstractSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.internal.http2.Http2Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.http2.Http2Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.CurrentDateHeader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.platform.Platform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.recipes.PrintEvents'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.mockwebserver.MockWebServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.logging.LoggingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.logging.LoggingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.logging.LoggingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.logging.LoggingEventListener'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.recipes.WebSocketEcho'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.FormBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.Credentials'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.ws.WebSocketProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.Challenge'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.Challenge'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.http.RequestLine'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.http.RequestLine'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.http.RequestLine'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.internal.cache.CacheInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.internal.cache.CacheInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.internal.cache.CacheInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.internal.cache.CacheInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.internal.cache.CacheInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    } ]
  } ]
}