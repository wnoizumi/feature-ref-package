{
  "executionId" : "774e61f6-fe73-4e9a-8e59-3e53a18205f8",
  "computingTime" : 1017347,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 26,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.5816733067729087,
    "meanNumConcerns" : 1.7258687258687258,
    "meanMetricsIntensity" : 0.10570392479894604,
    "meanLackOfCohesion" : 0.6760798143144731
  },
  "population" : [ {
    "solutionId" : "7af56e06-5625-43c2-b67c-da4d959a8485",
    "objectives" : {
      "NumberOfConcerns" : 0.9798657718120806,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 0.6955300340376047,
      "MetricsIntensity" : 0.10727579968062007,
      "Density" : 0.9888765294771968
    },
    "euclideanDistance" : 50.02432692047705,
    "generation" : 1,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6717557251908395,
      "LackOfCohesion" : 0.6955300340376047,
      "MetricsIntensity" : 0.10727579968062007,
      "Density" : 3.5
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.OkHttpClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.RealCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "cdca894c-2f82-4247-b3f7-09ce7daf6c30",
    "objectives" : {
      "NumberOfConcerns" : 0.9776286353467561,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.6949949141356726,
      "MetricsIntensity" : 0.10740056574425076,
      "Density" : 0.9866518353726362
    },
    "euclideanDistance" : 51.0237571372894,
    "generation" : 1,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6679389312977098,
      "LackOfCohesion" : 0.6949949141356726,
      "MetricsIntensity" : 0.10740056574425076,
      "Density" : 3.4921259842519685
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout(), okhttp3.RealCall.RealCall(OkHttpClient, Request, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.OkHttpClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.RealCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "48193deb-dcf7-4d7e-ae3e-70be75f21663",
    "objectives" : {
      "NumberOfConcerns" : 0.9798657718120806,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.6949240160173633,
      "MetricsIntensity" : 0.10682051127416867,
      "Density" : 0.9877641824249166
    },
    "euclideanDistance" : 51.02381938879642,
    "generation" : 1,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6717557251908395,
      "LackOfCohesion" : 0.6949240160173633,
      "MetricsIntensity" : 0.10682051127416867,
      "Density" : 3.496062992125984
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.OkHttpClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "61b51a31-5a51-4ead-a34a-d57972181cc9",
    "objectives" : {
      "NumberOfConcerns" : 0.9753914988814317,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.6889596803774517,
      "MetricsIntensity" : 0.10701935162014095,
      "Density" : 0.9777530589543938
    },
    "euclideanDistance" : 53.02257545803666,
    "generation" : 1,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6641221374045803,
      "LackOfCohesion" : 0.6889596803774517,
      "MetricsIntensity" : 0.10701935162014097,
      "Density" : 3.4606299212598426
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.trustManager(SSLSocketFactory)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.OkHttpClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "53a11517-5029-441d-b1e3-42d2d2a42803",
    "objectives" : {
      "NumberOfConcerns" : 0.9776286353467561,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.6873287845871672,
      "MetricsIntensity" : 0.10702605947302432,
      "Density" : 0.9799777530589544
    },
    "euclideanDistance" : 53.0226365770382,
    "generation" : 1,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6679389312977098,
      "LackOfCohesion" : 0.6873287845871672,
      "MetricsIntensity" : 0.10702605947302433,
      "Density" : 3.468503937007874
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.trustManager(SSLSocketFactory)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.OkHttpClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "16e8ed73-16e4-4d4b-8e95-98388a228753",
    "objectives" : {
      "NumberOfConcerns" : 0.9776286353467561,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.6894559514523253,
      "MetricsIntensity" : 0.1069943984074148,
      "Density" : 0.978865406006674
    },
    "euclideanDistance" : 53.02264358311466,
    "generation" : 1,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6679389312977098,
      "LackOfCohesion" : 0.6894559514523253,
      "MetricsIntensity" : 0.10699439840741481,
      "Density" : 3.464566929133858
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.trustManager(SSLSocketFactory)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.OkHttpClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "3d11c441-632c-4794-8323-cd9e8edc182a",
    "objectives" : {
      "NumberOfConcerns" : 0.9776286353467561,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.6892914555891395,
      "MetricsIntensity" : 0.1070133282420416,
      "Density" : 0.9799777530589544
    },
    "euclideanDistance" : 53.022662029629466,
    "generation" : 1,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6679389312977098,
      "LackOfCohesion" : 0.6892914555891395,
      "MetricsIntensity" : 0.1070133282420416,
      "Density" : 3.468503937007874
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.trustManager(SSLSocketFactory)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.OkHttpClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "563f6d8e-cfe4-4872-bd0d-c91dc7f84dae",
    "objectives" : {
      "NumberOfConcerns" : 0.9776286353467561,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.6892914555891395,
      "MetricsIntensity" : 0.1070133282420416,
      "Density" : 0.9799777530589544
    },
    "euclideanDistance" : 53.022662029629466,
    "generation" : 1,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6679389312977098,
      "LackOfCohesion" : 0.6892914555891395,
      "MetricsIntensity" : 0.10701332824204161,
      "Density" : 3.468503937007874
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.trustManager(SSLSocketFactory)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.OkHttpClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "b54ef00f-0c13-4829-a5c5-ec6ff1e71879",
    "objectives" : {
      "NumberOfConcerns" : 0.9776286353467561,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.6888117993889593,
      "MetricsIntensity" : 0.10702003609492497,
      "Density" : 0.9810901001112347
    },
    "euclideanDistance" : 53.02267638017049,
    "generation" : 1,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6679389312977098,
      "LackOfCohesion" : 0.6888117993889593,
      "MetricsIntensity" : 0.10702003609492498,
      "Density" : 3.4724409448818903
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.trustManager(SSLSocketFactory)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.OkHttpClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "0ae0c0b6-2f51-41b4-819a-a51a9eb764ff",
    "objectives" : {
      "NumberOfConcerns" : 0.9798657718120806,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.6887716648510082,
      "MetricsIntensity" : 0.1069943984074148,
      "Density" : 0.9810901001112347
    },
    "euclideanDistance" : 53.02271710241656,
    "generation" : 1,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6717557251908395,
      "LackOfCohesion" : 0.6887716648510082,
      "MetricsIntensity" : 0.10699439840741483,
      "Density" : 3.4724409448818903
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.trustManager(SSLSocketFactory)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.OkHttpClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "8dec516d-9dc1-487a-8ace-8f8be7cc18fd",
    "objectives" : {
      "NumberOfConcerns" : 0.9753914988814317,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.6887205454221595,
      "MetricsIntensity" : 0.10713944682784553,
      "Density" : 0.978865406006674
    },
    "euclideanDistance" : 54.02217489984942,
    "generation" : 1,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6641221374045803,
      "LackOfCohesion" : 0.6887205454221595,
      "MetricsIntensity" : 0.10713944682784553,
      "Density" : 3.464566929133858
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.trustManager(SSLSocketFactory)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.OkHttpClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "d3c55b9a-3ae2-48c8-a329-b71920394ef4",
    "objectives" : {
      "NumberOfConcerns" : 0.9776286353467561,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.6893208021166879,
      "MetricsIntensity" : 0.10664199793381303,
      "Density" : 0.9766407119021134
    },
    "euclideanDistance" : 54.02218174521229,
    "generation" : 1,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6679389312977098,
      "LackOfCohesion" : 0.6893208021166879,
      "MetricsIntensity" : 0.10664199793381302,
      "Density" : 3.4566929133858273
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.trustManager(SSLSocketFactory), okhttp3.internal.platform.Platform.get()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.OkHttpClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "d00932c0-fe75-4813-a32a-3d70a4f5bed3",
    "objectives" : {
      "NumberOfConcerns" : 0.9776286353467561,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.684860874040654,
      "MetricsIntensity" : 0.10712120146800276,
      "Density" : 0.9810901001112347
    },
    "euclideanDistance" : 54.022206590454836,
    "generation" : 1,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6679389312977095,
      "LackOfCohesion" : 0.684860874040654,
      "MetricsIntensity" : 0.10712120146800276,
      "Density" : 3.4724409448818903
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.trustManager(SSLSocketFactory)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.OkHttpClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "e8fbd396-0514-4925-bd09-d114c55711ea",
    "objectives" : {
      "NumberOfConcerns" : 0.9821029082774049,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.6870332414076746,
      "MetricsIntensity" : 0.10705856381156774,
      "Density" : 0.985539488320356
    },
    "euclideanDistance" : 54.02239619284182,
    "generation" : 1,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6755725190839694,
      "LackOfCohesion" : 0.6870332414076746,
      "MetricsIntensity" : 0.10705856381156775,
      "Density" : 3.488188976377953
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.trustManager(SSLSocketFactory)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "accfdd3b-eb07-4352-9d91-2fd487809c70",
    "objectives" : {
      "NumberOfConcerns" : 0.9821029082774049,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.6858483266656612,
      "MetricsIntensity" : 0.10710227163337596,
      "Density" : 0.9866518353726362
    },
    "euclideanDistance" : 54.02240152742629,
    "generation" : 1,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6755725190839694,
      "LackOfCohesion" : 0.6858483266656612,
      "MetricsIntensity" : 0.10710227163337596,
      "Density" : 3.4921259842519685
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.trustManager(SSLSocketFactory)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.OkHttpClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "d813db14-81c7-45c9-8b8d-2c5e14e11e9f",
    "objectives" : {
      "NumberOfConcerns" : 0.9865771812080537,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.6873493002190365,
      "MetricsIntensity" : 0.10702002788122758,
      "Density" : 0.9877641824249166
    },
    "euclideanDistance" : 54.02252229359012,
    "generation" : 1,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.683206106870229,
      "LackOfCohesion" : 0.6873493002190365,
      "MetricsIntensity" : 0.10702002788122758,
      "Density" : 3.4960629921259843
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.trustManager(SSLSocketFactory)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.OkHttpClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "77c187e1-45eb-401d-a03e-15e2b0ede70a",
    "objectives" : {
      "NumberOfConcerns" : 0.9821029082774049,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 0.686992015582276,
      "MetricsIntensity" : 0.10708954040239325,
      "Density" : 0.985539488320356
    },
    "euclideanDistance" : 55.02198869910668,
    "generation" : 1,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6755725190839694,
      "LackOfCohesion" : 0.686992015582276,
      "MetricsIntensity" : 0.10708954040239324,
      "Density" : 3.488188976377953
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.trustManager(SSLSocketFactory)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.OkHttpClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "2194fba7-4ece-451d-905c-34d7386727ab",
    "objectives" : {
      "NumberOfConcerns" : 0.9686800894854586,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 0.694922639383135,
      "MetricsIntensity" : 0.10716611122753171,
      "Density" : 0.982202447163515
    },
    "euclideanDistance" : 57.02102651490152,
    "generation" : 1,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6526717557251909,
      "LackOfCohesion" : 0.694922639383135,
      "MetricsIntensity" : 0.1071661112275317,
      "Density" : 3.476377952755906
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.trustManager(SSLSocketFactory), okhttp3.internal.platform.Platform.buildCertificateChainCleaner(SSLSocketFactory)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.OkHttpClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "616e37c1-dc2b-49d4-8017-36afd00e492d",
    "objectives" : {
      "NumberOfConcerns" : 0.970917225950783,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 0.6949180761798819,
      "MetricsIntensity" : 0.10704601601982713,
      "Density" : 0.982202447163515
    },
    "euclideanDistance" : 57.02106428232474,
    "generation" : 1,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6564885496183208,
      "LackOfCohesion" : 0.6949180761798819,
      "MetricsIntensity" : 0.10704601601982715,
      "Density" : 3.4763779527559056
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.trustManager(SSLSocketFactory), okhttp3.internal.platform.Platform.buildCertificateChainCleaner(SSLSocketFactory)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.OkHttpClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "f617405f-59c9-43cc-a6e0-88150c850084",
    "objectives" : {
      "NumberOfConcerns" : 0.970917225950783,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 0.6945497953421688,
      "MetricsIntensity" : 0.10714115801480557,
      "Density" : 0.9833147942157954
    },
    "euclideanDistance" : 57.02107914526103,
    "generation" : 1,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6564885496183208,
      "LackOfCohesion" : 0.6945497953421688,
      "MetricsIntensity" : 0.10714115801480556,
      "Density" : 3.480314960629921
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.trustManager(SSLSocketFactory), okhttp3.internal.platform.Platform.buildCertificateChainCleaner(SSLSocketFactory)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.OkHttpClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "cc6194c5-4f34-4d12-9e94-92583ce81016",
    "objectives" : {
      "NumberOfConcerns" : 0.9753914988814317,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 0.6921751574190568,
      "MetricsIntensity" : 0.10687114366410724,
      "Density" : 0.9866518353726362
    },
    "euclideanDistance" : 57.0211837680544,
    "generation" : 1,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.66412213740458,
      "LackOfCohesion" : 0.6921751574190568,
      "MetricsIntensity" : 0.10687114366410724,
      "Density" : 3.4921259842519685
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.RealCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "3e74bd2d-6de7-4d35-80ed-e47ac2d2eacc",
    "objectives" : {
      "NumberOfConcerns" : 0.9686800894854586,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.6943274012878969,
      "MetricsIntensity" : 0.10716611122753171,
      "Density" : 0.9810901001112347
    },
    "euclideanDistance" : 58.020638173117995,
    "generation" : 1,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6526717557251909,
      "LackOfCohesion" : 0.6943274012878969,
      "MetricsIntensity" : 0.1071661112275317,
      "Density" : 3.4724409448818903
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout(), okhttp3.RealCall.RealCall(OkHttpClient, Request, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.trustManager(SSLSocketFactory), okhttp3.internal.platform.Platform.buildCertificateChainCleaner(SSLSocketFactory)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.OkHttpClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "72c9c55f-325b-4751-b384-d51caa111a2b",
    "objectives" : {
      "NumberOfConcerns" : 0.970917225950783,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.6958609841533575,
      "MetricsIntensity" : 0.10694659195059993,
      "Density" : 0.9810901001112347
    },
    "euclideanDistance" : 58.02069353366074,
    "generation" : 1,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6564885496183208,
      "LackOfCohesion" : 0.6958609841533575,
      "MetricsIntensity" : 0.10694659195059991,
      "Density" : 3.4724409448818903
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.trustManager(SSLSocketFactory), okhttp3.internal.platform.Platform.buildCertificateChainCleaner(SSLSocketFactory)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.OkHttpClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "01790ac3-0f37-4e0f-9caa-61b462bfd102",
    "objectives" : {
      "NumberOfConcerns" : 0.9753914988814317,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.692829950455322,
      "MetricsIntensity" : 0.10675707183450203,
      "Density" : 0.985539488320356
    },
    "euclideanDistance" : 58.02080736315002,
    "generation" : 1,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6641221374045803,
      "LackOfCohesion" : 0.692829950455322,
      "MetricsIntensity" : 0.10675707183450203,
      "Density" : 3.4881889763779528
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.RealCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "e0b7282d-575e-4bc9-98cc-4ae44fcd70b3",
    "objectives" : {
      "NumberOfConcerns" : 0.9753914988814317,
      "NumberOfRefactorings" : 59.0,
      "LackOfCohesion" : 0.6893501309206868,
      "MetricsIntensity" : 0.10695941900805238,
      "Density" : 0.982202447163515
    },
    "euclideanDistance" : 59.020358810698696,
    "generation" : 1,
    "numberOfRefactorings" : 59,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6641221374045803,
      "LackOfCohesion" : 0.6893501309206868,
      "MetricsIntensity" : 0.10695941900805239,
      "Density" : 3.4763779527559056
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter, okhttp3.RealCall.responseCallback], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.RealCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "b6041860-ff69-423d-a546-a34d9ee1ce2a",
    "objectives" : {
      "NumberOfConcerns" : 0.970917225950783,
      "NumberOfRefactorings" : 61.0,
      "LackOfCohesion" : 0.6912688756887766,
      "MetricsIntensity" : 0.10697766436789517,
      "Density" : 0.9833147942157954
    },
    "euclideanDistance" : 61.01965982471011,
    "generation" : 1,
    "numberOfRefactorings" : 61,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6564885496183208,
      "LackOfCohesion" : 0.6912688756887766,
      "MetricsIntensity" : 0.10697766436789516,
      "Density" : 3.4803149606299204
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter, okhttp3.RealCall.responseCallback], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Stream'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.recipes.ParseResponseWithMoshi.GistFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.recipes.RewriteResponseCacheControl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.RealCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  } ]
}