{
  "executionId" : "bbf971ad-a82c-4960-8a81-27467f3cde1f",
  "computingTime" : 982139,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.418808411214953,
    "meanNumConcerns" : 1.9070422535211269,
    "meanMetricsIntensity" : 0.06269018858892109,
    "meanLackOfCohesion" : 1.304513730459456
  },
  "population" : [ {
    "solutionId" : "e81e1413-af0e-474b-a421-4da6af3509b0",
    "objectives" : {
      "NumberOfConcerns" : 1.0050221565731168,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.2972728900178871,
      "MetricsIntensity" : 0.06267990224928231,
      "Density" : 1.004954724073125
    },
    "euclideanDistance" : 10.18365598662686,
    "generation" : 18,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9058823529411761,
      "LackOfCohesion" : 1.2972728900178871,
      "MetricsIntensity" : 0.06267990224928233,
      "Density" : 3.415795586527294
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "9d19ff03-63cd-4913-9d98-6c3394452712",
    "objectives" : {
      "NumberOfConcerns" : 1.0053175775480059,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.2977736912999385,
      "MetricsIntensity" : 0.06268581232652394,
      "Density" : 1.0046130189646336
    },
    "euclideanDistance" : 10.183715275600429,
    "generation" : 17,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9064425770308122,
      "LackOfCohesion" : 1.2977736912999385,
      "MetricsIntensity" : 0.06268581232652394,
      "Density" : 3.414634146341464
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel(), io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "38fc1d96-751d-4c47-b2de-9e3193c18f89",
    "objectives" : {
      "NumberOfConcerns" : 1.0053175775480059,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.2977236111717334,
      "MetricsIntensity" : 0.06267212583185916,
      "Density" : 1.0047838715188793
    },
    "euclideanDistance" : 10.183725665322115,
    "generation" : 39,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9064425770308122,
      "LackOfCohesion" : 1.2977236111717334,
      "MetricsIntensity" : 0.06267212583185916,
      "Density" : 3.4152148664343787
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "7edb23cb-dcf7-43ef-9b24-bfce0662b521",
    "objectives" : {
      "NumberOfConcerns" : 1.0035450516986706,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.2974516470172968,
      "MetricsIntensity" : 0.06273741694273773,
      "Density" : 1.001708525542457
    },
    "euclideanDistance" : 11.166818678601613,
    "generation" : 30,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.90414798206278,
      "LackOfCohesion" : 1.2974516470172968,
      "MetricsIntensity" : 0.06273741694273773,
      "Density" : 3.406740267286462
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "e71c974c-0a61-4603-ad02-f73620b07308",
    "objectives" : {
      "NumberOfConcerns" : 1.0047267355982274,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.2985290172317685,
      "MetricsIntensity" : 0.0626896410282725,
      "Density" : 1.0041004613018965
    },
    "euclideanDistance" : 11.167264712063456,
    "generation" : 37,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9063901345291479,
      "LackOfCohesion" : 1.2985290172317685,
      "MetricsIntensity" : 0.0626896410282725,
      "Density" : 3.41487507263219
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "144c1ff8-bc77-4620-9a82-6a8ba2951791",
    "objectives" : {
      "NumberOfConcerns" : 1.0029542097488922,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.298257374041174,
      "MetricsIntensity" : 0.06275498196244063,
      "Density" : 1.0010251153254741
    },
    "euclideanDistance" : 12.153081042492014,
    "generation" : 37,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9040942232192934,
      "LackOfCohesion" : 1.298257374041174,
      "MetricsIntensity" : 0.06275498196244064,
      "Density" : 3.406395348837209
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "d0bc9c04-bce0-43cc-8c3b-7fcbda13939f",
    "objectives" : {
      "NumberOfConcerns" : 1.004135893648449,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.2984889290377417,
      "MetricsIntensity" : 0.06267594630360493,
      "Density" : 1.0035879036391595
    },
    "euclideanDistance" : 12.153414308181986,
    "generation" : 33,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9052690582959642,
      "LackOfCohesion" : 1.2984889290377417,
      "MetricsIntensity" : 0.06267594630360494,
      "Density" : 3.4131319000581057
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "ce20d34d-ef01-4f13-a399-258e559f99e1",
    "objectives" : {
      "NumberOfConcerns" : 1.0020679468242246,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.297820436329868,
      "MetricsIntensity" : 0.06275021304800087,
      "Density" : 1.0005125576627372
    },
    "euclideanDistance" : 13.141287647041533,
    "generation" : 31,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9024116657319132,
      "LackOfCohesion" : 1.297820436329868,
      "MetricsIntensity" : 0.06275021304800088,
      "Density" : 3.404651162790697
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "5bc205f8-bb4d-41e9-8635-ab2611065b36",
    "objectives" : {
      "NumberOfConcerns" : 1.0035450516986706,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.2992952801783582,
      "MetricsIntensity" : 0.06269347433736372,
      "Density" : 1.0029044934221767
    },
    "euclideanDistance" : 13.141728150838212,
    "generation" : 38,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9052159282108805,
      "LackOfCohesion" : 1.2992952801783582,
      "MetricsIntensity" : 0.06269347433736373,
      "Density" : 3.412790697674419
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "e9fda799-c4d7-4fc7-9fe2-4fb6c60ed5b4",
    "objectives" : {
      "NumberOfConcerns" : 1.0044313146233383,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.2973229701460924,
      "MetricsIntensity" : 0.0630868518935579,
      "Density" : 1.0061506919528447
    },
    "euclideanDistance" : 13.141851023370478,
    "generation" : 34,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9058295964125564,
      "LackOfCohesion" : 1.2973229701460924,
      "MetricsIntensity" : 0.0630868518935579,
      "Density" : 3.4218477629285307
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel(), io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "330359db-50a6-4d1d-9c80-15b46201c62c",
    "objectives" : {
      "NumberOfConcerns" : 1.0044313146233383,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.2973229701460927,
      "MetricsIntensity" : 0.06308685189355788,
      "Density" : 1.0061506919528447
    },
    "euclideanDistance" : 13.141851023370478,
    "generation" : 13,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9058295964125564,
      "LackOfCohesion" : 1.2973229701460927,
      "MetricsIntensity" : 0.0630868518935579,
      "Density" : 3.42184776292853
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel(), io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "6ea40208-9035-4735-a578-d41bf96ddaae",
    "objectives" : {
      "NumberOfConcerns" : 1.0044313146233383,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.2972728900178871,
      "MetricsIntensity" : 0.06307316539889311,
      "Density" : 1.0063215445070903
    },
    "euclideanDistance" : 13.141859095733142,
    "generation" : 32,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9058295964125562,
      "LackOfCohesion" : 1.2972728900178871,
      "MetricsIntensity" : 0.06307316539889311,
      "Density" : 3.422428820453225
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "aa9181b7-785d-45c5-8367-c3d135dfe4bf",
    "objectives" : {
      "NumberOfConcerns" : 1.0014771048744462,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.2986268704677348,
      "MetricsIntensity" : 0.06276779634652675,
      "Density" : 0.9998291474457544
    },
    "euclideanDistance" : 14.131276880049759,
    "generation" : 36,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9023569023569018,
      "LackOfCohesion" : 1.2986268704677348,
      "MetricsIntensity" : 0.06276779634652674,
      "Density" : 3.404304828388599
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "8fd59f85-376b-450b-8781-5baa4bd1d1d6",
    "objectives" : {
      "NumberOfConcerns" : 1.0017725258493353,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.299078405687482,
      "MetricsIntensity" : 0.06276000588379818,
      "Density" : 1.0020502306509482
    },
    "euclideanDistance" : 14.131496607958983,
    "generation" : 45,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9029180695847365,
      "LackOfCohesion" : 1.299078405687482,
      "MetricsIntensity" : 0.06276000588379818,
      "Density" : 3.4118673647469455
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "b7ef2d18-59c5-4e31-8cf5-90384c21b573",
    "objectives" : {
      "NumberOfConcerns" : 1.0029542097488922,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.2974516470172968,
      "MetricsIntensity" : 0.06313091657049022,
      "Density" : 1.0030753459764223
    },
    "euclideanDistance" : 14.131505354544988,
    "generation" : 36,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9040942232192937,
      "LackOfCohesion" : 1.2974516470172968,
      "MetricsIntensity" : 0.06313091657049022,
      "Density" : 3.4133720930232556
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "74ef8396-a348-44ba-8c9e-83981bc2a72f",
    "objectives" : {
      "NumberOfConcerns" : 1.00384047267356,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.2997295584846191,
      "MetricsIntensity" : 0.06273115748994247,
      "Density" : 1.0013668204339654
    },
    "euclideanDistance" : 14.131654656372062,
    "generation" : 35,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9057767807066743,
      "LackOfCohesion" : 1.2997295584846191,
      "MetricsIntensity" : 0.06273115748994247,
      "Density" : 3.407558139534883
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "7cc09815-6aef-48ef-8551-7a4bdfb540d0",
    "objectives" : {
      "NumberOfConcerns" : 1.0032496307237815,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.2992293813759972,
      "MetricsIntensity" : 0.06271240350362553,
      "Density" : 1.003246198530668
    },
    "euclideanDistance" : 14.131699918530591,
    "generation" : 38,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9046550757150866,
      "LackOfCohesion" : 1.2992293813759972,
      "MetricsIntensity" : 0.06271240350362552,
      "Density" : 3.413953488372093
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "3a0d0b33-02a8-48b6-a109-776f9b7fd3f4",
    "objectives" : {
      "NumberOfConcerns" : 1.0011816838995569,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.2985609319912002,
      "MetricsIntensity" : 0.06278673632424232,
      "Density" : 1.0001708525542456
    },
    "euclideanDistance" : 15.122595979752523,
    "generation" : 25,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9017957351290684,
      "LackOfCohesion" : 1.2985609319912002,
      "MetricsIntensity" : 0.06278673632424232,
      "Density" : 3.405468295520651
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "f452ba64-85f0-46fd-8ec2-89ded54b2e41",
    "objectives" : {
      "NumberOfConcerns" : 1.0044313146233383,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.2968202579613737,
      "MetricsIntensity" : 0.06267839630606596,
      "Density" : 1.0013668204339654
    },
    "euclideanDistance" : 15.122740794501654,
    "generation" : 47,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9058295964125562,
      "LackOfCohesion" : 1.2968202579613737,
      "MetricsIntensity" : 0.06267839630606598,
      "Density" : 3.4055781522370725
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "64011359-e67c-420b-a38b-716f23845ddb",
    "objectives" : {
      "NumberOfConcerns" : 1.0020679468242246,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.2991880642408489,
      "MetricsIntensity" : 0.06274669334581752,
      "Density" : 1.002733640867931
    },
    "euclideanDistance" : 15.12287808911956,
    "generation" : 45,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9034792368125708,
      "LackOfCohesion" : 1.2991880642408489,
      "MetricsIntensity" : 0.06274669334581752,
      "Density" : 3.4141942990110534
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "f9a9c221-7666-4a8b-b499-a10a0557ecf0",
    "objectives" : {
      "NumberOfConcerns" : 1.0029542097488922,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.2976413500783166,
      "MetricsIntensity" : 0.06308615511871392,
      "Density" : 1.0051255766273706
    },
    "euclideanDistance" : 15.122964243429402,
    "generation" : 32,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9040942232192934,
      "LackOfCohesion" : 1.2976413500783166,
      "MetricsIntensity" : 0.06308615511871392,
      "Density" : 3.420348837209302
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "86fa72b2-c99c-4376-ae68-b8ce6911dc41",
    "objectives" : {
      "NumberOfConcerns" : 1.002658788774003,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.3000366637649454,
      "MetricsIntensity" : 0.06272996403903014,
      "Density" : 1.0025627883136854
    },
    "euclideanDistance" : 15.122978779550625,
    "generation" : 39,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9046015712682383,
      "LackOfCohesion" : 1.3000366637649454,
      "MetricsIntensity" : 0.06272996403903015,
      "Density" : 3.4136125654450264
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "7a8dae1f-0fde-4a76-93c5-44693b0ea70a",
    "objectives" : {
      "NumberOfConcerns" : 1.0011816838995569,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.298206154318542,
      "MetricsIntensity" : 0.06277598548567692,
      "Density" : 0.9998291474457544
    },
    "euclideanDistance" : 16.114940370095148,
    "generation" : 36,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9017957351290684,
      "LackOfCohesion" : 1.298206154318542,
      "MetricsIntensity" : 0.06277598548567692,
      "Density" : 3.4062863795110596
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "5dd417a0-8cdd-40e8-ae8b-074c46ad4e10",
    "objectives" : {
      "NumberOfConcerns" : 1.00384047267356,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.2976256050881054,
      "MetricsIntensity" : 0.06269592581395379,
      "Density" : 1.0006834102169828
    },
    "euclideanDistance" : 16.11511172695228,
    "generation" : 46,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9057767807066743,
      "LackOfCohesion" : 1.2976256050881054,
      "MetricsIntensity" : 0.06269592581395379,
      "Density" : 3.405232558139535
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "b49dc6ee-90eb-4874-b55a-306b7464c3db",
    "objectives" : {
      "NumberOfConcerns" : 1.002658788774003,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.2996818860922867,
      "MetricsIntensity" : 0.06271921320046474,
      "Density" : 1.0022210832051939
    },
    "euclideanDistance" : 16.115299514779974,
    "generation" : 37,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9046015712682383,
      "LackOfCohesion" : 1.2996818860922867,
      "MetricsIntensity" : 0.06271921320046475,
      "Density" : 3.414435389988361
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "73e07321-b92e-4d5f-89c5-93354fcb92af",
    "objectives" : {
      "NumberOfConcerns" : 1.0005908419497784,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.2990133066203402,
      "MetricsIntensity" : 0.06279359490211614,
      "Density" : 0.9991457372287715
    },
    "euclideanDistance" : 17.10821010052056,
    "generation" : 35,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9017405951712527,
      "LackOfCohesion" : 1.2990133066203402,
      "MetricsIntensity" : 0.06279359490211615,
      "Density" : 3.405940594059406
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "4e3cca51-c4e3-4073-9c3e-741966aefd73",
    "objectives" : {
      "NumberOfConcerns" : 1.0029542097488922,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.2965002251827222,
      "MetricsIntensity" : 0.06408589434544736,
      "Density" : 1.0056381342901077
    },
    "euclideanDistance" : 17.10854304257801,
    "generation" : 37,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.903026905829596,
      "LackOfCohesion" : 1.2965002251827222,
      "MetricsIntensity" : 0.06408589434544736,
      "Density" : 3.4201045903544447
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "4f62067f-743f-4e3e-88cf-20dab2835cab",
    "objectives" : {
      "NumberOfConcerns" : 1.0032496307237815,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.2969509463365687,
      "MetricsIntensity" : 0.06407811792802419,
      "Density" : 1.0054672817358619
    },
    "euclideanDistance" : 17.108584454553487,
    "generation" : 9,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9035874439461884,
      "LackOfCohesion" : 1.2969509463365687,
      "MetricsIntensity" : 0.06407811792802419,
      "Density" : 3.41952353282975
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "0c812974-b55b-44da-859a-2988a3d9ced3",
    "objectives" : {
      "NumberOfConcerns" : 1.0047267355982274,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.2985843441351024,
      "MetricsIntensity" : 0.06267145115905733,
      "Density" : 1.0039296087476508
    },
    "euclideanDistance" : 17.108699526327808,
    "generation" : 14,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9063901345291479,
      "LackOfCohesion" : 1.2985843441351024,
      "MetricsIntensity" : 0.06267145115905734,
      "Density" : 3.4142940151074965
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "ed5bffda-c6d0-4589-93e7-e577a4c14613",
    "objectives" : {
      "NumberOfConcerns" : 1.0002954209748893,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.2989473284218318,
      "MetricsIntensity" : 0.06281254628945686,
      "Density" : 0.9994874423372629
    },
    "euclideanDistance" : 18.102231234148977,
    "generation" : 43,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.901179112857945,
      "LackOfCohesion" : 1.2989473284218318,
      "MetricsIntensity" : 0.06281254628945686,
      "Density" : 3.4071054164239953
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "12f19238-aad8-4e5c-a01f-16cc25c47da0",
    "objectives" : {
      "NumberOfConcerns" : 1.00384047267356,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.2968202579613735,
      "MetricsIntensity" : 0.06307189593381846,
      "Density" : 1.002733640867931
    },
    "euclideanDistance" : 18.102455394079044,
    "generation" : 46,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9057767807066743,
      "LackOfCohesion" : 1.2968202579613735,
      "MetricsIntensity" : 0.06307189593381846,
      "Density" : 3.4122093023255817
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "4e71d7f9-c79c-4f34-aeea-4d47baf6b626",
    "objectives" : {
      "NumberOfConcerns" : 1.0014771048744462,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.2999721419617056,
      "MetricsIntensity" : 0.06276353554499679,
      "Density" : 1.0020502306509482
    },
    "euclideanDistance" : 18.10251164583539,
    "generation" : 40,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9034250421111736,
      "LackOfCohesion" : 1.2999721419617056,
      "MetricsIntensity" : 0.06276353554499679,
      "Density" : 3.4158415841584158
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "4c4c34cd-ce58-4e8f-86ac-416433a37269",
    "objectives" : {
      "NumberOfConcerns" : 0.9997045790251108,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.2997554140126024,
      "MetricsIntensity" : 0.06283018835822897,
      "Density" : 0.9988040321202802
    },
    "euclideanDistance" : 19.096867033854732,
    "generation" : 29,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.901123595505618,
      "LackOfCohesion" : 1.2997554140126024,
      "MetricsIntensity" : 0.06283018835822897,
      "Density" : 3.406759906759907
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "26ec4258-d38f-4bef-939f-cac164a4f4e9",
    "objectives" : {
      "NumberOfConcerns" : 1.0005908419497784,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.2995346778194221,
      "MetricsIntensity" : 0.06275875971458596,
      "Density" : 1.0015376729882113
    },
    "euclideanDistance" : 19.0970413620588,
    "generation" : 35,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9017405951712523,
      "LackOfCohesion" : 1.2995346778194221,
      "MetricsIntensity" : 0.06275875971458596,
      "Density" : 3.4140943506115304
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "10a4bbfc-966c-4f3f-a65c-7bc17faed6d7",
    "objectives" : {
      "NumberOfConcerns" : 1.0017725258493353,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.2973149176412409,
      "MetricsIntensity" : 0.0641042596732579,
      "Density" : 1.004271313856142
    },
    "euclideanDistance" : 19.09710041909566,
    "generation" : 44,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9018508132361187,
      "LackOfCohesion" : 1.2973149176412409,
      "MetricsIntensity" : 0.0641042596732579,
      "Density" : 3.417441860465116
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel(), io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "33de5860-d891-43b7-8f12-ca6af991fe48",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 1.2970468416934575,
      "MetricsIntensity" : 0.06415789707207945,
      "Density" : 1.0011959678797198
    },
    "euclideanDistance" : 20.09200935972812,
    "generation" : 39,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8995510662177333,
      "LackOfCohesion" : 1.2970468416934575,
      "MetricsIntensity" : 0.06415789707207945,
      "Density" : 3.4089586969168115
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "6b005ee1-fe67-4dd4-927c-d5225cf0bb45",
    "objectives" : {
      "NumberOfConcerns" : 1.0032496307237815,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 1.2968620164968183,
      "MetricsIntensity" : 0.06312017866137588,
      "Density" : 1.002733640867931
    },
    "euclideanDistance" : 20.09223282322953,
    "generation" : 43,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9046550757150875,
      "LackOfCohesion" : 1.2968620164968183,
      "MetricsIntensity" : 0.06312017866137588,
      "Density" : 3.414194299011053
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "7e8edb1f-ec68-4950-82ec-6065d65e1d74",
    "objectives" : {
      "NumberOfConcerns" : 1.0002954209748893,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 1.3007951970144107,
      "MetricsIntensity" : 0.06276856950779025,
      "Density" : 1.0006834102169828
    },
    "euclideanDistance" : 20.092236467217894,
    "generation" : 46,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.902247191011236,
      "LackOfCohesion" : 1.3007951970144107,
      "MetricsIntensity" : 0.06276856950779025,
      "Density" : 3.4131701631701623
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "89b8dbc9-7ba4-4a4b-9f06-fd485cf4bdbe",
    "objectives" : {
      "NumberOfConcerns" : 1.0020679468242246,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 1.2978298749687525,
      "MetricsIntensity" : 0.06275228542267389,
      "Density" : 0.9974372116863147
    },
    "euclideanDistance" : 21.08761061369913,
    "generation" : 35,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9034792368125706,
      "LackOfCohesion" : 1.2978298749687525,
      "MetricsIntensity" : 0.06275228542267389,
      "Density" : 3.396160558464223
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "62e4b263-b0a8-44a0-af86-6c5caf766816",
    "objectives" : {
      "NumberOfConcerns" : 1.0008862629246678,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 1.298695607251436,
      "MetricsIntensity" : 0.06273150544244745,
      "Density" : 0.9986331795660345
    },
    "euclideanDistance" : 21.087664333934917,
    "generation" : 39,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.902302077484559,
      "LackOfCohesion" : 1.298695607251436,
      "MetricsIntensity" : 0.06273150544244743,
      "Density" : 3.4022118742724095
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "b685c127-b028-4b84-aed6-70c3ed6e700c",
    "objectives" : {
      "NumberOfConcerns" : 1.0005908419497784,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 1.3004325550426006,
      "MetricsIntensity" : 0.06274153575831035,
      "Density" : 1.0010251153254741
    },
    "euclideanDistance" : 21.08787079448824,
    "generation" : 45,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9017405951712527,
      "LackOfCohesion" : 1.3004325550426006,
      "MetricsIntensity" : 0.06274153575831036,
      "Density" : 3.4103608847497098
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "040b96ca-bc62-4bc9-8b9f-287fa7403a96",
    "objectives" : {
      "NumberOfConcerns" : 0.9997045790251108,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.3010074923541002,
      "MetricsIntensity" : 0.06290170316428896,
      "Density" : 0.9960703912523492
    },
    "euclideanDistance" : 22.08366234547784,
    "generation" : 42,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.902192242833052,
      "LackOfCohesion" : 1.3010074923541002,
      "MetricsIntensity" : 0.06290170316428896,
      "Density" : 3.399416909620991
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutOtherMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableStageObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "7035918e-f57b-4fbd-b8b4-0041e7a347b6",
    "objectives" : {
      "NumberOfConcerns" : 1.0023633677991137,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.296097238747675,
      "MetricsIntensity" : 0.06409892858215784,
      "Density" : 1.0018793780967026
    },
    "euclideanDistance" : 22.083760353125907,
    "generation" : 39,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9029725182277062,
      "LackOfCohesion" : 1.296097238747675,
      "MetricsIntensity" : 0.06409892858215784,
      "Density" : 3.4093023255813955
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel(), io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "f7d5a1f2-5ca7-457b-b202-fef61176908e",
    "objectives" : {
      "NumberOfConcerns" : 1.0023633677991137,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.2960471285051414,
      "MetricsIntensity" : 0.06408523385749024,
      "Density" : 1.0020502306509482
    },
    "euclideanDistance" : 22.08376512423455,
    "generation" : 46,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9029725182277062,
      "LackOfCohesion" : 1.2960471285051414,
      "MetricsIntensity" : 0.06408523385749024,
      "Density" : 3.409883720930233
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "ef25d2f2-ef72-4207-b799-6eb12a115189",
    "objectives" : {
      "NumberOfConcerns" : 1.0008862629246678,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.2962252555379365,
      "MetricsIntensity" : 0.06414362872320899,
      "Density" : 0.9989748846745259
    },
    "euclideanDistance" : 23.079948839841954,
    "generation" : 39,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9012345679012348,
      "LackOfCohesion" : 1.2962252555379365,
      "MetricsIntensity" : 0.06414362872320899,
      "Density" : 3.401396160558465
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "c4eda3ef-bdc2-40e4-9f3f-a6104f6abbbc",
    "objectives" : {
      "NumberOfConcerns" : 1.002658788774003,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.2972144491877637,
      "MetricsIntensity" : 0.06274276856887484,
      "Density" : 0.9972663591320691
    },
    "euclideanDistance" : 23.08000361395014,
    "generation" : 44,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9046015712682383,
      "LackOfCohesion" : 1.2972144491877637,
      "MetricsIntensity" : 0.06274276856887484,
      "Density" : 3.3975552968568103
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "919972d5-3c82-4f8f-8eeb-7351fa974a0b",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.3009220480436858,
      "MetricsIntensity" : 0.06291615037200275,
      "Density" : 0.9969246540235777
    },
    "euclideanDistance" : 23.080082655459965,
    "generation" : 43,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9027543563799885,
      "LackOfCohesion" : 1.3009220480436858,
      "MetricsIntensity" : 0.06291615037200277,
      "Density" : 3.402332361516035
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutOtherMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableStageObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "2b79e181-bf11-44c9-947b-ef80ec4e8ac1",
    "objectives" : {
      "NumberOfConcerns" : 1.0023633677991137,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.297860183200888,
      "MetricsIntensity" : 0.06273530763591416,
      "Density" : 0.9996582948915086
    },
    "euclideanDistance" : 23.080130541260235,
    "generation" : 40,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9040404040404035,
      "LackOfCohesion" : 1.297860183200888,
      "MetricsIntensity" : 0.06273530763591417,
      "Density" : 3.4037230948225714
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "485b2343-65a7-489a-afe9-fcae291fe966",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.3002320976557933,
      "MetricsIntensity" : 0.06280375562005344,
      "Density" : 1.0010251153254741
    },
    "euclideanDistance" : 23.080220950004072,
    "generation" : 46,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.901685393258428,
      "LackOfCohesion" : 1.3002320976557933,
      "MetricsIntensity" : 0.06280375562005343,
      "Density" : 3.4123471170646473
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "85d49ed2-bf32-4c89-922e-0ea4bb640097",
    "objectives" : {
      "NumberOfConcerns" : 0.9994091580502216,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.3020000014426496,
      "MetricsIntensity" : 0.0628102337344338,
      "Density" : 1.0003417051084913
    },
    "euclideanDistance" : 23.080265408382818,
    "generation" : 34,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.901630129286116,
      "LackOfCohesion" : 1.3020000014426496,
      "MetricsIntensity" : 0.0628102337344338,
      "Density" : 3.413994169096209
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "f8b37673-59ee-4600-bafc-5120aa395ddb",
    "objectives" : {
      "NumberOfConcerns" : 1.0029542097488922,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.2971291592018115,
      "MetricsIntensity" : 0.062757189098103,
      "Density" : 0.9981206219032974
    },
    "euclideanDistance" : 24.076724121922332,
    "generation" : 44,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9051627384960723,
      "LackOfCohesion" : 1.2971291592018115,
      "MetricsIntensity" : 0.062757189098103,
      "Density" : 3.4004656577415586
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "02e49616-4dec-4cf9-896f-a91b34d5717d",
    "objectives" : {
      "NumberOfConcerns" : 0.9994091580502216,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.3003682329798518,
      "MetricsIntensity" : 0.06277513388988502,
      "Density" : 1.0005125576627372
    },
    "euclideanDistance" : 24.076850755487385,
    "generation" : 44,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9005617977528093,
      "LackOfCohesion" : 1.3003682329798518,
      "MetricsIntensity" : 0.06277513388988501,
      "Density" : 3.412587412587412
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "fd1d51d5-576e-4f42-b4f5-ef60eabd9dc4",
    "objectives" : {
      "NumberOfConcerns" : 0.9994091580502216,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.2965935285337304,
      "MetricsIntensity" : 0.06415727913785546,
      "Density" : 1.0
    },
    "euclideanDistance" : 25.07357353070951,
    "generation" : 32,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8994946659180227,
      "LackOfCohesion" : 1.2965935285337304,
      "MetricsIntensity" : 0.06415727913785546,
      "Density" : 3.4068684516880077
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "0850bf52-3682-4594-94c4-bc6eb1881967",
    "objectives" : {
      "NumberOfConcerns" : 1.002658788774003,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.2964088648821954,
      "MetricsIntensity" : 0.063118936719645,
      "Density" : 0.9993165897830173
    },
    "euclideanDistance" : 25.07366383754953,
    "generation" : 30,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9046015712682383,
      "LackOfCohesion" : 1.2964088648821954,
      "MetricsIntensity" : 0.06311893671964501,
      "Density" : 3.4045401629802092
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "d6dc7844-049d-4c5b-be27-3a9c8fdb17c9",
    "objectives" : {
      "NumberOfConcerns" : 0.9991137370753324,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.302665777228789,
      "MetricsIntensity" : 0.06293566361259273,
      "Density" : 0.9955578335896121
    },
    "euclideanDistance" : 25.07369662982608,
    "generation" : 29,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9021372328458936,
      "LackOfCohesion" : 1.302665777228789,
      "MetricsIntensity" : 0.06293566361259273,
      "Density" : 3.399649941656942
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutOtherMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableStageObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "21e2c89e-e3fd-423b-ba2b-960b91705068",
    "objectives" : {
      "NumberOfConcerns" : 1.0011816838995569,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.296587316938115,
      "MetricsIntensity" : 0.06317678498556117,
      "Density" : 0.9984623270117888
    },
    "euclideanDistance" : 26.070757982061885,
    "generation" : 41,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.902863559797867,
      "LackOfCohesion" : 1.296587316938115,
      "MetricsIntensity" : 0.06317678498556116,
      "Density" : 3.4036109493302256
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "ce7f249a-cc32-4210-be15-d4f0de9665a8",
    "objectives" : {
      "NumberOfConcerns" : 1.0017725258493353,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.2976000344841765,
      "MetricsIntensity" : 0.06276855263263527,
      "Density" : 0.9965829489150863
    },
    "euclideanDistance" : 26.07075816903505,
    "generation" : 36,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9039865244244807,
      "LackOfCohesion" : 1.2976000344841765,
      "MetricsIntensity" : 0.06276855263263528,
      "Density" : 3.399184149184149
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "e5586d41-252f-4df1-a8c8-9f0ce4fb65c2",
    "objectives" : {
      "NumberOfConcerns" : 0.9982274741506647,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.2997805295440472,
      "MetricsIntensity" : 0.06322340069151042,
      "Density" : 0.9994874423372629
    },
    "euclideanDistance" : 26.07084309839089,
    "generation" : 45,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.899381675098371,
      "LackOfCohesion" : 1.2997805295440472,
      "MetricsIntensity" : 0.0632234006915104,
      "Density" : 3.4110787172011676
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "7d99b211-89d1-4841-a6fa-c53ab7a37aea",
    "objectives" : {
      "NumberOfConcerns" : 0.9979320531757755,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.3002521900809487,
      "MetricsIntensity" : 0.06424844260883886,
      "Density" : 0.9996582948915086
    },
    "euclideanDistance" : 26.070864364448852,
    "generation" : 36,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.898819561551433,
      "LackOfCohesion" : 1.3002521900809487,
      "MetricsIntensity" : 0.06424844260883887,
      "Density" : 3.40967365967366
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "56b04445-efb6-4324-901f-29e8ab8a9360",
    "objectives" : {
      "NumberOfConcerns" : 1.0014771048744462,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.2975340562856679,
      "MetricsIntensity" : 0.06278750460512152,
      "Density" : 0.9969246540235777
    },
    "euclideanDistance" : 27.068142752234472,
    "generation" : 40,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9034250421111736,
      "LackOfCohesion" : 1.2975340562856679,
      "MetricsIntensity" : 0.06278750460512152,
      "Density" : 3.400349650349651
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "d5d36447-5720-4652-9805-caf09e9be70d",
    "objectives" : {
      "NumberOfConcerns" : 0.9979320531757755,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.2995717118397503,
      "MetricsIntensity" : 0.06418659892708545,
      "Density" : 1.0015376729882113
    },
    "euclideanDistance" : 27.068283149229583,
    "generation" : 34,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.898819561551433,
      "LackOfCohesion" : 1.2995717118397503,
      "MetricsIntensity" : 0.06418659892708545,
      "Density" : 3.418075801749271
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "567c560b-aa1c-40d3-ac77-8d1fa38bf653",
    "objectives" : {
      "NumberOfConcerns" : 0.9979320531757755,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.2981444320670816,
      "MetricsIntensity" : 0.064213147222767,
      "Density" : 0.996753801469332
    },
    "euclideanDistance" : 28.065613993253066,
    "generation" : 41,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.898819561551433,
      "LackOfCohesion" : 1.2981444320670816,
      "MetricsIntensity" : 0.064213147222767,
      "Density" : 3.3997668997669
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "03d68b98-4982-41ee-89f7-0f3cbbc575a0",
    "objectives" : {
      "NumberOfConcerns" : 0.9997045790251108,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.2969560298943887,
      "MetricsIntensity" : 0.06318986060221692,
      "Density" : 0.9972663591320691
    },
    "euclideanDistance" : 28.065638017660365,
    "generation" : 42,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9011235955056178,
      "LackOfCohesion" : 1.2969560298943887,
      "MetricsIntensity" : 0.06318986060221692,
      "Density" : 3.401515151515151
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "0ae4ed80-4b22-4038-a708-b537469c8b07",
    "objectives" : {
      "NumberOfConcerns" : 0.9988183161004431,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.2993280449418423,
      "MetricsIntensity" : 0.06282753229902703,
      "Density" : 0.9952161284811208
    },
    "euclideanDistance" : 28.06564258730154,
    "generation" : 45,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9005059021922424,
      "LackOfCohesion" : 1.2993280449418423,
      "MetricsIntensity" : 0.06282753229902704,
      "Density" : 3.396501457725948
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "df73de69-a1ea-4c10-83a3-cc9d77d81ad6",
    "objectives" : {
      "NumberOfConcerns" : 0.9985228951255539,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 1.3005973848929042,
      "MetricsIntensity" : 0.06294878318436987,
      "Density" : 0.9948744233726294
    },
    "euclideanDistance" : 29.06341926197373,
    "generation" : 41,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.901012373453318,
      "LackOfCohesion" : 1.3005973848929042,
      "MetricsIntensity" : 0.06294878318436987,
      "Density" : 3.399299474605955
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutOtherMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableStageObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "a5c00b1c-a4b4-4a75-a210-e605f9beac4a",
    "objectives" : {
      "NumberOfConcerns" : 1.0011816838995569,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 1.2956352702457847,
      "MetricsIntensity" : 0.06413288435325884,
      "Density" : 0.9986331795660345
    },
    "euclideanDistance" : 29.063420596548276,
    "generation" : 25,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9017957351290684,
      "LackOfCohesion" : 1.2956352702457847,
      "MetricsIntensity" : 0.06413288435325884,
      "Density" : 3.4022118742724095
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "6375f40f-3a4f-40b4-b31f-5d442c40b442",
    "objectives" : {
      "NumberOfConcerns" : 0.9997045790251108,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.2958132565614056,
      "MetricsIntensity" : 0.06419134306326504,
      "Density" : 0.9977789167948061
    },
    "euclideanDistance" : 30.061241234129515,
    "generation" : 34,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.900056148231331,
      "LackOfCohesion" : 1.2958132565614056,
      "MetricsIntensity" : 0.06419134306326504,
      "Density" : 3.401281304601048
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "9192b744-55e7-42db-a4f6-53fbfe35d129",
    "objectives" : {
      "NumberOfConcerns" : 1.0002954209748893,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.2996243017948328,
      "MetricsIntensity" : 0.0627433572068635,
      "Density" : 0.9979497693490518
    },
    "euclideanDistance" : 31.05945032878168,
    "generation" : 46,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9022471910112357,
      "LackOfCohesion" : 1.2996243017948328,
      "MetricsIntensity" : 0.0627433572068635,
      "Density" : 3.4018637157833433
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "45f32191-6b9c-4737-8be8-baf40284ad03",
    "objectives" : {
      "NumberOfConcerns" : 0.9994091580502216,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.3029544511137512,
      "MetricsIntensity" : 0.0627745193103847,
      "Density" : 0.9996582948915086
    },
    "euclideanDistance" : 31.059616325925404,
    "generation" : 43,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.901630129286116,
      "LackOfCohesion" : 1.3029544511137512,
      "MetricsIntensity" : 0.0627745193103847,
      "Density" : 3.40967365967366
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "017ee8a5-3326-496c-93b2-60b59cce85f7",
    "objectives" : {
      "NumberOfConcerns" : 0.9973412112259971,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.2981659596654627,
      "MetricsIntensity" : 0.06421191175037584,
      "Density" : 0.9964120963608406
    },
    "euclideanDistance" : 32.05739984131322,
    "generation" : 35,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8976953344575602,
      "LackOfCohesion" : 1.2981659596654627,
      "MetricsIntensity" : 0.06421191175037583,
      "Density" : 3.398601398601398
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "ac645307-03dc-44dd-9275-b8b75ead7a59",
    "objectives" : {
      "NumberOfConcerns" : 1.0005908419497784,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.299519534149378,
      "MetricsIntensity" : 0.06272693205509783,
      "Density" : 0.9981206219032974
    },
    "euclideanDistance" : 32.057606156675256,
    "generation" : 48,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9028089887640447,
      "LackOfCohesion" : 1.299519534149378,
      "MetricsIntensity" : 0.06272693205509783,
      "Density" : 3.402446126965638
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "16701201-da5c-47ec-8a67-0203cb6810d4",
    "objectives" : {
      "NumberOfConcerns" : 0.9976366322008863,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.2987536631012673,
      "MetricsIntensity" : 0.064158092754423,
      "Density" : 0.9982914744575432
    },
    "euclideanDistance" : 33.055752026783,
    "generation" : 34,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8982574480044971,
      "LackOfCohesion" : 1.2987536631012673,
      "MetricsIntensity" : 0.064158092754423,
      "Density" : 3.4050116550116547
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "3ea5ff30-6698-4f78-9809-3846aec4f896",
    "objectives" : {
      "NumberOfConcerns" : 0.9991137370753324,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.3003930739913314,
      "MetricsIntensity" : 0.062747232162164,
      "Density" : 0.996753801469332
    },
    "euclideanDistance" : 33.05581198159236,
    "generation" : 39,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9010680157391802,
      "LackOfCohesion" : 1.3003930739913314,
      "MetricsIntensity" : 0.062747232162164,
      "Density" : 3.3997668997668993
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "706a0a17-4de7-4fac-b5a7-7815e97d11ef",
    "objectives" : {
      "NumberOfConcerns" : 0.9985228951255539,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.3014807716818095,
      "MetricsIntensity" : 0.06285429103049857,
      "Density" : 0.9970955065778233
    },
    "euclideanDistance" : 33.05584744462447,
    "generation" : 44,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9010123734533182,
      "LackOfCohesion" : 1.3014807716818095,
      "MetricsIntensity" : 0.06285429103049857,
      "Density" : 3.4068884997081152
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "1b5eee77-b3bd-4bb9-a11d-cecf42e1d692",
    "objectives" : {
      "NumberOfConcerns" : 0.9964549483013294,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.298483893449319,
      "MetricsIntensity" : 0.06429554398848922,
      "Density" : 0.9989748846745259
    },
    "euclideanDistance" : 34.054090321468415,
    "generation" : 35,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.897075365579303,
      "LackOfCohesion" : 1.298483893449319,
      "MetricsIntensity" : 0.06429554398848923,
      "Density" : 3.413309982486865
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "0a21c47b-b92a-4f16-a5b1-f69af336bf2e",
    "objectives" : {
      "NumberOfConcerns" : 1.0005908419497784,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.2962649976653053,
      "MetricsIntensity" : 0.06416750424731564,
      "Density" : 0.9986331795660345
    },
    "euclideanDistance" : 34.05411679478852,
    "generation" : 42,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9017405951712523,
      "LackOfCohesion" : 1.2962649976653053,
      "MetricsIntensity" : 0.06416750424731565,
      "Density" : 3.4041933605125214
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "e30ca682-8a68-47b3-a985-95d8640a16a3",
    "objectives" : {
      "NumberOfConcerns" : 0.9988183161004431,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 1.3006401819758004,
      "MetricsIntensity" : 0.06282698741447561,
      "Density" : 0.9943618657098924
    },
    "euclideanDistance" : 35.052560614909055,
    "generation" : 47,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.901574803149606,
      "LackOfCohesion" : 1.3006401819758004,
      "MetricsIntensity" : 0.06282698741447561,
      "Density" : 3.3955659276546073
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "f7b615e2-9773-410a-909b-f12bf17e7c1c",
    "objectives" : {
      "NumberOfConcerns" : 0.9964549483013294,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.299825048197212,
      "MetricsIntensity" : 0.06436071489711495,
      "Density" : 0.9955578335896121
    },
    "euclideanDistance" : 36.05104360932647,
    "generation" : 18,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8981429375351715,
      "LackOfCohesion" : 1.299825048197212,
      "MetricsIntensity" : 0.06436071489711495,
      "Density" : 3.403621495327104
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutOtherMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableStageObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "7d21eba9-bdc4-452c-a5fc-5460c23ac4dd",
    "objectives" : {
      "NumberOfConcerns" : 0.995864106351551,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.3002297434710897,
      "MetricsIntensity" : 0.06432307422094476,
      "Density" : 0.9977789167948061
    },
    "euclideanDistance" : 36.05110321375483,
    "generation" : 34,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8970174451322452,
      "LackOfCohesion" : 1.3002297434710897,
      "MetricsIntensity" : 0.06432307422094476,
      "Density" : 3.4112149532710285
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "eb02ff5d-e5e8-4777-be31-5a950fcc189b",
    "objectives" : {
      "NumberOfConcerns" : 1.0002954209748893,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.2964957823331758,
      "MetricsIntensity" : 0.06412592108760388,
      "Density" : 1.0
    },
    "euclideanDistance" : 36.051152608156464,
    "generation" : 38,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9011791128579447,
      "LackOfCohesion" : 1.2964957823331758,
      "MetricsIntensity" : 0.06412592108760388,
      "Density" : 3.4088526499708798
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "1c80aafe-2e66-43fa-b11c-b65f44b273d5",
    "objectives" : {
      "NumberOfConcerns" : 0.9973412112259971,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.301536609005475,
      "MetricsIntensity" : 0.06333972770567342,
      "Density" : 0.9953869810353665
    },
    "euclideanDistance" : 37.04974351057388,
    "generation" : 44,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.899831176139561,
      "LackOfCohesion" : 1.301536609005475,
      "MetricsIntensity" : 0.06333972770567342,
      "Density" : 3.403037383177571
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutOtherMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableStageObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "0cf165e4-cc96-4830-b721-ffca22467e8e",
    "objectives" : {
      "NumberOfConcerns" : 0.9976366322008863,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.301027329543706,
      "MetricsIntensity" : 0.06288306397493024,
      "Density" : 0.9935076029386639
    },
    "euclideanDistance" : 38.048376609245246,
    "generation" : 48,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9003939223410242,
      "LackOfCohesion" : 1.301027329543706,
      "MetricsIntensity" : 0.06288306397493025,
      "Density" : 3.394629305312315
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "a85db064-8f0c-49ba-963b-2460da5b5c4a",
    "objectives" : {
      "NumberOfConcerns" : 0.9988183161004431,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.2987608389673941,
      "MetricsIntensity" : 0.0641671375948427,
      "Density" : 0.9970955065778233
    },
    "euclideanDistance" : 38.048426177914344,
    "generation" : 36,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9005059021922424,
      "LackOfCohesion" : 1.2987608389673941,
      "MetricsIntensity" : 0.06416713759484272,
      "Density" : 3.4029154518950446
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "0f75bffa-2a9e-4c6c-b35e-7b06b651fb86",
    "objectives" : {
      "NumberOfConcerns" : 0.9982274741506647,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.3025455186427546,
      "MetricsIntensity" : 0.06282152257497145,
      "Density" : 0.9986331795660345
    },
    "euclideanDistance" : 38.04857812966622,
    "generation" : 42,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9004499437570306,
      "LackOfCohesion" : 1.3025455186427546,
      "MetricsIntensity" : 0.06282152257497146,
      "Density" : 3.410151691948659
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "f2b3ff0a-5e4e-4a6e-8d23-84e48f3547e4",
    "objectives" : {
      "NumberOfConcerns" : 0.9982274741506647,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.3025455186427544,
      "MetricsIntensity" : 0.06282152257497146,
      "Density" : 0.9986331795660345
    },
    "euclideanDistance" : 38.04857812966622,
    "generation" : 41,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9004499437570306,
      "LackOfCohesion" : 1.3025455186427544,
      "MetricsIntensity" : 0.06282152257497146,
      "Density" : 3.410151691948658
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "727e3488-b776-4e49-9d97-5e1f3a97b41c",
    "objectives" : {
      "NumberOfConcerns" : 0.9973412112259971,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 1.2982112523282066,
      "MetricsIntensity" : 0.06420439760511502,
      "Density" : 0.9955578335896121
    },
    "euclideanDistance" : 39.047090794987206,
    "generation" : 47,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8987626546681657,
      "LackOfCohesion" : 1.2982112523282066,
      "MetricsIntensity" : 0.06420439760511501,
      "Density" : 3.399649941656942
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "f3c3dcbd-15f5-4a68-a8f2-7e2e8d85d13c",
    "objectives" : {
      "NumberOfConcerns" : 0.9952732644017726,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 1.2993178205626457,
      "MetricsIntensity" : 0.06431286537720073,
      "Density" : 0.9979497693490518
    },
    "euclideanDistance" : 39.04713607367974,
    "generation" : 36,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8958919527293194,
      "LackOfCohesion" : 1.2993178205626457,
      "MetricsIntensity" : 0.06431286537720074,
      "Density" : 3.411799065420561
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "153fea2b-b8cc-498b-b68b-60ba6062fd6d",
    "objectives" : {
      "NumberOfConcerns" : 0.995864106351551,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 1.3014836204153302,
      "MetricsIntensity" : 0.06439557689866827,
      "Density" : 0.9950452759268751
    },
    "euclideanDistance" : 39.04714927909587,
    "generation" : 35,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8980855855855854,
      "LackOfCohesion" : 1.3014836204153302,
      "MetricsIntensity" : 0.06439557689866827,
      "Density" : 3.4038573933372294
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad2'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutOtherMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableStageObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "d258106d-7b8d-47c4-9131-de55b3a35e9f",
    "objectives" : {
      "NumberOfConcerns" : 0.9961595273264402,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.2991661939313783,
      "MetricsIntensity" : 0.06426166539829793,
      "Density" : 0.9960703912523492
    },
    "euclideanDistance" : 40.04592928612478,
    "generation" : 47,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8975801913337083,
      "LackOfCohesion" : 1.2991661939313783,
      "MetricsIntensity" : 0.06426166539829793,
      "Density" : 3.403385872737887
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "41ab3b75-b5bb-4a10-b6d7-cc0fed52e48e",
    "objectives" : {
      "NumberOfConcerns" : 0.9976366322008863,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.2986513982297518,
      "MetricsIntensity" : 0.06320614022321183,
      "Density" : 0.9953869810353665
    },
    "euclideanDistance" : 40.045930686677885,
    "generation" : 41,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8993250843644545,
      "LackOfCohesion" : 1.2986513982297518,
      "MetricsIntensity" : 0.06320614022321185,
      "Density" : 3.3990665110851808
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "1f26b104-6d31-4f78-a2ee-36f494bd95c2",
    "objectives" : {
      "NumberOfConcerns" : 0.9973412112259971,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.3012339271402744,
      "MetricsIntensity" : 0.06286593964721106,
      "Density" : 0.9948744233726294
    },
    "euclideanDistance" : 40.045993887895946,
    "generation" : 44,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8998311761395614,
      "LackOfCohesion" : 1.3012339271402744,
      "MetricsIntensity" : 0.06286593964721104,
      "Density" : 3.3973162193698947
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "1daaea4b-e8fe-48ba-b061-9cb3fba02d3c",
    "objectives" : {
      "NumberOfConcerns" : 0.9970457902511078,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 1.2982117640909414,
      "MetricsIntensity" : 0.0642221773661195,
      "Density" : 0.9958995386981035
    },
    "euclideanDistance" : 41.044797410530926,
    "generation" : 43,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8982002249718786,
      "LackOfCohesion" : 1.2982117640909414,
      "MetricsIntensity" : 0.06422217736611951,
      "Density" : 3.4008168028004677
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "c0b38193-e915-47ca-b975-22a9e09f7afa",
    "objectives" : {
      "NumberOfConcerns" : 0.9970457902511078,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 1.3010524905743017,
      "MetricsIntensity" : 0.06288182626436443,
      "Density" : 0.9931658978301725
    },
    "euclideanDistance" : 42.043753049838145,
    "generation" : 27,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8992684299380984,
      "LackOfCohesion" : 1.3010524905743017,
      "MetricsIntensity" : 0.06288182626436443,
      "Density" : 3.3934617629889083
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "7c17d820-ad5b-41fa-949f-9aed881d0533",
    "objectives" : {
      "NumberOfConcerns" : 0.9988183161004431,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 1.3009876736178,
      "MetricsIntensity" : 0.06277693665723462,
      "Density" : 0.9970955065778233
    },
    "euclideanDistance" : 42.04388596869344,
    "generation" : 43,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9015748031496063,
      "LackOfCohesion" : 1.3009876736178,
      "MetricsIntensity" : 0.06277693665723463,
      "Density" : 3.4029154518950437
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "1cca2520-9830-4e71-b12e-e54f923aa08e",
    "objectives" : {
      "NumberOfConcerns" : 0.9979320531757755,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 1.3027567310466581,
      "MetricsIntensity" : 0.0628135863465138,
      "Density" : 0.996241243806595
    },
    "euclideanDistance" : 42.04389950570158,
    "generation" : 46,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9009566685424875,
      "LackOfCohesion" : 1.3027567310466581,
      "MetricsIntensity" : 0.0628135863465138,
      "Density" : 3.40198366394399
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "3758e298-2f60-4510-b314-ee4ca91e163d",
    "objectives" : {
      "NumberOfConcerns" : 0.9955686853766618,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 1.2987294077684395,
      "MetricsIntensity" : 0.06423261531420012,
      "Density" : 0.9965829489150863
    },
    "euclideanDistance" : 43.04271318684318,
    "generation" : 39,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8964546989307824,
      "LackOfCohesion" : 1.2987294077684395,
      "MetricsIntensity" : 0.0642326153142001,
      "Density" : 3.4071261682242993
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "069b8ba4-a6f6-42b5-97da-d5b81b3937cc",
    "objectives" : {
      "NumberOfConcerns" : 0.9964549483013294,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 1.30128526495651,
      "MetricsIntensity" : 0.06333798070109642,
      "Density" : 0.9952161284811208
    },
    "euclideanDistance" : 43.0427779383136,
    "generation" : 43,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9002816901408457,
      "LackOfCohesion" : 1.30128526495651,
      "MetricsIntensity" : 0.06333798070109642,
      "Density" : 3.406432748538013
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "49630c01-1c83-426c-872c-50a1cc0a88ce",
    "objectives" : {
      "NumberOfConcerns" : 0.9952732644017726,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 1.2993204906706783,
      "MetricsIntensity" : 0.0642799073782382,
      "Density" : 0.9947035708183838
    },
    "euclideanDistance" : 44.041711702755165,
    "generation" : 45,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8969594594594592,
      "LackOfCohesion" : 1.2993204906706783,
      "MetricsIntensity" : 0.06427990737823819,
      "Density" : 3.400700934579439
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "1882fdf4-e9ef-4cb5-a62c-dad97c7aac02",
    "objectives" : {
      "NumberOfConcerns" : 0.9949778434268833,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 1.2994532781837587,
      "MetricsIntensity" : 0.06425842266299386,
      "Density" : 0.9964120963608406
    },
    "euclideanDistance" : 45.040820662391916,
    "generation" : 46,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8963963963963963,
      "LackOfCohesion" : 1.2994532781837587,
      "MetricsIntensity" : 0.06425842266299386,
      "Density" : 3.4085330216247804
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "f4497c60-f4b5-43f1-9848-d74d704a0f5a",
    "objectives" : {
      "NumberOfConcerns" : 0.9973412112259971,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 1.3009426987833217,
      "MetricsIntensity" : 0.06287885695019475,
      "Density" : 0.9935076029386639
    },
    "euclideanDistance" : 45.040849819967605,
    "generation" : 47,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8998311761395603,
      "LackOfCohesion" : 1.3009426987833217,
      "MetricsIntensity" : 0.06287885695019475,
      "Density" : 3.3946293053123164
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "9c18644f-ef3f-44b2-ad45-77d1a1695aaf",
    "objectives" : {
      "NumberOfConcerns" : 0.9961595273264402,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 1.301052490574302,
      "MetricsIntensity" : 0.06327698864939515,
      "Density" : 0.994532718264138
    },
    "euclideanDistance" : 45.040850021864635,
    "generation" : 44,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8986486486486482,
      "LackOfCohesion" : 1.301052490574302,
      "MetricsIntensity" : 0.06327698864939515,
      "Density" : 3.4001168224299056
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "3cd6b85c-a96b-4246-ac2c-b25c9eb5521a",
    "objectives" : {
      "NumberOfConcerns" : 0.9952732644017726,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 1.2986182539748687,
      "MetricsIntensity" : 0.06425285009980522,
      "Density" : 0.9941910131556467
    },
    "euclideanDistance" : 46.03986883604009,
    "generation" : 42,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8958919527293192,
      "LackOfCohesion" : 1.2986182539748687,
      "MetricsIntensity" : 0.06425285009980523,
      "Density" : 3.3969643899591357
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "4a727e04-75b7-4817-8e74-4c1165222ac1",
    "objectives" : {
      "NumberOfConcerns" : 0.9961595273264402,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 1.300321465937586,
      "MetricsIntensity" : 0.06418465136476559,
      "Density" : 0.9972663591320691
    },
    "euclideanDistance" : 46.04000249325785,
    "generation" : 45,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.897580191333708,
      "LackOfCohesion" : 1.300321465937586,
      "MetricsIntensity" : 0.0641846513647656,
      "Density" : 3.405484247374562
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "4bea367d-e803-44e2-90ad-66dfab3557e9",
    "objectives" : {
      "NumberOfConcerns" : 0.9955686853766618,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 1.2995323278504447,
      "MetricsIntensity" : 0.06424988257761755,
      "Density" : 0.994020160601401
    },
    "euclideanDistance" : 47.03904915498956,
    "generation" : 42,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8964546989307824,
      "LackOfCohesion" : 1.2995323278504447,
      "MetricsIntensity" : 0.06424988257761755,
      "Density" : 3.3963806187974317
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "bde4e8c7-05b8-447c-b14a-fbc4ce57a359",
    "objectives" : {
      "NumberOfConcerns" : 0.9964549483013294,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 1.2991455982861602,
      "MetricsIntensity" : 0.06419626548064837,
      "Density" : 0.9969246540235777
    },
    "euclideanDistance" : 47.03911863200502,
    "generation" : 48,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8981429375351717,
      "LackOfCohesion" : 1.2991455982861602,
      "MetricsIntensity" : 0.06419626548064837,
      "Density" : 3.4063047285464103
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "13b8629b-11bd-458f-bb07-614ae13bc4fa",
    "objectives" : {
      "NumberOfConcerns" : 0.9964549483013294,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 1.301758061062061,
      "MetricsIntensity" : 0.06291461909016463,
      "Density" : 0.9931658978301725
    },
    "euclideanDistance" : 48.03829548665775,
    "generation" : 46,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8992117117117115,
      "LackOfCohesion" : 1.301758061062061,
      "MetricsIntensity" : 0.06291461909016463,
      "Density" : 3.395443925233645
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "0aebb5c5-c59b-4a47-bcab-8b37b5e04f24",
    "objectives" : {
      "NumberOfConcerns" : 0.9946824224519941,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 1.3004994646757393,
      "MetricsIntensity" : 0.0643128330651682,
      "Density" : 0.9977789167948061
    },
    "euclideanDistance" : 49.03754062844561,
    "generation" : 42,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8958333333333333,
      "LackOfCohesion" : 1.3004994646757393,
      "MetricsIntensity" : 0.0643128330651682,
      "Density" : 3.4112149532710285
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "4858d3f2-6cc7-4a82-b3ca-fb238389903c",
    "objectives" : {
      "NumberOfConcerns" : 0.9964549483013294,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 1.300211744658407,
      "MetricsIntensity" : 0.06418168384257791,
      "Density" : 0.9976080642405604
    },
    "euclideanDistance" : 49.03756533702831,
    "generation" : 47,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8981429375351717,
      "LackOfCohesion" : 1.300211744658407,
      "MetricsIntensity" : 0.0641816838425779,
      "Density" : 3.406651108518087
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "1bf7ff3e-dd5b-4a3a-8622-4c0ccb582e89",
    "objectives" : {
      "NumberOfConcerns" : 0.9967503692762186,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 1.3023471849291304,
      "MetricsIntensity" : 0.06286067001808866,
      "Density" : 0.9952161284811208
    },
    "euclideanDistance" : 49.037577693998806,
    "generation" : 47,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8997747747747737,
      "LackOfCohesion" : 1.3023471849291304,
      "MetricsIntensity" : 0.06286067001808866,
      "Density" : 3.4024532710280377
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "875ce8c3-05cc-4fc6-9e41-4bb1db074c69",
    "objectives" : {
      "NumberOfConcerns" : 0.9964549483013294,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 1.3007136070266705,
      "MetricsIntensity" : 0.06291008384388304,
      "Density" : 0.994020160601401
    },
    "euclideanDistance" : 50.03675461208321,
    "generation" : 43,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8992117117117118,
      "LackOfCohesion" : 1.3007136070266705,
      "MetricsIntensity" : 0.06291008384388302,
      "Density" : 3.3983644859813076
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "bb82303c-b6ec-4d35-9c9b-9ea72d2f7926",
    "objectives" : {
      "NumberOfConcerns" : 0.9949778434268833,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 1.300864861174716,
      "MetricsIntensity" : 0.06423350523285967,
      "Density" : 0.9957286861438579
    },
    "euclideanDistance" : 50.03676480204884,
    "generation" : 35,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8963963963963963,
      "LackOfCohesion" : 1.300864861174716,
      "MetricsIntensity" : 0.06423350523285969,
      "Density" : 3.404205607476636
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "bee73d89-0b6a-45e8-b767-f022c5fbacac",
    "objectives" : {
      "NumberOfConcerns" : 0.9967503692762186,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 1.3016482029316299,
      "MetricsIntensity" : 0.06291164798184741,
      "Density" : 0.9935076029386639
    },
    "euclideanDistance" : 51.036054065487825,
    "generation" : 28,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8997747747747742,
      "LackOfCohesion" : 1.3016482029316299,
      "MetricsIntensity" : 0.06291164798184741,
      "Density" : 3.3966121495327104
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "52bbdaf9-2ac2-4564-aaac-4f0dd0323ddd",
    "objectives" : {
      "NumberOfConcerns" : 0.9955686853766618,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 1.3017580610620607,
      "MetricsIntensity" : 0.06331002024400803,
      "Density" : 0.994532718264138
    },
    "euclideanDistance" : 51.03605426111235,
    "generation" : 34,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.898591549295775,
      "LackOfCohesion" : 1.3017580610620607,
      "MetricsIntensity" : 0.06331002024400802,
      "Density" : 3.4021040327293983
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "db687b02-e7d7-4706-a415-3bf3751bc00c",
    "objectives" : {
      "NumberOfConcerns" : 0.9949778434268833,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 1.3001663012677938,
      "MetricsIntensity" : 0.06428445241282388,
      "Density" : 0.994020160601401
    },
    "euclideanDistance" : 52.03530168924138,
    "generation" : 41,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.896396396396396,
      "LackOfCohesion" : 1.3001663012677938,
      "MetricsIntensity" : 0.06428445241282388,
      "Density" : 3.398364485981309
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "85130884-bd89-472a-9a81-457f4b458615",
    "objectives" : {
      "NumberOfConcerns" : 0.9970457902511078,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 1.302237326798699,
      "MetricsIntensity" : 0.06285769890977143,
      "Density" : 0.9931658978301725
    },
    "euclideanDistance" : 52.03537500541425,
    "generation" : 40,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9003378378378375,
      "LackOfCohesion" : 1.302237326798699,
      "MetricsIntensity" : 0.06285769890977144,
      "Density" : 3.3954439252336446
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "c0485ccb-1361-4a98-9c30-12d271bb3c1d",
    "objectives" : {
      "NumberOfConcerns" : 0.995864106351551,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 1.3023471849291304,
      "MetricsIntensity" : 0.06325607117193206,
      "Density" : 0.9941910131556467
    },
    "euclideanDistance" : 52.03537518467213,
    "generation" : 38,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8991549295774648,
      "LackOfCohesion" : 1.3023471849291304,
      "MetricsIntensity" : 0.06325607117193206,
      "Density" : 3.4009351256575098
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "e33cd087-d2fd-428b-95fa-31abe252dd68",
    "objectives" : {
      "NumberOfConcerns" : 0.9949778434268833,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 1.2999106965597973,
      "MetricsIntensity" : 0.06423253454198462,
      "Density" : 0.996241243806595
    },
    "euclideanDistance" : 53.03467140618764,
    "generation" : 42,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8963963963963966,
      "LackOfCohesion" : 1.2999106965597973,
      "MetricsIntensity" : 0.06423253454198462,
      "Density" : 3.4059579439252343
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "2d8e4372-2fad-4d24-a05e-28fb38c7920b",
    "objectives" : {
      "NumberOfConcerns" : 0.9949778434268833,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 1.2999106965597973,
      "MetricsIntensity" : 0.06423253454198462,
      "Density" : 0.996241243806595
    },
    "euclideanDistance" : 53.03467140618764,
    "generation" : 33,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8963963963963966,
      "LackOfCohesion" : 1.2999106965597973,
      "MetricsIntensity" : 0.06423253454198463,
      "Density" : 3.4059579439252334
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "440b0822-193b-48fc-bb0c-785bb6926fe1",
    "objectives" : {
      "NumberOfConcerns" : 0.9940915805022157,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 1.3000465942616457,
      "MetricsIntensity" : 0.06431230650761356,
      "Density" : 0.9943618657098924
    },
    "euclideanDistance" : 54.033982185384254,
    "generation" : 36,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.895774647887324,
      "LackOfCohesion" : 1.3000465942616457,
      "MetricsIntensity" : 0.06431230650761356,
      "Density" : 3.401519579193454
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "d38e3e2f-cdba-4aa6-9bb0-915f83a5a754",
    "objectives" : {
      "NumberOfConcerns" : 0.9964549483013294,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 1.29903156629054,
      "MetricsIntensity" : 0.06422479100698864,
      "Density" : 0.9953869810353665
    },
    "euclideanDistance" : 54.034020075689426,
    "generation" : 39,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8981429375351715,
      "LackOfCohesion" : 1.29903156629054,
      "MetricsIntensity" : 0.06422479100698864,
      "Density" : 3.4010507880910676
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "e96bc29a-7b08-4b8f-80d4-b35f01dcfacb",
    "objectives" : {
      "NumberOfConcerns" : 0.9949778434268833,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 1.2992121409078654,
      "MetricsIntensity" : 0.06428348172194882,
      "Density" : 0.994532718264138
    },
    "euclideanDistance" : 55.03336406935081,
    "generation" : 47,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.896396396396396,
      "LackOfCohesion" : 1.2992121409078654,
      "MetricsIntensity" : 0.06428348172194881,
      "Density" : 3.400116822429906
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "fc9b3697-dd10-4962-a7a5-a52cf5d3a026",
    "objectives" : {
      "NumberOfConcerns" : 0.9940915805022157,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 1.300981194424167,
      "MetricsIntensity" : 0.06432106385518807,
      "Density" : 0.9936784554929097
    },
    "euclideanDistance" : 55.0333744577855,
    "generation" : 38,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8957746478873236,
      "LackOfCohesion" : 1.300981194424167,
      "MetricsIntensity" : 0.06432106385518807,
      "Density" : 3.3991817650496787
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "8e18e42e-6457-424d-84e5-205beab90f96",
    "objectives" : {
      "NumberOfConcerns" : 0.9952732644017726,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 1.2998009090238074,
      "MetricsIntensity" : 0.06422956522781488,
      "Density" : 0.9941910131556467
    },
    "euclideanDistance" : 56.03278140947156,
    "generation" : 33,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8969594594594592,
      "LackOfCohesion" : 1.2998009090238074,
      "MetricsIntensity" : 0.0642295652278149,
      "Density" : 3.3989485981308416
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    } ]
  }, {
    "solutionId" : "c884e4e6-bcdf-4f1b-a220-a29635f345fd",
    "objectives" : {
      "NumberOfConcerns" : 0.9943870014771049,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 1.3015703182912364,
      "MetricsIntensity" : 0.06426711478311216,
      "Density" : 0.9933367503844183
    },
    "euclideanDistance" : 56.032791639930544,
    "generation" : 41,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8963380281690143,
      "LackOfCohesion" : 1.3015703182912364,
      "MetricsIntensity" : 0.06426711478311216,
      "Density" : 3.3980128579777915
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.ParallelMapTrySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.FallbackSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "88de24a9-c4ed-4030-9b3d-64b906c166f5",
    "objectives" : {
      "NumberOfConcerns" : 0.9943870014771049,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 1.2999367403887763,
      "MetricsIntensity" : 0.06430933539929636,
      "Density" : 0.9947035708183838
    },
    "euclideanDistance" : 57.032203288336476,
    "generation" : 15,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8963380281690139,
      "LackOfCohesion" : 1.2999367403887763,
      "MetricsIntensity" : 0.06430933539929637,
      "Density" : 3.402688486265342
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "90f63306-f455-4857-a0ed-94495df04731",
    "objectives" : {
      "NumberOfConcerns" : 0.9943870014771049,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 1.3008713362937359,
      "MetricsIntensity" : 0.06431809274687085,
      "Density" : 0.994020160601401
    },
    "euclideanDistance" : 58.03165760719776,
    "generation" : 34,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.896338028169014,
      "LackOfCohesion" : 1.3008713362937359,
      "MetricsIntensity" : 0.06431809274687086,
      "Density" : 3.4003506721215655
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  }, {
    "solutionId" : "4cddf609-886f-42d2-95eb-8cba3dc1bc35",
    "objectives" : {
      "NumberOfConcerns" : 0.9946824224519941,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 1.300525864255846,
      "MetricsIntensity" : 0.06425538632722037,
      "Density" : 0.9943618657098924
    },
    "euclideanDistance" : 58.031660711371885,
    "generation" : 22,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8969014084507045,
      "LackOfCohesion" : 1.300525864255846,
      "MetricsIntensity" : 0.06425538632722037,
      "Density" : 3.4015195791934536
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "ce0f8daa-4ee4-49e3-bd0c-19d0cae03651",
    "objectives" : {
      "NumberOfConcerns" : 0.9946824224519941,
      "NumberOfRefactorings" : 59.0,
      "LackOfCohesion" : 1.3014604601608053,
      "MetricsIntensity" : 0.06426414367479487,
      "Density" : 0.9936784554929097
    },
    "euclideanDistance" : 59.03113347382015,
    "generation" : 37,
    "numberOfRefactorings" : 59,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8969014084507043,
      "LackOfCohesion" : 1.3014604601608053,
      "MetricsIntensity" : 0.06426414367479488,
      "Density" : 3.3991817650496796
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher.SingleFlatMapPublisherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.SizeBoundReplayBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip.ZipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements.IgnoreElementsSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange.RangeConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      } ]
    } ]
  } ]
}