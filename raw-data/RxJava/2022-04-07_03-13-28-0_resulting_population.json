{
  "executionId" : "7687985c-10cc-4968-a905-375a7387620c",
  "computingTime" : 3821011,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 28,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.411590774689533,
    "meanNumConcerns" : 1.872676056338028,
    "meanMetricsIntensity" : 0.0626901885889211,
    "meanLackOfCohesion" : 1.3045137304594558
  },
  "population" : [ {
    "solutionId" : "f997cfae-4d49-4640-8922-e895a26f5b58",
    "objectives" : {
      "NumberOfConcerns" : 0.9990974729241877,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3006142192066352,
      "MetricsIntensity" : 0.06248085909281344,
      "Density" : 0.9941064309239036
    },
    "euclideanDistance" : 10.182433135619561,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8657303370786513,
      "LackOfCohesion" : 1.3006142192066352,
      "MetricsIntensity" : 0.06248085909281344,
      "Density" : 3.3854781582054314
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onNext(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.InnerSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.disposed, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.serialVersionUID, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.once, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.mapper, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.iterator, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.downstream, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.upstream, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.outputFused], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone()', targetType='io.reactivex.rxjava3.core.PerfAsyncConsumer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown(), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "2107b426-d716-4cb2-9c32-5d236a9cc942",
    "objectives" : {
      "NumberOfConcerns" : 0.9996991576413959,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3005819472617128,
      "MetricsIntensity" : 0.06246230662206087,
      "Density" : 0.9944531114577917
    },
    "euclideanDistance" : 10.182521806407713,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8668539325842692,
      "LackOfCohesion" : 1.3005819472617128,
      "MetricsIntensity" : 0.06246230662206087,
      "Density" : 3.3866587957497054
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onNext(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.InnerSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.disposed, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.serialVersionUID, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.once, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.mapper, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.iterator, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.downstream, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.upstream, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.outputFused], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnComplete'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown(), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "114efb49-09b0-4e6c-ad89-f24d11e58a45",
    "objectives" : {
      "NumberOfConcerns" : 0.9996991576413959,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.300211437444667,
      "MetricsIntensity" : 0.06247197261522607,
      "Density" : 0.9973998959958398
    },
    "euclideanDistance" : 10.182762763010134,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8668539325842692,
      "LackOfCohesion" : 1.300211437444667,
      "MetricsIntensity" : 0.06247197261522607,
      "Density" : 3.396694214876033
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onNext(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.InnerSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.disposed, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.serialVersionUID, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.once, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.mapper, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.iterator, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.downstream, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.upstream, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.outputFused], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.ForEachWhileObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown(), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get(), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.now()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "147c7b00-378b-47ef-aa20-b1d83d020f61",
    "objectives" : {
      "NumberOfConcerns" : 0.9981949458483754,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3021584538774982,
      "MetricsIntensity" : 0.06292254263551043,
      "Density" : 0.999653319466112
    },
    "euclideanDistance" : 10.18308773380713,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8650927487352447,
      "LackOfCohesion" : 1.3021584538774982,
      "MetricsIntensity" : 0.06292254263551045,
      "Density" : 3.4023598820059004
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.InterruptibleRunnable(Runnable, DisposableContainer)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDetach'"
      } ]
    } ]
  }, {
    "solutionId" : "e6bcb2d2-f0ea-49db-852e-97d015fca95c",
    "objectives" : {
      "NumberOfConcerns" : 0.9981949458483754,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3028621129044384,
      "MetricsIntensity" : 0.06291473807664907,
      "Density" : 0.999653319466112
    },
    "euclideanDistance" : 10.183177689628417,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8650927487352444,
      "LackOfCohesion" : 1.3028621129044384,
      "MetricsIntensity" : 0.06291473807664909,
      "Density" : 3.402359882005901
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray'"
      } ]
    } ]
  }, {
    "solutionId" : "655be50b-2ba6-4c9a-86ba-c11991f5b421",
    "objectives" : {
      "NumberOfConcerns" : 0.9987966305655837,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3028621129044382,
      "MetricsIntensity" : 0.06289404623996793,
      "Density" : 1.000173340266944
    },
    "euclideanDistance" : 10.183287620709933,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8662169758291174,
      "LackOfCohesion" : 1.3028621129044382,
      "MetricsIntensity" : 0.06289404623996793,
      "Density" : 3.4041297935103243
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray'"
      } ]
    } ]
  }, {
    "solutionId" : "96fb1321-0ea5-45ba-9000-359e5630b542",
    "objectives" : {
      "NumberOfConcerns" : 0.9987966305655837,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3028621129044382,
      "MetricsIntensity" : 0.06289404623996793,
      "Density" : 1.000173340266944
    },
    "euclideanDistance" : 10.183287620709933,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.866216975829117,
      "LackOfCohesion" : 1.3028621129044382,
      "MetricsIntensity" : 0.06289404623996792,
      "Density" : 3.404129793510324
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray'"
      } ]
    } ]
  }, {
    "solutionId" : "229d7740-45e2-4205-92d5-824a4ffd6d14",
    "objectives" : {
      "NumberOfConcerns" : 0.9990974729241877,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.300548081640498,
      "MetricsIntensity" : 0.06248272993020025,
      "Density" : 0.9941064309239036
    },
    "euclideanDistance" : 11.16609926342257,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8657303370786513,
      "LackOfCohesion" : 1.300548081640498,
      "MetricsIntensity" : 0.06248272993020025,
      "Density" : 3.3854781582054314
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onNext(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.InnerSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.disposed, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.serialVersionUID, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.once, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.mapper, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.iterator, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.downstream, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.upstream, io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.outputFused], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.ForEachWhileObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown(), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "ec1169d6-b55a-411e-8f37-dd859c6ac116",
    "objectives" : {
      "NumberOfConcerns" : 0.9981949458483754,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3025102833909683,
      "MetricsIntensity" : 0.06289342187525902,
      "Density" : 0.9967065349280638
    },
    "euclideanDistance" : 11.166481347655578,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8650927487352444,
      "LackOfCohesion" : 1.3025102833909683,
      "MetricsIntensity" : 0.06289342187525904,
      "Density" : 3.3923303834808265
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray'"
      } ]
    } ]
  }, {
    "solutionId" : "1a1f4776-e81f-4975-9dc9-6b40f49a2a8a",
    "objectives" : {
      "NumberOfConcerns" : 0.9978941034897714,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3025907015654756,
      "MetricsIntensity" : 0.06292550836787776,
      "Density" : 0.9993066389322239
    },
    "euclideanDistance" : 11.16669640295651,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8645306351883082,
      "LackOfCohesion" : 1.3025907015654756,
      "MetricsIntensity" : 0.06292550836787776,
      "Density" : 3.4011799410029497
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ObserverOnComplete'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray'"
      } ]
    } ]
  }, {
    "solutionId" : "bb8747be-67cc-4dba-81cd-b7002c91b9c0",
    "objectives" : {
      "NumberOfConcerns" : 0.9981949458483754,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3028085376096086,
      "MetricsIntensity" : 0.06275996391872977,
      "Density" : 0.998959958398336
    },
    "euclideanDistance" : 11.1667167532422,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8650927487352444,
      "LackOfCohesion" : 1.3028085376096086,
      "MetricsIntensity" : 0.06275996391872977,
      "Density" : 3.4000000000000004
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray'"
      } ]
    } ]
  }, {
    "solutionId" : "af3de43d-a101-4aa0-89aa-a5cc86643531",
    "objectives" : {
      "NumberOfConcerns" : 0.9978941034897714,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3022388720520057,
      "MetricsIntensity" : 0.06290419216648768,
      "Density" : 0.9963598543941757
    },
    "euclideanDistance" : 12.152707871849115,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.864530635188308,
      "LackOfCohesion" : 1.3022388720520057,
      "MetricsIntensity" : 0.06290419216648768,
      "Density" : 3.391150442477876
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ObserverOnComplete'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray'"
      } ]
    } ]
  }, {
    "solutionId" : "a2d4a080-dc57-4d05-8e7e-b1100c64236f",
    "objectives" : {
      "NumberOfConcerns" : 0.9984957882069796,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3019480741888316,
      "MetricsIntensity" : 0.06291980128421042,
      "Density" : 0.9963598543941757
    },
    "euclideanDistance" : 12.15272621627728,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.865654862282181,
      "LackOfCohesion" : 1.3019480741888316,
      "MetricsIntensity" : 0.06291980128421042,
      "Density" : 3.3911504424778762
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ObserverOnComplete'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDetach'"
      } ]
    } ]
  }, {
    "solutionId" : "74f44f30-d4e3-4809-956d-685696e0a4b5",
    "objectives" : {
      "NumberOfConcerns" : 0.9984957882069796,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3021324026602528,
      "MetricsIntensity" : 0.0628997533236353,
      "Density" : 0.9961865141272318
    },
    "euclideanDistance" : 12.152731651074255,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.865654862282181,
      "LackOfCohesion" : 1.3021324026602528,
      "MetricsIntensity" : 0.06289975332363532,
      "Density" : 3.3905604719764013
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ObserverOnComplete'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray'"
      } ]
    } ]
  }, {
    "solutionId" : "17d5f755-b856-4c54-a416-bb19a7432133",
    "objectives" : {
      "NumberOfConcerns" : 0.9984957882069796,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3021324026602528,
      "MetricsIntensity" : 0.0628997533236353,
      "Density" : 0.9961865141272318
    },
    "euclideanDistance" : 12.152731651074255,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.865654862282181,
      "LackOfCohesion" : 1.3021324026602528,
      "MetricsIntensity" : 0.0628997533236353,
      "Density" : 3.3905604719764013
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ObserverOnComplete'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray'"
      } ]
    } ]
  }, {
    "solutionId" : "e9efde72-638c-496a-9451-1cc6c40dc91c",
    "objectives" : {
      "NumberOfConcerns" : 0.9984957882069796,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3021324026602528,
      "MetricsIntensity" : 0.0628997533236353,
      "Density" : 0.9961865141272318
    },
    "euclideanDistance" : 12.152731651074255,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.865654862282181,
      "LackOfCohesion" : 1.3021324026602528,
      "MetricsIntensity" : 0.0628997533236353,
      "Density" : 3.390560471976402
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ObserverOnComplete'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray'"
      } ]
    } ]
  }, {
    "solutionId" : "a7e376d4-fd1d-457b-bcc2-ca0b45f3c8d8",
    "objectives" : {
      "NumberOfConcerns" : 0.9981949458483754,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.302423200523427,
      "MetricsIntensity" : 0.06288117847354524,
      "Density" : 0.9963598543941757
    },
    "euclideanDistance" : 12.152752212780179,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8650927487352447,
      "LackOfCohesion" : 1.302423200523427,
      "MetricsIntensity" : 0.06288117847354524,
      "Density" : 3.3911504424778736
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray'"
      } ]
    } ]
  }, {
    "solutionId" : "8d4e454d-8f03-4fe1-be68-92941b632a98",
    "objectives" : {
      "NumberOfConcerns" : 0.9981949458483754,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.302423200523427,
      "MetricsIntensity" : 0.06288117847354524,
      "Density" : 0.9963598543941757
    },
    "euclideanDistance" : 12.152752212780179,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8650927487352453,
      "LackOfCohesion" : 1.302423200523427,
      "MetricsIntensity" : 0.06288117847354524,
      "Density" : 3.391150442477876
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray'"
      } ]
    } ]
  }, {
    "solutionId" : "eb5f47b8-ecd6-4129-9f3d-44d70ae3d468",
    "objectives" : {
      "NumberOfConcerns" : 0.9981949458483754,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3024232005234269,
      "MetricsIntensity" : 0.06288117847354525,
      "Density" : 0.9963598543941757
    },
    "euclideanDistance" : 12.152752212780179,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8650927487352444,
      "LackOfCohesion" : 1.3024232005234269,
      "MetricsIntensity" : 0.06288117847354525,
      "Density" : 3.3911504424778753
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray'"
      } ]
    } ]
  }, {
    "solutionId" : "8a6097fb-2607-4579-b516-7fa17c18cd8e",
    "objectives" : {
      "NumberOfConcerns" : 0.9981949458483754,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3024232005234266,
      "MetricsIntensity" : 0.06288898303240661,
      "Density" : 0.9963598543941757
    },
    "euclideanDistance" : 12.152752253165295,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8650927487352447,
      "LackOfCohesion" : 1.3024232005234266,
      "MetricsIntensity" : 0.06288898303240661,
      "Density" : 3.391150442477876
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDetach'"
      } ]
    } ]
  }, {
    "solutionId" : "cf1f0898-2a57-448e-9ae1-be0fb71f8038",
    "objectives" : {
      "NumberOfConcerns" : 0.9984957882069796,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3022388720520057,
      "MetricsIntensity" : 0.06289342187525901,
      "Density" : 0.9967065349280638
    },
    "euclideanDistance" : 12.152785664950807,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.865654862282181,
      "LackOfCohesion" : 1.3022388720520057,
      "MetricsIntensity" : 0.06289342187525901,
      "Density" : 3.3923303834808265
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray'"
      } ]
    } ]
  }, {
    "solutionId" : "62f3c3e9-2111-4137-991c-c95f433ee718",
    "objectives" : {
      "NumberOfConcerns" : 0.9981949458483754,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3033386752778646,
      "MetricsIntensity" : 0.06290755788249665,
      "Density" : 0.9958398335933437
    },
    "euclideanDistance" : 12.15280787256189,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8650927487352444,
      "LackOfCohesion" : 1.3033386752778646,
      "MetricsIntensity" : 0.06290755788249665,
      "Density" : 3.3913813459268005
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ObserverOnComplete'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      } ]
    } ]
  }, {
    "solutionId" : "fa266a34-aa03-44c9-9245-dc344fe984c7",
    "objectives" : {
      "NumberOfConcerns" : 0.9978941034897714,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3025371262706458,
      "MetricsIntensity" : 0.06289997770470256,
      "Density" : 0.998959958398336
    },
    "euclideanDistance" : 12.152953263004491,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8645306351883075,
      "LackOfCohesion" : 1.3025371262706458,
      "MetricsIntensity" : 0.06289997770470257,
      "Density" : 3.400000000000001
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ObserverOnComplete'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray'"
      } ]
    } ]
  }, {
    "solutionId" : "2cc0b2ad-7372-4580-8662-0389bf61af52",
    "objectives" : {
      "NumberOfConcerns" : 0.9981949458483754,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3018609913212902,
      "MetricsIntensity" : 0.0628997533236353,
      "Density" : 0.9958398335933437
    },
    "euclideanDistance" : 13.141038335831027,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.865092748735245,
      "LackOfCohesion" : 1.3018609913212902,
      "MetricsIntensity" : 0.06289975332363532,
      "Density" : 3.389380530973451
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ObserverOnComplete'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDetach'"
      } ]
    } ]
  }, {
    "solutionId" : "7c4d9d5f-de09-42e3-99a7-edc89ae73ef3",
    "objectives" : {
      "NumberOfConcerns" : 0.9978941034897714,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3019674607130431,
      "MetricsIntensity" : 0.06293268856203024,
      "Density" : 0.9961865141272318
    },
    "euclideanDistance" : 13.1410524694468,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.864530635188308,
      "LackOfCohesion" : 1.3019674607130431,
      "MetricsIntensity" : 0.06293268856203023,
      "Density" : 3.3905604719764018
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ObserverOnComplete'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDetach'"
      } ]
    } ]
  }, {
    "solutionId" : "eedb2d21-18c0-4ebd-9024-e6106d47877e",
    "objectives" : {
      "NumberOfConcerns" : 0.9981949458483754,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3021517891844645,
      "MetricsIntensity" : 0.06288898303240661,
      "Density" : 0.9961865141272318
    },
    "euclideanDistance" : 13.141093372589259,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8650927487352444,
      "LackOfCohesion" : 1.3021517891844645,
      "MetricsIntensity" : 0.06288898303240663,
      "Density" : 3.3905604719764018
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDetach'"
      } ]
    } ]
  }, {
    "solutionId" : "0d9a6cdd-e063-4343-8ea1-1a00a138ba97",
    "objectives" : {
      "NumberOfConcerns" : 0.9981949458483754,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3021517891844645,
      "MetricsIntensity" : 0.06288898303240661,
      "Density" : 0.9961865141272318
    },
    "euclideanDistance" : 13.141093372589259,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.865092748735245,
      "LackOfCohesion" : 1.3021517891844645,
      "MetricsIntensity" : 0.06288898303240661,
      "Density" : 3.3905604719764018
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDetach'"
      } ]
    } ]
  }, {
    "solutionId" : "732ff6f9-7e3e-4668-8ec0-0538998750d3",
    "objectives" : {
      "NumberOfConcerns" : 0.9984957882069796,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3021517891844645,
      "MetricsIntensity" : 0.06288117847354525,
      "Density" : 0.9963598543941757
    },
    "euclideanDistance" : 13.141129332108331,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.865654862282181,
      "LackOfCohesion" : 1.3021517891844645,
      "MetricsIntensity" : 0.06288117847354525,
      "Density" : 3.391150442477876
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>), io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.SamplePublisherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.READY, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.RUNNING, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.thread, io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.FINISHED], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run(), io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCache'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray'"
      } ]
    } ]
  } ]
}