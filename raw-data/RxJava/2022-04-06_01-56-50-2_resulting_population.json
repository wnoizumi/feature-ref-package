{
  "executionId" : "801a89b4-77d8-4051-a799-280961d0823e",
  "computingTime" : 982064,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.3807285546415975,
    "meanNumConcerns" : 1.8659154929577462,
    "meanMetricsIntensity" : 0.06269018858892111,
    "meanLackOfCohesion" : 1.3045137304594558
  },
  "population" : [ {
    "solutionId" : "97f23880-dbbe-423c-8062-1dec772a3dfe",
    "objectives" : {
      "NumberOfConcerns" : 1.0042270531400965,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.2982020173142022,
      "MetricsIntensity" : 0.06246763909799198,
      "Density" : 1.0010427528675705
    },
    "euclideanDistance" : 11.166905983799642,
    "generation" : 34,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8643497757847534,
      "LackOfCohesion" : 1.2982020173142022,
      "MetricsIntensity" : 0.06246763909799198,
      "Density" : 3.3684210526315796
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "a4e08da8-5768-47e0-ba9d-085036c86c6f",
    "objectives" : {
      "NumberOfConcerns" : 1.0042270531400965,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.298202017314202,
      "MetricsIntensity" : 0.062467639097992,
      "Density" : 1.0010427528675705
    },
    "euclideanDistance" : 11.166905983799642,
    "generation" : 35,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8643497757847538,
      "LackOfCohesion" : 1.298202017314202,
      "MetricsIntensity" : 0.062467639097992,
      "Density" : 3.3684210526315796
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "db6983b6-478c-49ca-b501-9562c9642236",
    "objectives" : {
      "NumberOfConcerns" : 1.0045289855072463,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.2983522576988176,
      "MetricsIntensity" : 0.0624333548176776,
      "Density" : 1.0008689607229753
    },
    "euclideanDistance" : 11.166934837641362,
    "generation" : 35,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8649103139013452,
      "LackOfCohesion" : 1.2983522576988176,
      "MetricsIntensity" : 0.0624333548176776,
      "Density" : 3.367836257309942
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "4a778b24-a2e6-4202-b056-246e9963305b",
    "objectives" : {
      "NumberOfConcerns" : 1.0045289855072463,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.2983522576988173,
      "MetricsIntensity" : 0.062433354817677644,
      "Density" : 1.0008689607229753
    },
    "euclideanDistance" : 11.166934837641362,
    "generation" : 27,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8649103139013457,
      "LackOfCohesion" : 1.2983522576988173,
      "MetricsIntensity" : 0.062433354817677644,
      "Density" : 3.367836257309942
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "e9e763c9-5a10-494f-b05c-4139bba06e08",
    "objectives" : {
      "NumberOfConcerns" : 1.0021135265700483,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.2990055634689883,
      "MetricsIntensity" : 0.06250081722540946,
      "Density" : 0.9998262078554049
    },
    "euclideanDistance" : 12.152991638774644,
    "generation" : 8,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8614694335389796,
      "LackOfCohesion" : 1.2990055634689883,
      "MetricsIntensity" : 0.06250081722540946,
      "Density" : 3.3662960795787
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "a914e538-0fc2-4672-85ae-e3bc3d67afb4",
    "objectives" : {
      "NumberOfConcerns" : 1.002415458937198,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.299155894196589,
      "MetricsIntensity" : 0.06246651232917192,
      "Density" : 0.9996524157108099
    },
    "euclideanDistance" : 12.153018135720075,
    "generation" : 24,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8620302860347726,
      "LackOfCohesion" : 1.299155894196589,
      "MetricsIntensity" : 0.062466512329171914,
      "Density" : 3.365710942071386
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "6487c57c-de57-41fd-b77d-14bcd18a8f65",
    "objectives" : {
      "NumberOfConcerns" : 1.002717391304348,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.2983512668736215,
      "MetricsIntensity" : 0.06248298145557075,
      "Density" : 0.9998262078554049
    },
    "euclideanDistance" : 13.141336109692295,
    "generation" : 40,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8625911385305665,
      "LackOfCohesion" : 1.2983512668736215,
      "MetricsIntensity" : 0.06248298145557074,
      "Density" : 3.368266978922717
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "4e8cf7ea-7c87-4a2c-b7c7-4329fb22e9ce",
    "objectives" : {
      "NumberOfConcerns" : 1.0030193236714975,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.298501597601222,
      "MetricsIntensity" : 0.06244867597524327,
      "Density" : 0.9996524157108099
    },
    "euclideanDistance" : 13.141360620270598,
    "generation" : 17,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.86315199102636,
      "LackOfCohesion" : 1.298501597601222,
      "MetricsIntensity" : 0.06244867597524327,
      "Density" : 3.36768149882904
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "4a929b7f-c999-421f-a436-d45728bf525c",
    "objectives" : {
      "NumberOfConcerns" : 1.0006038647342994,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.2991553863110274,
      "MetricsIntensity" : 0.06251618936146386,
      "Density" : 0.9986096628432395
    },
    "euclideanDistance" : 14.131176254811852,
    "generation" : 36,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8597081930415262,
      "LackOfCohesion" : 1.2991553863110274,
      "MetricsIntensity" : 0.06251618936146386,
      "Density" : 3.3661394258933806
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "70c5dc70-a920-4c3b-861b-cee647ded439",
    "objectives" : {
      "NumberOfConcerns" : 1.0009057971014492,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.2993058074903294,
      "MetricsIntensity" : 0.06248186324005315,
      "Density" : 0.9984358706986444
    },
    "euclideanDistance" : 14.131199035014017,
    "generation" : 23,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8602693602693605,
      "LackOfCohesion" : 1.2993058074903294,
      "MetricsIntensity" : 0.062481863240053157,
      "Density" : 3.3655536028119513
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "6b60772f-37e2-4c61-9263-fd5f05388f8f",
    "objectives" : {
      "NumberOfConcerns" : 1.001207729468599,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.2990916363826563,
      "MetricsIntensity" : 0.06252733216795811,
      "Density" : 0.9989572471324296
    },
    "euclideanDistance" : 15.12256199346306,
    "generation" : 10,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8608305274971946,
      "LackOfCohesion" : 1.2990916363826563,
      "MetricsIntensity" : 0.06252733216795811,
      "Density" : 3.367311072056239
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "3d4bfeeb-b900-4e6a-83dd-7c4f50ff1d77",
    "objectives" : {
      "NumberOfConcerns" : 1.0015096618357489,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.2992420575619585,
      "MetricsIntensity" : 0.062493006046547415,
      "Density" : 0.9987834549878345
    },
    "euclideanDistance" : 15.122583287674441,
    "generation" : 28,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8613916947250277,
      "LackOfCohesion" : 1.2992420575619585,
      "MetricsIntensity" : 0.06249300604654742,
      "Density" : 3.3667252489748094
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "29a10ccd-3ed0-4c09-aa85-e2c0963319a1",
    "objectives" : {
      "NumberOfConcerns" : 0.9990942028985508,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.2998966856749368,
      "MetricsIntensity" : 0.06256058676778156,
      "Density" : 0.9977407021202641
    },
    "euclideanDistance" : 16.11481681420482,
    "generation" : 30,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8579449747332957,
      "LackOfCohesion" : 1.2998966856749368,
      "MetricsIntensity" : 0.06256058676778158,
      "Density" : 3.365181711606096
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "76425ce3-f3e5-4550-aede-5c3551fa131e",
    "objectives" : {
      "NumberOfConcerns" : 1.0003019323671498,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.29978702712157,
      "MetricsIntensity" : 0.06252880167984906,
      "Density" : 0.9980882864094542
    },
    "euclideanDistance" : 16.114904292308974,
    "generation" : 31,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8601909039865245,
      "LackOfCohesion" : 1.29978702712157,
      "MetricsIntensity" : 0.06252880167984905,
      "Density" : 3.3663540445486517
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "40ca06ac-93f9-476e-bf81-591384e1a855",
    "objectives" : {
      "NumberOfConcerns" : 1.0015096618357489,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.298982043809165,
      "MetricsIntensity" : 0.06249238318452132,
      "Density" : 0.9994786235662148
    },
    "euclideanDistance" : 16.115000427235827,
    "generation" : 18,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8613916947250277,
      "LackOfCohesion" : 1.298982043809165,
      "MetricsIntensity" : 0.06249238318452132,
      "Density" : 3.3690685413005275
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "fad552d4-51a7-4782-9a9b-bf602e6da374",
    "objectives" : {
      "NumberOfConcerns" : 1.0033212560386473,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.29736409509571,
      "MetricsIntensity" : 0.06254712445846505,
      "Density" : 1.0008689607229753
    },
    "euclideanDistance" : 16.115069281805127,
    "generation" : 35,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8637128435221535,
      "LackOfCohesion" : 1.29736409509571,
      "MetricsIntensity" : 0.06254712445846505,
      "Density" : 3.369806904622587
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "6bdbe083-63a6-4a08-be3c-f1b396858c27",
    "objectives" : {
      "NumberOfConcerns" : 1.0036231884057971,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.2975144258233107,
      "MetricsIntensity" : 0.06251281956222747,
      "Density" : 1.0006951685783803
    },
    "euclideanDistance" : 16.115089260148427,
    "generation" : 18,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8642736960179471,
      "LackOfCohesion" : 1.2975144258233107,
      "MetricsIntensity" : 0.06251281956222747,
      "Density" : 3.3692217671152727
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "e1963d69-cf28-474e-ae9c-4db089320841",
    "objectives" : {
      "NumberOfConcerns" : 0.9993961352657005,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.29978702712157,
      "MetricsIntensity" : 0.06252561674341553,
      "Density" : 0.9982620785540494
    },
    "euclideanDistance" : 17.10814646831403,
    "generation" : 31,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8585064570466037,
      "LackOfCohesion" : 1.29978702712157,
      "MetricsIntensity" : 0.06252561674341554,
      "Density" : 3.3669402110199296
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "42c33420-e402-4d0b-ae81-ee2525cda603",
    "objectives" : {
      "NumberOfConcerns" : 1.0030193236714975,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.2967276950155335,
      "MetricsIntensity" : 0.06285074272921971,
      "Density" : 1.0003475842891902
    },
    "euclideanDistance" : 17.10824935473918,
    "generation" : 17,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8631519910263603,
      "LackOfCohesion" : 1.2967276950155335,
      "MetricsIntensity" : 0.06285074272921971,
      "Density" : 3.368051492100644
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "21b3118b-974c-4afa-ab83-3b1a0bbe117a",
    "objectives" : {
      "NumberOfConcerns" : 1.0033212560386473,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.2968780257431343,
      "MetricsIntensity" : 0.06281643783298216,
      "Density" : 1.000173792144595
    },
    "euclideanDistance" : 17.108268167053886,
    "generation" : 34,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8637128435221537,
      "LackOfCohesion" : 1.2968780257431343,
      "MetricsIntensity" : 0.06281643783298216,
      "Density" : 3.367466354593328
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "52305ae6-d5b1-418f-866b-710237b39b59",
    "objectives" : {
      "NumberOfConcerns" : 1.0033212560386473,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.2977800101087387,
      "MetricsIntensity" : 0.06245543571055625,
      "Density" : 1.0005213764337852
    },
    "euclideanDistance" : 17.10835556690378,
    "generation" : 12,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8637128435221537,
      "LackOfCohesion" : 1.2977800101087387,
      "MetricsIntensity" : 0.06245543571055626,
      "Density" : 3.368636629607958
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "a91e7395-6e88-439f-9562-9b496c485d21",
    "objectives" : {
      "NumberOfConcerns" : 1.0033212560386473,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.2977800101087384,
      "MetricsIntensity" : 0.06245543571055627,
      "Density" : 1.0005213764337852
    },
    "euclideanDistance" : 17.10835556690378,
    "generation" : 35,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8637128435221535,
      "LackOfCohesion" : 1.2977800101087384,
      "MetricsIntensity" : 0.06245543571055626,
      "Density" : 3.368636629607958
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "c8403082-fa8e-4840-8acd-375566e57be0",
    "objectives" : {
      "NumberOfConcerns" : 1.0036231884057971,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.2979303408363394,
      "MetricsIntensity" : 0.06242113081431867,
      "Density" : 1.0003475842891902
    },
    "euclideanDistance" : 17.10837439270414,
    "generation" : 17,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8642736960179476,
      "LackOfCohesion" : 1.2979303408363394,
      "MetricsIntensity" : 0.06242113081431868,
      "Density" : 3.368051492100644
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "87040dff-1c98-4a41-ba02-1c2057add42e",
    "objectives" : {
      "NumberOfConcerns" : 1.0036231884057971,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.2979303408363392,
      "MetricsIntensity" : 0.0624211308143187,
      "Density" : 1.0003475842891902
    },
    "euclideanDistance" : 17.10837439270414,
    "generation" : 32,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8642736960179473,
      "LackOfCohesion" : 1.2979303408363392,
      "MetricsIntensity" : 0.0624211308143187,
      "Density" : 3.3680514921006437
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "7c50663c-de70-4aa5-89ee-7731d406f894",
    "objectives" : {
      "NumberOfConcerns" : 0.998792270531401,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.3005291535578736,
      "MetricsIntensity" : 0.0625732334293744,
      "Density" : 0.997219325686479
    },
    "euclideanDistance" : 18.102135892540186,
    "generation" : 24,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8584269662921342,
      "LackOfCohesion" : 1.3005291535578736,
      "MetricsIntensity" : 0.06257323342937442,
      "Density" : 3.3653958944281515
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "44b15417-eebf-4054-91be-53a8ed90fddd",
    "objectives" : {
      "NumberOfConcerns" : 1.0021135265700483,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.2982542918178752,
      "MetricsIntensity" : 0.06255718822774765,
      "Density" : 0.9998262078554049
    },
    "euclideanDistance" : 18.10229989736309,
    "generation" : 19,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8625140291806965,
      "LackOfCohesion" : 1.2982542918178752,
      "MetricsIntensity" : 0.06255718822774765,
      "Density" : 3.368266978922717
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "3794dadd-a998-476a-b189-2a56ad4d17aa",
    "objectives" : {
      "NumberOfConcerns" : 0.9975845410628019,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.300378551148235,
      "MetricsIntensity" : 0.06260441405248798,
      "Density" : 0.9975669099756691
    },
    "euclideanDistance" : 19.096733185165235,
    "generation" : 16,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.856179775280899,
      "LackOfCohesion" : 1.300378551148235,
      "MetricsIntensity" : 0.06260441405248798,
      "Density" : 3.3665689149560114
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "681fde3e-7c64-463b-aacc-2e7843ea89b9",
    "objectives" : {
      "NumberOfConcerns" : 0.9981884057971014,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.3003233302647013,
      "MetricsIntensity" : 0.06258710880665995,
      "Density" : 0.997393117831074
    },
    "euclideanDistance" : 19.09675184512759,
    "generation" : 36,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.857303370786517,
      "LackOfCohesion" : 1.3003233302647013,
      "MetricsIntensity" : 0.06258710880665996,
      "Density" : 3.3659824046920814
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "113b4688-ce90-4b5e-b1a6-4242dd77b7c1",
    "objectives" : {
      "NumberOfConcerns" : 0.998792270531401,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.3002688265354987,
      "MetricsIntensity" : 0.06257260981691214,
      "Density" : 0.9979144942648592
    },
    "euclideanDistance" : 19.09680689775902,
    "generation" : 23,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8584269662921344,
      "LackOfCohesion" : 1.3002688265354987,
      "MetricsIntensity" : 0.06257260981691214,
      "Density" : 3.3677419354838714
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "4c397283-2333-4c70-8875-1a2a670d911a",
    "objectives" : {
      "NumberOfConcerns" : 1.0021135265700483,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.2980795167333528,
      "MetricsIntensity" : 0.06243645383539461,
      "Density" : 0.9991310392770246
    },
    "euclideanDistance" : 19.096895116649506,
    "generation" : 31,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.862514029180696,
      "LackOfCohesion" : 1.2980795167333528,
      "MetricsIntensity" : 0.06243645383539462,
      "Density" : 3.367896895137668
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "8915fafa-ae53-4047-97a4-c6751dc361f6",
    "objectives" : {
      "NumberOfConcerns" : 0.9993961352657005,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 1.29767986276275,
      "MetricsIntensity" : 0.06289978351498292,
      "Density" : 0.9979144942648592
    },
    "euclideanDistance" : 20.09185296039253,
    "generation" : 34,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8585064570466032,
      "LackOfCohesion" : 1.29767986276275,
      "MetricsIntensity" : 0.06289978351498293,
      "Density" : 3.365767878077374
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "acef02dd-ddcc-4aa5-8564-1bbf58efb6c3",
    "objectives" : {
      "NumberOfConcerns" : 0.9996980676328503,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 1.2978303745026658,
      "MetricsIntensity" : 0.06286543672763517,
      "Density" : 0.9977407021202641
    },
    "euclideanDistance" : 20.091868964315218,
    "generation" : 35,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8590679393599099,
      "LackOfCohesion" : 1.2978303745026658,
      "MetricsIntensity" : 0.06286543672763518,
      "Density" : 3.3651817116060965
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "e9d60b67-f46d-4492-842f-cd707670a1ee",
    "objectives" : {
      "NumberOfConcerns" : 1.0015096618357489,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 1.2985837858296798,
      "MetricsIntensity" : 0.06252688708999267,
      "Density" : 0.9996524157108099
    },
    "euclideanDistance" : 20.09210183170033,
    "generation" : 37,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.861391694725028,
      "LackOfCohesion" : 1.2985837858296798,
      "MetricsIntensity" : 0.06252688708999267,
      "Density" : 3.3676814988290382
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "7dd751f5-d258-4283-9939-61e9b545d5fc",
    "objectives" : {
      "NumberOfConcerns" : 1.0018115942028984,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 1.2987342070089818,
      "MetricsIntensity" : 0.0624925615530233,
      "Density" : 0.9994786235662148
    },
    "euclideanDistance" : 20.09211785377415,
    "generation" : 31,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8619528619528622,
      "LackOfCohesion" : 1.2987342070089818,
      "MetricsIntensity" : 0.06249256155302331,
      "Density" : 3.3670960187353627
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "ca5e35d8-6b80-4d69-b098-ca6173a954fb",
    "objectives" : {
      "NumberOfConcerns" : 0.9972826086956522,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 1.3010116907209586,
      "MetricsIntensity" : 0.06261709475503703,
      "Density" : 0.9970455335418839
    },
    "euclideanDistance" : 21.087560900149427,
    "generation" : 22,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8566610455311974,
      "LackOfCohesion" : 1.3010116907209586,
      "MetricsIntensity" : 0.06261709475503703,
      "Density" : 3.3667840375586855
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "62d8ebc2-58c8-472e-8c16-14151887305c",
    "objectives" : {
      "NumberOfConcerns" : 0.9978864734299517,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 1.3009564365517803,
      "MetricsIntensity" : 0.06259977907807827,
      "Density" : 0.9968717413972888
    },
    "euclideanDistance" : 21.087577790367416,
    "generation" : 10,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8577852726250705,
      "LackOfCohesion" : 1.3009564365517803,
      "MetricsIntensity" : 0.06259977907807829,
      "Density" : 3.366197183098591
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "426f8575-7f26-4e9c-9bb3-bd05d66c82e1",
    "objectives" : {
      "NumberOfConcerns" : 0.9966787439613527,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.3008057433631124,
      "MetricsIntensity" : 0.06263097849602194,
      "Density" : 0.997219325686479
    },
    "euclideanDistance" : 22.083564773913217,
    "generation" : 7,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8555368184373242,
      "LackOfCohesion" : 1.3008057433631124,
      "MetricsIntensity" : 0.06263097849602194,
      "Density" : 3.367370892018779
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "d1ac6c39-c387-4312-884f-f48ee956c07e",
    "objectives" : {
      "NumberOfConcerns" : 0.9981884057971014,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.30083056438533,
      "MetricsIntensity" : 0.06254356096670659,
      "Density" : 0.9966979492526937
    },
    "euclideanDistance" : 22.0836106366185,
    "generation" : 5,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.857303370786517,
      "LackOfCohesion" : 1.30083056438533,
      "MetricsIntensity" : 0.06254356096670662,
      "Density" : 3.363636363636363
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "ed30f975-a03a-4c58-836b-964723b44035",
    "objectives" : {
      "NumberOfConcerns" : 1.002415458937198,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.2969413298099672,
      "MetricsIntensity" : 0.06253496155356422,
      "Density" : 1.0003475842891902
    },
    "euclideanDistance" : 22.083738349203813,
    "generation" : 28,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8630751964085295,
      "LackOfCohesion" : 1.2969413298099672,
      "MetricsIntensity" : 0.06253496155356422,
      "Density" : 3.370023419203747
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "4543099c-c8ba-4552-b55d-4fcad0413244",
    "objectives" : {
      "NumberOfConcerns" : 1.002717391304348,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.2970917509892692,
      "MetricsIntensity" : 0.06250063601659485,
      "Density" : 1.000173792144595
    },
    "euclideanDistance" : 22.0837529220308,
    "generation" : 25,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8636363636363635,
      "LackOfCohesion" : 1.2970917509892692,
      "MetricsIntensity" : 0.06250063601659486,
      "Density" : 3.3694379391100697
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "4df2346d-8a8f-4764-9c43-4cbe49a288d6",
    "objectives" : {
      "NumberOfConcerns" : 0.9978864734299517,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.3004196349533161,
      "MetricsIntensity" : 0.06257730483242782,
      "Density" : 0.9975669099756691
    },
    "euclideanDistance" : 23.079989694533772,
    "generation" : 20,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8567415730337078,
      "LackOfCohesion" : 1.3004196349533161,
      "MetricsIntensity" : 0.06257730483242782,
      "Density" : 3.3665689149560114
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "8f545064-fb42-49b1-a411-cf5d0f33ceaa",
    "objectives" : {
      "NumberOfConcerns" : 0.9981884057971014,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.3005702373629549,
      "MetricsIntensity" : 0.06254293735424436,
      "Density" : 0.997393117831074
    },
    "euclideanDistance" : 23.08000363271834,
    "generation" : 20,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8573033707865167,
      "LackOfCohesion" : 1.3005702373629549,
      "MetricsIntensity" : 0.06254293735424436,
      "Density" : 3.3659824046920814
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "9d712e34-4aac-4251-8d36-d18bfdd1f899",
    "objectives" : {
      "NumberOfConcerns" : 1.002415458937198,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.2964549679968906,
      "MetricsIntensity" : 0.06280443696982291,
      "Density" : 0.9996524157108099
    },
    "euclideanDistance" : 23.080053760463812,
    "generation" : 30,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.863075196408529,
      "LackOfCohesion" : 1.2964549679968906,
      "MetricsIntensity" : 0.06280443696982291,
      "Density" : 3.36768149882904
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "80459f22-a136-47f5-9ba6-9c24990b14d1",
    "objectives" : {
      "NumberOfConcerns" : 1.002415458937198,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.2964549679968904,
      "MetricsIntensity" : 0.06280443696982294,
      "Density" : 0.9996524157108099
    },
    "euclideanDistance" : 23.080053760463812,
    "generation" : 37,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.863075196408529,
      "LackOfCohesion" : 1.2964549679968904,
      "MetricsIntensity" : 0.06280443696982294,
      "Density" : 3.3676814988290396
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "852b8bc5-7059-4508-8efa-984423fc381f",
    "objectives" : {
      "NumberOfConcerns" : 0.9963768115942029,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.2996303364915032,
      "MetricsIntensity" : 0.06268417350361591,
      "Density" : 0.9970455335418839
    },
    "euclideanDistance" : 24.076541173178825,
    "generation" : 36,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8549747048903877,
      "LackOfCohesion" : 1.2996303364915032,
      "MetricsIntensity" : 0.06268417350361591,
      "Density" : 3.3667840375586855
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "4a59d368-2c26-4782-9335-a18a4e7140d7",
    "objectives" : {
      "NumberOfConcerns" : 0.998792270531401,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.298247168474684,
      "MetricsIntensity" : 0.06292060388845808,
      "Density" : 0.9979144942648592
    },
    "euclideanDistance" : 24.076603249843682,
    "generation" : 28,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8584269662921344,
      "LackOfCohesion" : 1.298247168474684,
      "MetricsIntensity" : 0.06292060388845808,
      "Density" : 3.36774193548387
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "7018784f-31ce-4223-87c2-f08ffc0b81fd",
    "objectives" : {
      "NumberOfConcerns" : 0.9963768115942029,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.3014395224604363,
      "MetricsIntensity" : 0.06264368286874351,
      "Density" : 0.9966979492526937
    },
    "euclideanDistance" : 24.07662440240227,
    "generation" : 7,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.856017997750281,
      "LackOfCohesion" : 1.3014395224604363,
      "MetricsIntensity" : 0.06264368286874351,
      "Density" : 3.3675866118614204
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "72e2160e-5048-410b-bc44-bae40711703e",
    "objectives" : {
      "NumberOfConcerns" : 0.9975845410628019,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.3013132832306493,
      "MetricsIntensity" : 0.0625905931826365,
      "Density" : 0.9963503649635036
    },
    "euclideanDistance" : 24.076653064946505,
    "generation" : 25,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8572231590781336,
      "LackOfCohesion" : 1.3013132832306493,
      "MetricsIntensity" : 0.0625905931826365,
      "Density" : 3.3644366197183095
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "6da83f31-0dda-4f20-8ba5-8c9f4b7205b0",
    "objectives" : {
      "NumberOfConcerns" : 1.0015096618357489,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.2985148445579966,
      "MetricsIntensity" : 0.06250116883944115,
      "Density" : 0.9991310392770246
    },
    "euclideanDistance" : 24.07677992660233,
    "generation" : 30,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8624368332397532,
      "LackOfCohesion" : 1.2985148445579966,
      "MetricsIntensity" : 0.06250116883944115,
      "Density" : 3.3698710433763175
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "f4066761-55e5-4fc3-b1ff-f025b4fc24db",
    "objectives" : {
      "NumberOfConcerns" : 0.9963768115942029,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.3011625900419814,
      "MetricsIntensity" : 0.06262179260058014,
      "Density" : 0.9966979492526937
    },
    "euclideanDistance" : 25.073554178204585,
    "generation" : 21,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8549747048903877,
      "LackOfCohesion" : 1.3011625900419814,
      "MetricsIntensity" : 0.06262179260058015,
      "Density" : 3.3656103286384984
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "a137df4d-49b0-48ac-8963-d0c6fc5a8fbe",
    "objectives" : {
      "NumberOfConcerns" : 1.0009057971014492,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.296603345461067,
      "MetricsIntensity" : 0.06281999998438263,
      "Density" : 0.9984358706986444
    },
    "euclideanDistance" : 25.07356801874093,
    "generation" : 39,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8613138686131394,
      "LackOfCohesion" : 1.296603345461067,
      "MetricsIntensity" : 0.06281999998438263,
      "Density" : 3.3675263774912074
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "4a74ac31-db83-47f3-a3f9-da4c2a63d793",
    "objectives" : {
      "NumberOfConcerns" : 1.002415458937198,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.297357495072703,
      "MetricsIntensity" : 0.0624814782697755,
      "Density" : 1.0
    },
    "euclideanDistance" : 25.07372882435846,
    "generation" : 38,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8630751964085293,
      "LackOfCohesion" : 1.297357495072703,
      "MetricsIntensity" : 0.06248147826977551,
      "Density" : 3.3688524590163924
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "cf7a9c0c-59f8-4470-95d9-405a4b7aa80d",
    "objectives" : {
      "NumberOfConcerns" : 1.002415458937198,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.297357495072703,
      "MetricsIntensity" : 0.0624814782697755,
      "Density" : 1.0
    },
    "euclideanDistance" : 25.07372882435846,
    "generation" : 37,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8630751964085295,
      "LackOfCohesion" : 1.297357495072703,
      "MetricsIntensity" : 0.0624814782697755,
      "Density" : 3.368852459016392
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "19a45c8f-9e52-443a-9ec0-2414fffae825",
    "objectives" : {
      "NumberOfConcerns" : 1.002717391304348,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.297507916252005,
      "MetricsIntensity" : 0.06244715273280614,
      "Density" : 0.9998262078554049
    },
    "euclideanDistance" : 25.073741664385867,
    "generation" : 33,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8636363636363638,
      "LackOfCohesion" : 1.297507916252005,
      "MetricsIntensity" : 0.062447152732806134,
      "Density" : 3.368266978922715
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "72f4afb0-5649-47e4-bcf6-512e2e5f82b0",
    "objectives" : {
      "NumberOfConcerns" : 0.9960748792270532,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.300263406658265,
      "MetricsIntensity" : 0.06269690996017797,
      "Density" : 0.9965241571080987
    },
    "euclideanDistance" : 26.070670136955442,
    "generation" : 23,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8554555680539933,
      "LackOfCohesion" : 1.300263406658265,
      "MetricsIntensity" : 0.06269690996017799,
      "Density" : 3.3669994128009395
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "adfed17e-95d0-4373-9551-27f8b80c0d44",
    "objectives" : {
      "NumberOfConcerns" : 0.9981884057971014,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.298461803628015,
      "MetricsIntensity" : 0.06291732952748137,
      "Density" : 0.9970455335418839
    },
    "euclideanDistance" : 26.07068164692399,
    "generation" : 36,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.857303370786517,
      "LackOfCohesion" : 1.298461803628015,
      "MetricsIntensity" : 0.06291732952748136,
      "Density" : 3.364809384164223
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "86541b34-5824-4ab7-91e3-6c6ba9d7c112",
    "objectives" : {
      "NumberOfConcerns" : 0.9969806763285024,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.3001176487169706,
      "MetricsIntensity" : 0.06267958383950575,
      "Density" : 0.9966979492526937
    },
    "euclideanDistance" : 26.07070409294219,
    "generation" : 25,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8571428571428568,
      "LackOfCohesion" : 1.3001176487169706,
      "MetricsIntensity" : 0.06267958383950575,
      "Density" : 3.3675866118614213
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "b1fcdc2c-fac8-4c71-8ec5-5d318051ff7b",
    "objectives" : {
      "NumberOfConcerns" : 0.9954710144927537,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.30005733508609,
      "MetricsIntensity" : 0.06271080207495115,
      "Density" : 0.9966979492526937
    },
    "euclideanDistance" : 27.06803374946078,
    "generation" : 22,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.854330708661417,
      "LackOfCohesion" : 1.30005733508609,
      "MetricsIntensity" : 0.06271080207495117,
      "Density" : 3.3675866118614217
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "cebad4c6-eadd-4ee4-ac74-ac6b8521efd9",
    "objectives" : {
      "NumberOfConcerns" : 0.9960748792270532,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.301796584366494,
      "MetricsIntensity" : 0.06263449143295464,
      "Density" : 0.9961765728189086
    },
    "euclideanDistance" : 27.06812018511529,
    "generation" : 18,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8554555680539928,
      "LackOfCohesion" : 1.301796584366494,
      "MetricsIntensity" : 0.06263449143295464,
      "Density" : 3.3658250146799773
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "27b6ff90-06a9-4eb0-87c7-77c8a99bc162",
    "objectives" : {
      "NumberOfConcerns" : 1.001207729468599,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.2976569276404772,
      "MetricsIntensity" : 0.062462500645477266,
      "Density" : 0.9986096628432395
    },
    "euclideanDistance" : 27.06820003698273,
    "generation" : 33,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8618753509264456,
      "LackOfCohesion" : 1.2976569276404772,
      "MetricsIntensity" : 0.06246250064547726,
      "Density" : 3.3681125439624853
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "e5a837bc-309f-4565-bc8f-5e30b41c5cbe",
    "objectives" : {
      "NumberOfConcerns" : 0.9954710144927537,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.2993285453796162,
      "MetricsIntensity" : 0.0630153359617214,
      "Density" : 0.9965241571080987
    },
    "euclideanDistance" : 28.06557051865862,
    "generation" : 15,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8543307086614174,
      "LackOfCohesion" : 1.2993285453796162,
      "MetricsIntensity" : 0.06301533596172142,
      "Density" : 3.3669994128009404
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "14611030-fd2a-4089-b50e-3bf82ce68581",
    "objectives" : {
      "NumberOfConcerns" : 0.9990942028985508,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.2984621054860206,
      "MetricsIntensity" : 0.0626074825663579,
      "Density" : 0.9977407021202641
    },
    "euclideanDistance" : 28.065701474775032,
    "generation" : 32,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8600337268128166,
      "LackOfCohesion" : 1.2984621054860206,
      "MetricsIntensity" : 0.0626074825663579,
      "Density" : 3.3691314553990614
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "0ab04e55-0420-4410-b694-f89c82887f2c",
    "objectives" : {
      "NumberOfConcerns" : 1.001207729468599,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.2954644732957046,
      "MetricsIntensity" : 0.06291856700882445,
      "Density" : 0.9996524157108099
    },
    "euclideanDistance" : 28.065706989445854,
    "generation" : 10,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8618753509264452,
      "LackOfCohesion" : 1.2954644732957046,
      "MetricsIntensity" : 0.06291856700882444,
      "Density" : 3.3696543643819563
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "ee01bede-e495-41bb-888d-5bfcbe2898d1",
    "objectives" : {
      "NumberOfConcerns" : 1.0015096618357489,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.2956149850356204,
      "MetricsIntensity" : 0.06288422080626992,
      "Density" : 0.9994786235662148
    },
    "euclideanDistance" : 28.065718443260835,
    "generation" : 32,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8624368332397536,
      "LackOfCohesion" : 1.2956149850356204,
      "MetricsIntensity" : 0.06288422080626993,
      "Density" : 3.3690685413005266
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "da11f967-389e-46d6-992b-6290f072a250",
    "objectives" : {
      "NumberOfConcerns" : 0.9951690821256038,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 1.3006910450046691,
      "MetricsIntensity" : 0.0627235622883195,
      "Density" : 0.9961765728189086
    },
    "euclideanDistance" : 29.06335253727748,
    "generation" : 12,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8548114800225097,
      "LackOfCohesion" : 1.3006910450046691,
      "MetricsIntensity" : 0.06272356228831952,
      "Density" : 3.367802585193889
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "9f3b92c0-05bf-47ae-9456-ace18cc3e0b5",
    "objectives" : {
      "NumberOfConcerns" : 0.9951690821256038,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.2999618154733878,
      "MetricsIntensity" : 0.06302827996138227,
      "Density" : 0.9960027806743135
    },
    "euclideanDistance" : 30.061208497445563,
    "generation" : 19,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.85481148002251,
      "LackOfCohesion" : 1.2999618154733878,
      "MetricsIntensity" : 0.06302827996138227,
      "Density" : 3.3672150411280852
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "a72decb4-cad7-411c-abc9-d9b75331c306",
    "objectives" : {
      "NumberOfConcerns" : 0.9963768115942029,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.2998363913628757,
      "MetricsIntensity" : 0.06297492629048711,
      "Density" : 0.9956551963851233
    },
    "euclideanDistance" : 30.061231453591915,
    "generation" : 26,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8560179977502809,
      "LackOfCohesion" : 1.2998363913628757,
      "MetricsIntensity" : 0.06297492629048712,
      "Density" : 3.3640634174985315
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "0ba2676f-efcf-4293-89b8-677aa37b897d",
    "objectives" : {
      "NumberOfConcerns" : 0.9951690821256038,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.3004143969921478,
      "MetricsIntensity" : 0.06270161063916231,
      "Density" : 0.9961765728189086
    },
    "euclideanDistance" : 30.061233147729205,
    "generation" : 24,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8537682789651293,
      "LackOfCohesion" : 1.3004143969921478,
      "MetricsIntensity" : 0.06270161063916231,
      "Density" : 3.3658250146799755
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "a085c7f2-a820-4338-b81c-6fc958362cda",
    "objectives" : {
      "NumberOfConcerns" : 0.9972826086956522,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.2984656934190844,
      "MetricsIntensity" : 0.06266584884730463,
      "Density" : 0.9977407021202641
    },
    "euclideanDistance" : 30.061270752845303,
    "generation" : 33,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8566610455311974,
      "LackOfCohesion" : 1.2984656934190844,
      "MetricsIntensity" : 0.06266584884730463,
      "Density" : 3.3691314553990614
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "3548ef09-6b89-4b23-a342-c7c5db2e1000",
    "objectives" : {
      "NumberOfConcerns" : 1.0015096618357489,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.2965180554751146,
      "MetricsIntensity" : 0.06256106766991908,
      "Density" : 0.9998262078554049
    },
    "euclideanDistance" : 30.06139629165661,
    "generation" : 40,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.862436833239753,
      "LackOfCohesion" : 1.2965180554751146,
      "MetricsIntensity" : 0.06256106766991908,
      "Density" : 3.3702401874633847
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "a453673b-1f20-4c95-9607-3ecdd18f17b3",
    "objectives" : {
      "NumberOfConcerns" : 1.0018115942028984,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.2966685672150304,
      "MetricsIntensity" : 0.06252672146736456,
      "Density" : 0.9996524157108099
    },
    "euclideanDistance" : 30.061406992797536,
    "generation" : 31,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8629983155530598,
      "LackOfCohesion" : 1.2966685672150304,
      "MetricsIntensity" : 0.06252672146736456,
      "Density" : 3.3696543643819563
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "48df1605-a7f3-4b6e-8585-bc7ddcdbee18",
    "objectives" : {
      "NumberOfConcerns" : 0.9951690821256038,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.299685607285674,
      "MetricsIntensity" : 0.06300614452593256,
      "Density" : 0.9960027806743135
    },
    "euclideanDistance" : 31.059226253935613,
    "generation" : 14,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8537682789651295,
      "LackOfCohesion" : 1.299685607285674,
      "MetricsIntensity" : 0.06300614452593256,
      "Density" : 3.3652378156194955
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "bc9cdd22-069d-41b5-8e2e-5eeb773513eb",
    "objectives" : {
      "NumberOfConcerns" : 0.9954710144927537,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.2998363913628759,
      "MetricsIntensity" : 0.0629717355912012,
      "Density" : 0.9958289885297185
    },
    "euclideanDistance" : 31.059236597168418,
    "generation" : 31,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8543307086614174,
      "LackOfCohesion" : 1.2998363913628759,
      "MetricsIntensity" : 0.0629717355912012,
      "Density" : 3.3646506165590138
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "1dcedcac-71cf-412a-b55c-87246b3da63a",
    "objectives" : {
      "NumberOfConcerns" : 1.0015096618357489,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.2960314008493872,
      "MetricsIntensity" : 0.06283070532303285,
      "Density" : 0.9991310392770246
    },
    "euclideanDistance" : 31.059377481300494,
    "generation" : 31,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.862436833239753,
      "LackOfCohesion" : 1.2960314008493872,
      "MetricsIntensity" : 0.06283070532303285,
      "Density" : 3.367896895137668
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "c6065feb-4634-4163-ae00-b0e795d8209c",
    "objectives" : {
      "NumberOfConcerns" : 0.9948671497584541,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.2987849898849755,
      "MetricsIntensity" : 0.06308153917538248,
      "Density" : 0.9958289885297185
    },
    "euclideanDistance" : 32.05732767637689,
    "generation" : 35,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8542487338210467,
      "LackOfCohesion" : 1.2987849898849755,
      "MetricsIntensity" : 0.06308153917538248,
      "Density" : 3.3666274970622796
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "44f6941d-b3f8-4a70-a1d3-a20660082207",
    "objectives" : {
      "NumberOfConcerns" : 0.9948671497584541,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.3010483223976952,
      "MetricsIntensity" : 0.06271436530549636,
      "Density" : 0.9956551963851233
    },
    "euclideanDistance" : 32.05741333521135,
    "generation" : 19,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8542487338210467,
      "LackOfCohesion" : 1.3010483223976952,
      "MetricsIntensity" : 0.06271436530549636,
      "Density" : 3.3660399529964757
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "6df35a8e-6a31-4bbe-a8ae-93c5420fe1b9",
    "objectives" : {
      "NumberOfConcerns" : 0.9969806763285024,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.2990980611473228,
      "MetricsIntensity" : 0.06267857425160114,
      "Density" : 0.997219325686479
    },
    "euclideanDistance" : 32.057448451625746,
    "generation" : 24,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8571428571428568,
      "LackOfCohesion" : 1.2990980611473228,
      "MetricsIntensity" : 0.06267857425160114,
      "Density" : 3.3693482090428652
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "04af40cf-91db-4c04-9fb8-309bc3c5d6ee",
    "objectives" : {
      "NumberOfConcerns" : 1.0003019323671498,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.2968171627374492,
      "MetricsIntensity" : 0.06254212655873882,
      "Density" : 0.9984358706986444
    },
    "euclideanDistance" : 32.05749716392345,
    "generation" : 38,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8612359550561792,
      "LackOfCohesion" : 1.2968171627374492,
      "MetricsIntensity" : 0.06254212655873884,
      "Density" : 3.36950146627566
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "b63662ef-06b0-4cf6-a516-a0de3fa88865",
    "objectives" : {
      "NumberOfConcerns" : 0.9942632850241546,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.2985787939485438,
      "MetricsIntensity" : 0.06309543967405115,
      "Density" : 0.9960027806743135
    },
    "euclideanDistance" : 33.055572433973346,
    "generation" : 13,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8531232414181202,
      "LackOfCohesion" : 1.2985787939485438,
      "MetricsIntensity" : 0.06309543967405114,
      "Density" : 3.3672150411280852
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "af9482b9-8b6b-4c5d-9dcc-5718e0e4d7bc",
    "objectives" : {
      "NumberOfConcerns" : 0.9957729468599034,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.2983637335422082,
      "MetricsIntensity" : 0.06304204549669482,
      "Density" : 0.9960027806743135
    },
    "euclideanDistance" : 33.05560932708528,
    "generation" : 33,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8548931383577052,
      "LackOfCohesion" : 1.2983637335422082,
      "MetricsIntensity" : 0.06304204549669482,
      "Density" : 3.3652378156194955
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "411fab91-9208-437c-97f1-6dadedc7c197",
    "objectives" : {
      "NumberOfConcerns" : 0.9996980676328503,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.2960290101270073,
      "MetricsIntensity" : 0.0628806610153952,
      "Density" : 0.9980882864094542
    },
    "euclideanDistance" : 33.055698776860204,
    "generation" : 31,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8601123595505613,
      "LackOfCohesion" : 1.2960290101270073,
      "MetricsIntensity" : 0.0628806610153952,
      "Density" : 3.368328445747801
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "0361416c-8939-47f6-8466-403cedb3b432",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.296179612536646,
      "MetricsIntensity" : 0.0628462935372117,
      "Density" : 0.9979144942648592
    },
    "euclideanDistance" : 33.055708502200204,
    "generation" : 30,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8606741573033703,
      "LackOfCohesion" : 1.296179612536646,
      "MetricsIntensity" : 0.06284629353721172,
      "Density" : 3.3677419354838714
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "2143b77d-e7d7-46f2-bbd9-544f30f2a516",
    "objectives" : {
      "NumberOfConcerns" : 0.9996980676328503,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.2970882470747989,
      "MetricsIntensity" : 0.06260489524432558,
      "Density" : 0.9993048314216197
    },
    "euclideanDistance" : 33.0557765551823,
    "generation" : 35,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8601123595505613,
      "LackOfCohesion" : 1.2970882470747989,
      "MetricsIntensity" : 0.06260489524432558,
      "Density" : 3.370457209847598
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "d5828134-fa92-4fd0-98a1-b0756ea97fd5",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.2972388494844374,
      "MetricsIntensity" : 0.06257052835128762,
      "Density" : 0.9991310392770246
    },
    "euclideanDistance" : 33.05578627921709,
    "generation" : 28,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8606741573033705,
      "LackOfCohesion" : 1.2972388494844374,
      "MetricsIntensity" : 0.06257052835128762,
      "Density" : 3.369871043376319
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "de320eb3-c962-4d3f-b727-c8265354e91b",
    "objectives" : {
      "NumberOfConcerns" : 0.9954710144927537,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.2981935629407948,
      "MetricsIntensity" : 0.0630414211319859,
      "Density" : 0.9963503649635036
    },
    "euclideanDistance" : 34.0539712418111,
    "generation" : 35,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8543307086614174,
      "LackOfCohesion" : 1.2981935629407948,
      "MetricsIntensity" : 0.0630414211319859,
      "Density" : 3.366412213740458
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "88605264-8519-438d-ac12-72f6a745a787",
    "objectives" : {
      "NumberOfConcerns" : 0.9996980676328503,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.2972974624136022,
      "MetricsIntensity" : 0.06258915791004663,
      "Density" : 0.9980882864094542
    },
    "euclideanDistance" : 34.054110978890186,
    "generation" : 31,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8611579539066891,
      "LackOfCohesion" : 1.2972974624136022,
      "MetricsIntensity" : 0.06258915791004664,
      "Density" : 3.3703051643192494
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "61c6def0-6b5f-4b76-a6f9-1e94574a15c7",
    "objectives" : {
      "NumberOfConcerns" : 0.9939613526570048,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 1.2992119937033433,
      "MetricsIntensity" : 0.06310843986194394,
      "Density" : 0.9954814042405283
    },
    "euclideanDistance" : 35.052401870293124,
    "generation" : 20,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8536036036036039,
      "LackOfCohesion" : 1.2992119937033433,
      "MetricsIntensity" : 0.06310843986194394,
      "Density" : 3.367430922986478
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "9c443287-f11d-4a45-a39f-e50e138e8deb",
    "objectives" : {
      "NumberOfConcerns" : 0.9960748792270532,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 1.2995249962073592,
      "MetricsIntensity" : 0.06270521551413702,
      "Density" : 0.9968717413972888
    },
    "euclideanDistance" : 35.052512257948706,
    "generation" : 21,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.856499718626899,
      "LackOfCohesion" : 1.2995249962073592,
      "MetricsIntensity" : 0.06270521551413703,
      "Density" : 3.370152761457109
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "e463917c-0333-4055-a448-72bb7297da41",
    "objectives" : {
      "NumberOfConcerns" : 0.9996980676328503,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 1.2972723468821572,
      "MetricsIntensity" : 0.06256865345706858,
      "Density" : 0.9982620785540494
    },
    "euclideanDistance" : 35.052571286316336,
    "generation" : 30,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8611579539066885,
      "LackOfCohesion" : 1.2972723468821572,
      "MetricsIntensity" : 0.06256865345706858,
      "Density" : 3.370892018779342
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "40647def-985f-4291-89be-034892d6bad4",
    "objectives" : {
      "NumberOfConcerns" : 0.9939613526570048,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.2989360713415696,
      "MetricsIntensity" : 0.06308624269122805,
      "Density" : 0.9954814042405283
    },
    "euclideanDistance" : 36.0509383676516,
    "generation" : 30,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.852560495216657,
      "LackOfCohesion" : 1.2989360713415696,
      "MetricsIntensity" : 0.06308624269122805,
      "Density" : 3.3654524089306697
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "bb754e39-89da-49b3-b2c1-63b5bced3934",
    "objectives" : {
      "NumberOfConcerns" : 0.9939613526570048,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.2989360713415699,
      "MetricsIntensity" : 0.063086242691228,
      "Density" : 0.9954814042405283
    },
    "euclideanDistance" : 36.0509383676516,
    "generation" : 22,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8525604952166572,
      "LackOfCohesion" : 1.2989360713415699,
      "MetricsIntensity" : 0.063086242691228,
      "Density" : 3.3654524089306697
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "c1801720-46b7-49c6-9e4e-51437d2f1951",
    "objectives" : {
      "NumberOfConcerns" : 0.9942632850241546,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.299086946417007,
      "MetricsIntensity" : 0.06305181299069418,
      "Density" : 0.9953076120959332
    },
    "euclideanDistance" : 36.05094727116217,
    "generation" : 18,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8531232414181202,
      "LackOfCohesion" : 1.299086946417007,
      "MetricsIntensity" : 0.06305181299069418,
      "Density" : 3.3648648648648654
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "e1c078bf-c3b8-4059-a680-f67dc5e8ae73",
    "objectives" : {
      "NumberOfConcerns" : 0.9942632850241546,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.2990869464170072,
      "MetricsIntensity" : 0.06305181299069416,
      "Density" : 0.9953076120959332
    },
    "euclideanDistance" : 36.05094727116217,
    "generation" : 19,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8531232414181202,
      "LackOfCohesion" : 1.2990869464170072,
      "MetricsIntensity" : 0.06305181299069416,
      "Density" : 3.364864864864866
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "d6aa6ff9-bc95-4e21-9813-8583547ba2f2",
    "objectives" : {
      "NumberOfConcerns" : 0.9951690821256038,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.2988261480723222,
      "MetricsIntensity" : 0.06305438087405489,
      "Density" : 0.9958289885297185
    },
    "euclideanDistance" : 36.05097726961474,
    "generation" : 22,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8548114800225097,
      "LackOfCohesion" : 1.2988261480723222,
      "MetricsIntensity" : 0.06305438087405489,
      "Density" : 3.36662749706228
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "8ac115eb-43c9-4ebb-8adc-3347fefdcc4e",
    "objectives" : {
      "NumberOfConcerns" : 0.9984903381642513,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.29639350941395,
      "MetricsIntensity" : 0.06295178607621775,
      "Density" : 0.9975669099756691
    },
    "euclideanDistance" : 36.0510294132346,
    "generation" : 28,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8589094997189428,
      "LackOfCohesion" : 1.29639350941395,
      "MetricsIntensity" : 0.06295178607621776,
      "Density" : 3.3685446009389666
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "5efe5497-2b55-4ee4-8646-431eebd37c09",
    "objectives" : {
      "NumberOfConcerns" : 0.9993961352657005,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.2966344123834632,
      "MetricsIntensity" : 0.062873003779109,
      "Density" : 0.9977407021202641
    },
    "euclideanDistance" : 36.05106784767731,
    "generation" : 30,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.860595840359753,
      "LackOfCohesion" : 1.2966344123834632,
      "MetricsIntensity" : 0.062873003779109,
      "Density" : 3.3691314553990606
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "5e5e1c2b-3e8f-4e68-91ea-e3f24d1dafc7",
    "objectives" : {
      "NumberOfConcerns" : 1.0003019323671498,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.2950400543037142,
      "MetricsIntensity" : 0.06294491993937909,
      "Density" : 0.9991310392770246
    },
    "euclideanDistance" : 36.05107429182578,
    "generation" : 11,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.861235955056179,
      "LackOfCohesion" : 1.2950400543037142,
      "MetricsIntensity" : 0.06294491993937909,
      "Density" : 3.369871043376319
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "5f08483a-52a4-4211-9e77-eb70d065fbc0",
    "objectives" : {
      "NumberOfConcerns" : 1.0006038647342994,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.2951906567133527,
      "MetricsIntensity" : 0.0629105530463411,
      "Density" : 0.9989572471324296
    },
    "euclideanDistance" : 36.05108320495574,
    "generation" : 31,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8617977528089886,
      "LackOfCohesion" : 1.2951906567133527,
      "MetricsIntensity" : 0.0629105530463411,
      "Density" : 3.3692848769050405
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "5d7a96c6-b75f-4a5e-a12b-6789977cc76d",
    "objectives" : {
      "NumberOfConcerns" : 0.9960748792270532,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.299818331306509,
      "MetricsIntensity" : 0.06266881887789078,
      "Density" : 0.9963503649635036
    },
    "euclideanDistance" : 37.049673875623384,
    "generation" : 33,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8564997186268988,
      "LackOfCohesion" : 1.299818331306509,
      "MetricsIntensity" : 0.06266881887789078,
      "Density" : 3.3683901292596943
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "2e9efb90-79f5-439f-8107-4daa5c3b7f2b",
    "objectives" : {
      "NumberOfConcerns" : 0.9978864734299517,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.2978688119084232,
      "MetricsIntensity" : 0.0626330552946998,
      "Density" : 0.9975669099756691
    },
    "euclideanDistance" : 37.04968695557728,
    "generation" : 36,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.858830146231721,
      "LackOfCohesion" : 1.2978688119084232,
      "MetricsIntensity" : 0.0626330552946998,
      "Density" : 3.370522607163829
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "7231da2d-d4d3-4dc3-ab2e-f597a5c12f3d",
    "objectives" : {
      "NumberOfConcerns" : 0.9936594202898551,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.2995694868435872,
      "MetricsIntensity" : 0.06309923732538718,
      "Density" : 0.9949600278067431
    },
    "euclideanDistance" : 38.048261022881846,
    "generation" : 10,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8530405405405408,
      "LackOfCohesion" : 1.2995694868435872,
      "MetricsIntensity" : 0.06309923732538719,
      "Density" : 3.3656672545561435
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "69dad2c1-7286-4e37-b3ac-9770b65182ac",
    "objectives" : {
      "NumberOfConcerns" : 0.9936594202898551,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.2995694868435876,
      "MetricsIntensity" : 0.06309923732538716,
      "Density" : 0.9949600278067431
    },
    "euclideanDistance" : 38.048261022881846,
    "generation" : 14,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8530405405405408,
      "LackOfCohesion" : 1.2995694868435876,
      "MetricsIntensity" : 0.06309923732538718,
      "Density" : 3.3656672545561435
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "87760f42-3bb9-4252-8989-05a01ac020cc",
    "objectives" : {
      "NumberOfConcerns" : 0.998792270531401,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.295187757772252,
      "MetricsIntensity" : 0.06296058698066592,
      "Density" : 0.9979144942648592
    },
    "euclideanDistance" : 38.04832315228798,
    "generation" : 14,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8594716132658797,
      "LackOfCohesion" : 1.295187757772252,
      "MetricsIntensity" : 0.06296058698066592,
      "Density" : 3.3697183098591554
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "f32af5da-d2e1-44b2-994e-b2ddba3e8079",
    "objectives" : {
      "NumberOfConcerns" : 0.9990942028985508,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.2953384509609196,
      "MetricsIntensity" : 0.06292619878670291,
      "Density" : 0.9977407021202641
    },
    "euclideanDistance" : 38.048331594748866,
    "generation" : 31,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8600337268128164,
      "LackOfCohesion" : 1.2953384509609196,
      "MetricsIntensity" : 0.06292619878670291,
      "Density" : 3.3691314553990606
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "a4c1d6a4-d936-4ddc-86af-9bfe57dd6d31",
    "objectives" : {
      "NumberOfConcerns" : 0.9978864734299517,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.2971400222019498,
      "MetricsIntensity" : 0.06293758918147004,
      "Density" : 0.997393117831074
    },
    "euclideanDistance" : 38.04835218275137,
    "generation" : 32,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.858830146231721,
      "LackOfCohesion" : 1.2971400222019498,
      "MetricsIntensity" : 0.06293758918147004,
      "Density" : 3.369935408103347
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "bc8703d0-82ac-4c85-8f87-841f957d44ed",
    "objectives" : {
      "NumberOfConcerns" : 0.9951690821256038,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 1.2974127451512338,
      "MetricsIntensity" : 0.06307709289986865,
      "Density" : 0.9966979492526937
    },
    "euclideanDistance" : 39.04703608284492,
    "generation" : 11,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8548114800225097,
      "LackOfCohesion" : 1.2974127451512338,
      "MetricsIntensity" : 0.06307709289986867,
      "Density" : 3.369565217391304
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "7894c248-b751-4c5e-9c46-8eaa877423e5",
    "objectives" : {
      "NumberOfConcerns" : 0.9984903381642513,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 1.295609698700522,
      "MetricsIntensity" : 0.06298900530754321,
      "Density" : 0.9986096628432395
    },
    "euclideanDistance" : 39.04710970507661,
    "generation" : 35,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.858909499718943,
      "LackOfCohesion" : 1.295609698700522,
      "MetricsIntensity" : 0.06298900530754321,
      "Density" : 3.370087976539589
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "29c5e969-f222-409c-a495-f70e937794e9",
    "objectives" : {
      "NumberOfConcerns" : 0.998792270531401,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 1.2957603918891896,
      "MetricsIntensity" : 0.06295461769907842,
      "Density" : 0.9984358706986444
    },
    "euclideanDistance" : 39.04711792776324,
    "generation" : 34,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8594716132658795,
      "LackOfCohesion" : 1.2957603918891896,
      "MetricsIntensity" : 0.06295461769907844,
      "Density" : 3.36950146627566
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "db53dfaa-1486-4269-8a93-9ff40645cade",
    "objectives" : {
      "NumberOfConcerns" : 0.9954710144927537,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.298011453100629,
      "MetricsIntensity" : 0.06306286593045694,
      "Density" : 0.9963503649635036
    },
    "euclideanDistance" : 40.045879778672585,
    "generation" : 25,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8564189189189186,
      "LackOfCohesion" : 1.298011453100629,
      "MetricsIntensity" : 0.06306286593045694,
      "Density" : 3.3703703703703707
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "597844ab-ee21-4532-9593-4f73d555527c",
    "objectives" : {
      "NumberOfConcerns" : 0.9948671497584541,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 1.2980452407702863,
      "MetricsIntensity" : 0.0630900820087915,
      "Density" : 0.9961765728189086
    },
    "euclideanDistance" : 41.044744245949886,
    "generation" : 22,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8552927927927931,
      "LackOfCohesion" : 1.2980452407702863,
      "MetricsIntensity" : 0.06309008200879151,
      "Density" : 3.369782480893592
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "30e350eb-b65b-4fef-9afe-8816028efe37",
    "objectives" : {
      "NumberOfConcerns" : 0.9969806763285024,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 1.2957578348276029,
      "MetricsIntensity" : 0.06300470838767769,
      "Density" : 0.997393117831074
    },
    "euclideanDistance" : 41.04475266657439,
    "generation" : 26,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.857142857142857,
      "LackOfCohesion" : 1.2957578348276029,
      "MetricsIntensity" : 0.06300470838767769,
      "Density" : 3.3699354081033475
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "5826af2b-5ed7-4b4d-9bf2-69968ede21df",
    "objectives" : {
      "NumberOfConcerns" : 0.9981884057971014,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 1.2956422337017486,
      "MetricsIntensity" : 0.06298738226700547,
      "Density" : 0.9977407021202641
    },
    "euclideanDistance" : 41.04478679211541,
    "generation" : 32,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.859392575928009,
      "LackOfCohesion" : 1.2956422337017486,
      "MetricsIntensity" : 0.06298738226700547,
      "Density" : 3.3711098062243097
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "fc041720-e0c9-4a05-ad30-65d6cdd968eb",
    "objectives" : {
      "NumberOfConcerns" : 0.9984903381642513,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 1.2957930177789498,
      "MetricsIntensity" : 0.06295297333227408,
      "Density" : 0.9975669099756691
    },
    "euclideanDistance" : 41.044794619014255,
    "generation" : 29,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.859955005624297,
      "LackOfCohesion" : 1.2957930177789498,
      "MetricsIntensity" : 0.06295297333227408,
      "Density" : 3.370522607163829
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "d131e9c8-71b9-4938-9782-87e3ff7c00ef",
    "objectives" : {
      "NumberOfConcerns" : 0.9948671497584541,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 1.2977700225442594,
      "MetricsIntensity" : 0.06306789591704552,
      "Density" : 0.9961765728189086
    },
    "euclideanDistance" : 42.04367149763221,
    "generation" : 16,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8542487338210476,
      "LackOfCohesion" : 1.2977700225442594,
      "MetricsIntensity" : 0.06306789591704554,
      "Density" : 3.3678025851938895
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "648f51ef-71f2-422b-b243-bc1769d28ef4",
    "objectives" : {
      "NumberOfConcerns" : 0.9972826086956522,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 1.2974417966130334,
      "MetricsIntensity" : 0.06290788092572298,
      "Density" : 0.9968717413972888
    },
    "euclideanDistance" : 42.04373483038209,
    "generation" : 31,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8577052868391448,
      "LackOfCohesion" : 1.2974417966130334,
      "MetricsIntensity" : 0.06290788092572298,
      "Density" : 3.3681738109219026
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "19b94956-c99a-497e-8353-52020ebda3bc",
    "objectives" : {
      "NumberOfConcerns" : 0.9966787439613527,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 1.298652282509199,
      "MetricsIntensity" : 0.06265047210370825,
      "Density" : 0.9966979492526937
    },
    "euclideanDistance" : 43.042736880375415,
    "generation" : 34,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8576252110298244,
      "LackOfCohesion" : 1.298652282509199,
      "MetricsIntensity" : 0.06265047210370825,
      "Density" : 3.369565217391304
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "83592bf9-753f-4b9c-8134-764a758aab6d",
    "objectives" : {
      "NumberOfConcerns" : 0.9945652173913043,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 1.2984027339105304,
      "MetricsIntensity" : 0.06308087947223477,
      "Density" : 0.9956551963851233
    },
    "euclideanDistance" : 44.04168841107837,
    "generation" : 19,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8547297297297298,
      "LackOfCohesion" : 1.2984027339105304,
      "MetricsIntensity" : 0.06308087947223479,
      "Density" : 3.3680188124632577
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "5f34e5d3-8c87-4156-9f0a-f51f73e2a41d",
    "objectives" : {
      "NumberOfConcerns" : 0.9945652173913043,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 1.2984027339105302,
      "MetricsIntensity" : 0.06308087947223479,
      "Density" : 0.9956551963851233
    },
    "euclideanDistance" : 44.04168841107837,
    "generation" : 18,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8547297297297298,
      "LackOfCohesion" : 1.2984027339105302,
      "MetricsIntensity" : 0.06308087947223479,
      "Density" : 3.3680188124632573
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "4ad769aa-57e8-4690-9005-847cb80395f7",
    "objectives" : {
      "NumberOfConcerns" : 0.9963768115942029,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 1.2962129290751352,
      "MetricsIntensity" : 0.06303154647226307,
      "Density" : 0.997219325686479
    },
    "euclideanDistance" : 44.04170017230894,
    "generation" : 19,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8570624648283627,
      "LackOfCohesion" : 1.2962129290751352,
      "MetricsIntensity" : 0.06303154647226308,
      "Density" : 3.371327849588719
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "35d613ca-cf2d-4d1e-925f-4f180f171129",
    "objectives" : {
      "NumberOfConcerns" : 0.9975845410628019,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 1.295969138792366,
      "MetricsIntensity" : 0.0629781908312166,
      "Density" : 0.9970455335418839
    },
    "euclideanDistance" : 44.04171632638476,
    "generation" : 30,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8582677165354329,
      "LackOfCohesion" : 1.295969138792366,
      "MetricsIntensity" : 0.0629781908312166,
      "Density" : 3.3687610099823835
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "7a5be74d-d9ed-4a36-b071-0c9556adf9cd",
    "objectives" : {
      "NumberOfConcerns" : 0.9978864734299517,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 1.2961199228695675,
      "MetricsIntensity" : 0.06294378189648521,
      "Density" : 0.9968717413972888
    },
    "euclideanDistance" : 44.04172362041238,
    "generation" : 36,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.858830146231721,
      "LackOfCohesion" : 1.2961199228695675,
      "MetricsIntensity" : 0.06294378189648521,
      "Density" : 3.3681738109219026
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "1cbf4353-4463-446c-8660-a6a00053455d",
    "objectives" : {
      "NumberOfConcerns" : 0.9978864734299517,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 1.2961199228695672,
      "MetricsIntensity" : 0.06294378189648522,
      "Density" : 0.9968717413972888
    },
    "euclideanDistance" : 44.04172362041238,
    "generation" : 29,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.858830146231721,
      "LackOfCohesion" : 1.2961199228695672,
      "MetricsIntensity" : 0.06294378189648522,
      "Density" : 3.3681738109219026
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "d23589f2-e995-4e5c-8843-0649c02e4538",
    "objectives" : {
      "NumberOfConcerns" : 0.9960748792270532,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 1.2968447001675718,
      "MetricsIntensity" : 0.06304450807730448,
      "Density" : 0.9966979492526937
    },
    "euclideanDistance" : 46.039888713521265,
    "generation" : 13,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.857545045045046,
      "LackOfCohesion" : 1.2968447001675718,
      "MetricsIntensity" : 0.0630445080773045,
      "Density" : 3.3715461493239274
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn.ObserveOnMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "85edb9a7-6886-4bb6-8412-a52a5bc95860",
    "objectives" : {
      "NumberOfConcerns" : 0.9972826086956522,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 1.2966003814832487,
      "MetricsIntensity" : 0.06299111241378001,
      "Density" : 0.9965241571080987
    },
    "euclideanDistance" : 46.03990414224179,
    "generation" : 32,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8587507034327524,
      "LackOfCohesion" : 1.2966003814832487,
      "MetricsIntensity" : 0.06299111241378001,
      "Density" : 3.3689776733254977
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "7328c148-8c83-44dc-b787-4f6843437e3f",
    "objectives" : {
      "NumberOfConcerns" : 0.9957729468599034,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 1.2965400314530735,
      "MetricsIntensity" : 0.06302234948943992,
      "Density" : 0.9965241571080987
    },
    "euclideanDistance" : 47.039022226520544,
    "generation" : 27,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8559369724254364,
      "LackOfCohesion" : 1.2965400314530735,
      "MetricsIntensity" : 0.06302234948943991,
      "Density" : 3.3689776733254995
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "d8ad9d09-79d2-492e-99bc-bf0f3cf510a9",
    "objectives" : {
      "NumberOfConcerns" : 0.9960748792270532,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 1.296690906528511,
      "MetricsIntensity" : 0.06298791978890608,
      "Density" : 0.9963503649635036
    },
    "euclideanDistance" : 47.03902905035246,
    "generation" : 33,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.856499718626899,
      "LackOfCohesion" : 1.296690906528511,
      "MetricsIntensity" : 0.06298791978890608,
      "Density" : 3.3683901292596943
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "a4fa7c44-8969-4541-a294-80f67fb674b2",
    "objectives" : {
      "NumberOfConcerns" : 0.9954710144927537,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 1.2971720000711007,
      "MetricsIntensity" : 0.06303530554074778,
      "Density" : 0.9960027806743135
    },
    "euclideanDistance" : 49.037430731302784,
    "generation" : 20,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8564189189189186,
      "LackOfCohesion" : 1.2971720000711007,
      "MetricsIntensity" : 0.0630353055407478,
      "Density" : 3.369194591416813
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "86577165-80e9-4682-91cf-2ed08fb58cf2",
    "objectives" : {
      "NumberOfConcerns" : 0.9954710144927537,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 1.2971720000711007,
      "MetricsIntensity" : 0.06303530554074778,
      "Density" : 0.9960027806743135
    },
    "euclideanDistance" : 49.037430731302784,
    "generation" : 14,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8564189189189186,
      "LackOfCohesion" : 1.2971720000711007,
      "MetricsIntensity" : 0.06303530554074778,
      "Density" : 3.3691945914168127
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureReduce.BackpressureReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe.ConcatMapMaybeSubscriber.ConcatMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  } ]
}