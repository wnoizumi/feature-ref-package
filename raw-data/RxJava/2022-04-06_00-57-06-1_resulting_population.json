{
  "executionId" : "04581fab-e459-4a85-b66d-592f5c0c47c5",
  "computingTime" : 13128,
  "maxEvaluations" : 1000,
  "initialPopulationSize" : 50,
  "finalPopulationSize" : 34,
  "algorithm" : "Baseline",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.418808411214953,
    "meanNumConcerns" : 1.9070422535211269,
    "meanMetricsIntensity" : 0.06269018858892109,
    "meanLackOfCohesion" : 1.304513730459456
  },
  "population" : [ {
    "solutionId" : "3275bbce-d436-4972-885d-83599fbf5bcf",
    "objectives" : {
      "NumberOfConcerns" : 1.0011816838995569,
      "NumberOfRefactorings" : 3.0,
      "LackOfCohesion" : 1.302999531629692,
      "MetricsIntensity" : 0.06339251690555125,
      "Density" : 1.0029044934221767
    },
    "euclideanDistance" : 3.5651098970058643,
    "generation" : 0,
    "numberOfRefactorings" : 3,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.90607424071991,
      "LackOfCohesion" : 1.302999531629692,
      "MetricsIntensity" : 0.06339251690555125,
      "Density" : 3.4227405247813425,
      "baselineType" : "EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    } ]
  }, {
    "solutionId" : "011f7d3e-05de-41d6-8ca1-8b47f96a6896",
    "objectives" : {
      "NumberOfConcerns" : 1.0053175775480059,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.2977736912999387,
      "MetricsIntensity" : 0.06268581232652395,
      "Density" : 1.0044421664103877
    },
    "euclideanDistance" : 10.183698422591249,
    "generation" : 0,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9064425770308122,
      "LackOfCohesion" : 1.2977736912999387,
      "MetricsIntensity" : 0.06268581232652395,
      "Density" : 3.414053426248548,
      "baselineType" : "CONCERN_EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel(), io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "e70aca8c-b72c-4b23-bf4c-f04b80469cd5",
    "objectives" : {
      "NumberOfConcerns" : 1.0035450516986706,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.29966779054839,
      "MetricsIntensity" : 0.06278642015365235,
      "Density" : 1.0018793780967026
    },
    "euclideanDistance" : 19.097223448956893,
    "generation" : 0,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9062850729517398,
      "LackOfCohesion" : 1.29966779054839,
      "MetricsIntensity" : 0.06278642015365235,
      "Density" : 3.4093023255813955,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel(), io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.subscribers.SafeSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleContains'"
      } ]
    } ]
  }, {
    "solutionId" : "10093828-696f-4078-8af2-0e9e44a7ddee",
    "objectives" : {
      "NumberOfConcerns" : 1.002658788774003,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 1.3006240022058764,
      "MetricsIntensity" : 0.06279665521311026,
      "Density" : 1.0003417051084913
    },
    "euclideanDistance" : 21.087948558091302,
    "generation" : 0,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9056709713644024,
      "LackOfCohesion" : 1.3006240022058764,
      "MetricsIntensity" : 0.06279665521311024,
      "Density" : 3.4080325960419087,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext.NextObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.subscribers.DisposableSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin.SortedJoinInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferSkipBoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize.DematerializeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    } ]
  }, {
    "solutionId" : "b040d60e-23b4-4f08-8b63-5ecfcdc8f531",
    "objectives" : {
      "NumberOfConcerns" : 1.0029542097488922,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 1.2996417496283095,
      "MetricsIntensity" : 0.06281805358909949,
      "Density" : 1.0034170510849136
    },
    "euclideanDistance" : 21.088048219560164,
    "generation" : 0,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.905162738496072,
      "LackOfCohesion" : 1.2996417496283095,
      "MetricsIntensity" : 0.06281805358909949,
      "Density" : 3.418509895227008,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.OutputCanceller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleEquals'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable.IncrementingIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.SwitchMapInnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "08644652-88be-4015-b2de-f47af07b523d",
    "objectives" : {
      "NumberOfConcerns" : 0.9997045790251108,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.3013255749550536,
      "MetricsIntensity" : 0.06287052420554644,
      "Density" : 0.9957286861438579
    },
    "euclideanDistance" : 24.076716674342862,
    "generation" : 0,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.902192242833052,
      "LackOfCohesion" : 1.3013255749550536,
      "MetricsIntensity" : 0.06287052420554642,
      "Density" : 3.3942923704135124,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle.EqualObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.StrictPerf.InternalConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJust'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.OutputCanceller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferSkipBoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize.DematerializeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.subscribers.SafeSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleContains'"
      } ]
    } ]
  }, {
    "solutionId" : "207c327a-0a4e-4a1c-b5fa-7bb523cd735f",
    "objectives" : {
      "NumberOfConcerns" : 0.9985228951255539,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.2996539951046737,
      "MetricsIntensity" : 0.06290660860355117,
      "Density" : 1.0005125576627372
    },
    "euclideanDistance" : 25.07371394705077,
    "generation" : 0,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8988764044943827,
      "LackOfCohesion" : 1.2996539951046737,
      "MetricsIntensity" : 0.06290660860355117,
      "Density" : 3.412587412587412,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle.EqualObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.StrictPerf.InternalConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJust'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMap.MapObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableHide.HideSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferSkipBoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize.DematerializeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleEquals'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable.IncrementingIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.SwitchMapInnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "794ea9ec-f3a8-41e1-98d5-f781d7790950",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.3007751045892553,
      "MetricsIntensity" : 0.06284273240206284,
      "Density" : 0.9993165897830173
    },
    "euclideanDistance" : 25.073783095662897,
    "generation" : 0,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9016853932584272,
      "LackOfCohesion" : 1.3007751045892553,
      "MetricsIntensity" : 0.06284273240206284,
      "Density" : 3.4065230052417004,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle.EqualObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.StrictPerf.InternalConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJust'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel(), io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    } ]
  }, {
    "solutionId" : "b5c20fc0-5663-41fd-b50d-aface7c7cc3b",
    "objectives" : {
      "NumberOfConcerns" : 1.0011816838995569,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.298805812202968,
      "MetricsIntensity" : 0.06320568176897223,
      "Density" : 1.001708525542457
    },
    "euclideanDistance" : 26.070993004301553,
    "generation" : 0,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9028635597978663,
      "LackOfCohesion" : 1.298805812202968,
      "MetricsIntensity" : 0.06320568176897225,
      "Density" : 3.412689173457509,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.subscribers.SafeSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleContains'"
      } ]
    } ]
  }, {
    "solutionId" : "9b15aa51-62d2-480c-8706-048f07573d3c",
    "objectives" : {
      "NumberOfConcerns" : 0.9994091580502216,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.299936245839004,
      "MetricsIntensity" : 0.06328850741203311,
      "Density" : 1.0020502306509482
    },
    "euclideanDistance" : 26.07099466856527,
    "generation" : 0,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9016301292861162,
      "LackOfCohesion" : 1.299936245839004,
      "MetricsIntensity" : 0.06328850741203311,
      "Density" : 3.4178321678321684,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferSkipBoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize.DematerializeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleEquals'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable.IncrementingIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.SwitchMapInnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.subscribers.SafeSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleContains'"
      } ]
    } ]
  }, {
    "solutionId" : "58200578-6066-4891-aceb-0665d12feee0",
    "objectives" : {
      "NumberOfConcerns" : 1.0008862629246678,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.3009484882908093,
      "MetricsIntensity" : 0.06284753301613608,
      "Density" : 0.9988040321202802
    },
    "euclideanDistance" : 27.068354209066413,
    "generation" : 0,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.903370786516854,
      "LackOfCohesion" : 1.3009484882908093,
      "MetricsIntensity" : 0.06284753301613608,
      "Density" : 3.4047757716948173,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMap.MapObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableHide.HideSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext.NextObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.subscribers.DisposableSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin.SortedJoinInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler.ConcatMapObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfBoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel(), io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "5f90e315-d872-4b19-b3fb-babab69d1af7",
    "objectives" : {
      "NumberOfConcerns" : 0.9997045790251108,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.2990743112362082,
      "MetricsIntensity" : 0.06419474269589576,
      "Density" : 1.003246198530668
    },
    "euclideanDistance" : 27.06838796846413,
    "generation" : 0,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9000561482313303,
      "LackOfCohesion" : 1.2990743112362082,
      "MetricsIntensity" : 0.06419474269589576,
      "Density" : 3.417927823050059,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle.CollectSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile.TakeWhileObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile.TakeWhileObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle.EqualObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.StrictPerf.InternalConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJust'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "b71a6394-2119-4ac7-a6ad-af1cc6f15a70",
    "objectives" : {
      "NumberOfConcerns" : 0.9994091580502216,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.3036651449903778,
      "MetricsIntensity" : 0.06332523691649715,
      "Density" : 0.9989748846745259
    },
    "euclideanDistance" : 30.061608778994156,
    "generation" : 0,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.902699662542182,
      "LackOfCohesion" : 1.3036651449903778,
      "MetricsIntensity" : 0.06332523691649716,
      "Density" : 3.409329446064139,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.OutputCanceller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMap.MapObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableHide.HideSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext.NextObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.subscribers.DisposableSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin.SortedJoinInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    } ]
  }, {
    "solutionId" : "2e224f85-ba77-43cc-8afe-11573c32f965",
    "objectives" : {
      "NumberOfConcerns" : 1.0005908419497784,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.3008284121309501,
      "MetricsIntensity" : 0.06319077275129913,
      "Density" : 0.9982914744575432
    },
    "euclideanDistance" : 31.05952213947498,
    "generation" : 0,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9038785834738616,
      "LackOfCohesion" : 1.3008284121309501,
      "MetricsIntensity" : 0.06319077275129913,
      "Density" : 3.405011655011656,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.OutputCanceller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMap.MapObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableHide.HideSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel(), io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "baf7953f-b99c-4a4e-b114-9765bbb7e8fb",
    "objectives" : {
      "NumberOfConcerns" : 1.0011816838995569,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.3004803826237887,
      "MetricsIntensity" : 0.06331507047557541,
      "Density" : 1.0020502306509482
    },
    "euclideanDistance" : 31.0596478964695,
    "generation" : 0,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9039325842696637,
      "LackOfCohesion" : 1.3004803826237887,
      "MetricsIntensity" : 0.06331507047557543,
      "Density" : 3.415841584158416,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMap.MapObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableHide.HideSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler.ConcatMapObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfBoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.subscribers.SafeSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleContains'"
      } ]
    } ]
  }, {
    "solutionId" : "e1a8210b-a904-4823-8933-bec8585a3f8a",
    "objectives" : {
      "NumberOfConcerns" : 1.0008862629246678,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.2989236623288885,
      "MetricsIntensity" : 0.06319903322977732,
      "Density" : 1.0008542627712285
    },
    "euclideanDistance" : 32.05767738568996,
    "generation" : 0,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9033707865168539,
      "LackOfCohesion" : 1.2989236623288885,
      "MetricsIntensity" : 0.06319903322977732,
      "Density" : 3.413752913752913,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle.EqualObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.StrictPerf.InternalConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJust'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferSkipBoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize.DematerializeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "1941d92f-7ef3-4d98-95b5-3086bbe3005c",
    "objectives" : {
      "NumberOfConcerns" : 0.9985228951255539,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.302428659033551,
      "MetricsIntensity" : 0.0642481206831886,
      "Density" : 1.0018793780967026
    },
    "euclideanDistance" : 32.057779999451434,
    "generation" : 0,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9010123734533184,
      "LackOfCohesion" : 1.302428659033551,
      "MetricsIntensity" : 0.06424812068318858,
      "Density" : 3.4172494172494177,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle.CollectSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile.TakeWhileObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile.TakeWhileObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.OutputCanceller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMap.MapObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableHide.HideSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferSkipBoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize.DematerializeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.subscribers.SafeSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleContains'"
      } ]
    } ]
  }, {
    "solutionId" : "5c6efbbb-af4b-4e90-a6e7-22922218b7e7",
    "objectives" : {
      "NumberOfConcerns" : 1.0017725258493353,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.3021696145732768,
      "MetricsIntensity" : 0.06286866003336126,
      "Density" : 1.0005125576627372
    },
    "euclideanDistance" : 32.057825436936916,
    "generation" : 0,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.905056179775281,
      "LackOfCohesion" : 1.3021696145732768,
      "MetricsIntensity" : 0.06286866003336128,
      "Density" : 3.412587412587412,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.OutputCanceller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "b6aa37d1-87df-4f62-8873-15ceba7be15e",
    "objectives" : {
      "NumberOfConcerns" : 0.9991137370753324,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.3003325597815718,
      "MetricsIntensity" : 0.0632301824333301,
      "Density" : 1.0011959678797198
    },
    "euclideanDistance" : 33.05594476713243,
    "generation" : 0,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9010680157391795,
      "LackOfCohesion" : 1.3003325597815718,
      "MetricsIntensity" : 0.0632301824333301,
      "Density" : 3.4169096209912526,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel(), io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleEquals'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable.IncrementingIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.SwitchMapInnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    } ]
  }, {
    "solutionId" : "1c8ad3a0-ce07-497f-83eb-9273f98abde5",
    "objectives" : {
      "NumberOfConcerns" : 0.9973412112259971,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.2989634375877144,
      "MetricsIntensity" : 0.0642819252574417,
      "Density" : 1.0015376729882113
    },
    "euclideanDistance" : 34.05420980407751,
    "generation" : 0,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8976953344575604,
      "LackOfCohesion" : 1.2989634375877144,
      "MetricsIntensity" : 0.0642819252574417,
      "Density" : 3.4160839160839176,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle.CollectSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile.TakeWhileObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile.TakeWhileObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleEquals'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable.IncrementingIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.SwitchMapInnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.subscribers.SafeSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleContains'"
      } ]
    } ]
  }, {
    "solutionId" : "c81b4311-f32e-4f14-b6c0-c2c42abd2a3e",
    "objectives" : {
      "NumberOfConcerns" : 0.9988183161004431,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 1.3004083612249693,
      "MetricsIntensity" : 0.06286208922321353,
      "Density" : 0.9957286861438579
    },
    "euclideanDistance" : 35.05259087704064,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9015748031496063,
      "LackOfCohesion" : 1.3004083612249693,
      "MetricsIntensity" : 0.06286208922321353,
      "Density" : 3.396270396270397,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMap.MapObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableHide.HideSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler.ConcatMapObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfBoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.subscribers.SafeSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleContains'"
      } ]
    } ]
  }, {
    "solutionId" : "6fc5346a-9297-4b2f-9977-c8d8d415b826",
    "objectives" : {
      "NumberOfConcerns" : 0.9997045790251108,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.302105583379815,
      "MetricsIntensity" : 0.0632902804627908,
      "Density" : 1.0008542627712285
    },
    "euclideanDistance" : 36.05136062772806,
    "generation" : 0,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.90326209223847,
      "LackOfCohesion" : 1.302105583379815,
      "MetricsIntensity" : 0.0632902804627908,
      "Density" : 3.4157434402332365,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.OutputCanceller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleEquals'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable.IncrementingIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.SwitchMapInnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.subscribers.SafeSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleContains'"
      } ]
    } ]
  }, {
    "solutionId" : "a2e5a031-090a-41ba-a521-0dfcadb6a70b",
    "objectives" : {
      "NumberOfConcerns" : 0.9997045790251108,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.3037353469777584,
      "MetricsIntensity" : 0.06294419413042655,
      "Density" : 0.9991457372287715
    },
    "euclideanDistance" : 36.051371531137065,
    "generation" : 0,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.90326209223847,
      "LackOfCohesion" : 1.3037353469777584,
      "MetricsIntensity" : 0.06294419413042657,
      "Density" : 3.4119019836639435,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle.EqualObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.StrictPerf.InternalConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJust'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.OutputCanceller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferSkipBoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize.DematerializeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "3d1e59c9-c2f7-45f2-b1ef-02f6199b011a",
    "objectives" : {
      "NumberOfConcerns" : 0.9997045790251108,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.3002371207620822,
      "MetricsIntensity" : 0.06327485220662377,
      "Density" : 0.9994874423372629
    },
    "euclideanDistance" : 38.048561137970026,
    "generation" : 0,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.902192242833052,
      "LackOfCohesion" : 1.3002371207620822,
      "MetricsIntensity" : 0.06327485220662375,
      "Density" : 3.4110787172011663,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext.NextObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.subscribers.DisposableSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin.SortedJoinInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel(), io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleEquals'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable.IncrementingIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.SwitchMapInnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "8e7a5558-ff3d-4bf8-ad69-4809395771c8",
    "objectives" : {
      "NumberOfConcerns" : 1.0005908419497784,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.3029617018625919,
      "MetricsIntensity" : 0.06329628907083239,
      "Density" : 0.9986331795660345
    },
    "euclideanDistance" : 38.048655244003754,
    "generation" : 0,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.904949381327334,
      "LackOfCohesion" : 1.3029617018625919,
      "MetricsIntensity" : 0.0632962890708324,
      "Density" : 3.408163265306123,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.OutputCanceller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext.NextObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.subscribers.DisposableSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin.SortedJoinInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler.ConcatMapObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfBoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "0d4331df-7659-4b1c-b14e-73a5d13dca95",
    "objectives" : {
      "NumberOfConcerns" : 0.9997045790251108,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.301021340979671,
      "MetricsIntensity" : 0.0633352530615267,
      "Density" : 0.9991457372287715
    },
    "euclideanDistance" : 40.04615299043731,
    "generation" : 0,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.902192242833052,
      "LackOfCohesion" : 1.301021340979671,
      "MetricsIntensity" : 0.0633352530615267,
      "Density" : 3.4099125364431484,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext.NextObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.subscribers.DisposableSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin.SortedJoinInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleEquals'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable.IncrementingIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.SwitchMapInnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "8f48da3e-2c8b-4dda-b332-1233afcbbf57",
    "objectives" : {
      "NumberOfConcerns" : 0.9985228951255539,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 1.3028787457032482,
      "MetricsIntensity" : 0.06447693521854958,
      "Density" : 0.9989748846745259
    },
    "euclideanDistance" : 41.045056329520136,
    "generation" : 0,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9042253521126764,
      "LackOfCohesion" : 1.3028787457032482,
      "MetricsIntensity" : 0.06447693521854957,
      "Density" : 3.4172998246639383,
      "baselineType" : "CONCERN_MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMap.MapConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne.TakeLastOneSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne.TakeLastOneSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable.ConcatMapCompletableObserver.ConcatMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe.FlatMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEagerPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDetach.DetachCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.subjects.ReplaySubject.ReplayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletable.FromCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed.SampleTimedNoLast'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle.MergeWithObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.core.Scheduler.PeriodicDirectTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMapPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap.ConcatMapDelayErrorObserver.DelayErrorInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfAsyncConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingle.ConcatWithSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle.CollectObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSubscribe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle.AllObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinally.DoFinallyObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil.SkipUntilMainSubscriber.OtherSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipUntil.SkipUntilMainSubscriber.OtherSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.exceptions.ProtocolViolationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimed'"
      } ]
    } ]
  }, {
    "solutionId" : "bc176892-45ab-46c9-aac3-4de9035b6f9c",
    "objectives" : {
      "NumberOfConcerns" : 0.9967503692762186,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 1.300879497335548,
      "MetricsIntensity" : 0.06432838764627763,
      "Density" : 0.9984623270117888
    },
    "euclideanDistance" : 42.04386832732163,
    "generation" : 0,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8987056837366347,
      "LackOfCohesion" : 1.300879497335548,
      "MetricsIntensity" : 0.06432838764627763,
      "Density" : 3.4095682613768954,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle.CollectSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile.TakeWhileObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile.TakeWhileObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.OutputCanceller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMap.MapObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableHide.HideSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler.ConcatMapObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfBoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.subscribers.SafeSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleContains'"
      } ]
    } ]
  }, {
    "solutionId" : "78d0f47d-a251-46e8-bd52-4a11cc23efdd",
    "objectives" : {
      "NumberOfConcerns" : 0.9976366322008863,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 1.2993880861497935,
      "MetricsIntensity" : 0.06424474860073645,
      "Density" : 0.9986331795660345
    },
    "euclideanDistance" : 43.042828483539395,
    "generation" : 0,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8993250843644542,
      "LackOfCohesion" : 1.2993880861497935,
      "MetricsIntensity" : 0.06424474860073645,
      "Density" : 3.408163265306123,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle.CollectSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile.TakeWhileObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile.TakeWhileObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMap.MapObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableHide.HideSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferSkipBoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize.DematerializeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.subscribers.SafeSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleContains'"
      } ]
    } ]
  }, {
    "solutionId" : "bc2ebbd1-f8b7-4bcc-a2d5-3d88a5fd24ba",
    "objectives" : {
      "NumberOfConcerns" : 0.9973412112259971,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 1.3024943374418736,
      "MetricsIntensity" : 0.06333155785166086,
      "Density" : 0.9982914744575432
    },
    "euclideanDistance" : 43.04290624185212,
    "generation" : 0,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.900900900900901,
      "LackOfCohesion" : 1.3024943374418736,
      "MetricsIntensity" : 0.06333155785166086,
      "Density" : 3.412967289719627,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMap.MapObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableHide.HideSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext.NextObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.subscribers.DisposableSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin.SortedJoinInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.SinglePostCompleteSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler.ConcatMapObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfBoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferSkipBoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize.DematerializeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleEquals'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable.IncrementingIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.SwitchMapInnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    } ]
  }, {
    "solutionId" : "7a6e4c19-b0a7-494c-b55d-dcc8b4bb1a53",
    "objectives" : {
      "NumberOfConcerns" : 0.9988183161004431,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 1.3009891480174585,
      "MetricsIntensity" : 0.06285592725405534,
      "Density" : 0.9952161284811208
    },
    "euclideanDistance" : 44.041850742240804,
    "generation" : 0,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9015748031496063,
      "LackOfCohesion" : 1.3009891480174585,
      "MetricsIntensity" : 0.06285592725405535,
      "Density" : 3.398483080513419,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel(), io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    } ]
  }, {
    "solutionId" : "5532ee80-6fdf-428b-81ec-05d4ed8cf74b",
    "objectives" : {
      "NumberOfConcerns" : 0.9979320531757755,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 1.301922216005998,
      "MetricsIntensity" : 0.06426743440125014,
      "Density" : 1.0015376729882113
    },
    "euclideanDistance" : 44.04200356310808,
    "generation" : 0,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.899887514060742,
      "LackOfCohesion" : 1.301922216005998,
      "MetricsIntensity" : 0.06426743440125016,
      "Density" : 3.4160839160839163,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle.CollectSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile.TakeWhileObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile.TakeWhileObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.OutputCanceller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn.OnErrorReturn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.subscribers.SafeSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleContains'"
      } ]
    } ]
  }, {
    "solutionId" : "4b299e42-5ae7-4dfd-bef0-46233ed20864",
    "objectives" : {
      "NumberOfConcerns" : 0.9970457902511078,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 1.3001329918354125,
      "MetricsIntensity" : 0.06424775656521205,
      "Density" : 0.9986331795660345
    },
    "euclideanDistance" : 49.03759621051862,
    "generation" : 0,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8992684299380982,
      "LackOfCohesion" : 1.3001329918354125,
      "MetricsIntensity" : 0.06424775656521205,
      "Density" : 3.408163265306123,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle.CollectSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen.RetryWhenSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile.TakeWhileObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile.TakeWhileObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMap.MapObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableHide.HideSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.subscribers.SafeSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleContains'"
      } ]
    } ]
  }, {
    "solutionId" : "795146ba-9eb0-43d9-be52-005713673ccc",
    "objectives" : {
      "NumberOfConcerns" : 0.9979320531757755,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 1.3026334746716135,
      "MetricsIntensity" : 0.0632638643344291,
      "Density" : 0.9969246540235777
    },
    "euclideanDistance" : 54.034161263356545,
    "generation" : 0,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9030985915492962,
      "LackOfCohesion" : 1.3026334746716135,
      "MetricsIntensity" : 0.0632638643344291,
      "Density" : 3.408294392523364,
      "baselineType" : "MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    } ]
  } ]
}